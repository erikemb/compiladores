Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABREBLOCO
    ASPAS_DUPLAS
    ASPAS_SIMPLES
    COMENTARIO
    DEFAULT
    DOLLAR
    ECOMERCIAL
    ESTRELA
    EXCLAMACAO
    FECHABLOCO
    HASHTAG
    INTERROGACAO
    NEWLINE
    NOVA_LINHA
    PERCENT
    PONTO
    SETAS_DUPLO
    SETAS_ESQUERDA
    TABULACAO
    TIL
    TIPO
    UMINUS

Grammar

Rule 0     S' -> body
Rule 1     body -> topdecls
Rule 2     topdecls -> topdecl PONTO_VIRGULA topdecls
Rule 3     topdecls -> topdecl
Rule 4     topdecl -> decl
Rule 5     decls -> LCHAVE declslist RCHAVE
Rule 6     declslist -> decl PONTO_VIRGULA declslist
Rule 7     declslist -> decl
Rule 8     decl -> gendecl
Rule 9     decl -> funlhs rhs
Rule 10    decl -> pat rhs
Rule 11    gendecl -> vars DOIS_PONTOS_DUPLO type
Rule 12    vars -> var
Rule 13    vars -> var VIRGULA vars
Rule 14    type -> btype
Rule 15    type -> btype SETAS type
Rule 16    btype -> btype atype
Rule 17    btype -> atype
Rule 18    atype -> INT
Rule 19    atype -> FLOAT
Rule 20    atype -> BOOL
Rule 21    atype -> CHAR
Rule 22    atype -> STRING
Rule 23    atype -> LPAREN type RPAREN
Rule 24    atype -> LPAREN typetuple RPAREN
Rule 25    atype -> LCOLCHETE type RCOLCHETE
Rule 26    typetuple -> type VIRGULA typetuple
Rule 27    typetuple -> type
Rule 28    funlhs -> var apatlist
Rule 29    funlhs -> patop
Rule 30    funlhs -> LPAREN funlhs RPAREN apatlist
Rule 31    apatlist -> apat apatlist
Rule 32    apatlist -> apat
Rule 33    apat -> var
Rule 34    apat -> var ARROBA apat
Rule 35    apat -> qcon LCHAVE fpatlist RCHAVE
Rule 36    apat -> INT
Rule 37    apat -> FLOAT
Rule 38    apat -> CHAR
Rule 39    apat -> STRING
Rule 40    apat -> TRUE
Rule 41    apat -> FALSE
Rule 42    apat -> gcon
Rule 43    apat -> UNDERLINE
Rule 44    apat -> LPAREN pat RPAREN
Rule 45    apat -> LPAREN pattuple RPAREN
Rule 46    apat -> LCOLCHETE patlist RCOLCHETE
Rule 47    fpatlist -> fpat VIRGULA fpatlist
Rule 48    fpatlist -> fpat
Rule 49    fpat -> var EQUAL pat
Rule 50    patlist -> pat VIRGULA patlist
Rule 51    patlist -> pat
Rule 52    pattuple -> pat VIRGULA pattuple
Rule 53    pattuple -> pat VIRGULA pat
Rule 54    patop -> pat varop pat
Rule 55    patop -> pat PLUS pat
Rule 56    patop -> pat MINUS pat
Rule 57    patop -> pat MULT pat
Rule 58    patop -> pat BARRA pat
Rule 59    patop -> pat CIRCUNFLEXO pat
Rule 60    patop -> pat MAIOR_IGUAL pat
Rule 61    patop -> pat MENOR_IGUAL pat
Rule 62    patop -> pat MAIOR pat
Rule 63    patop -> pat MENOR pat
Rule 64    patop -> pat IGUAL pat
Rule 65    patop -> pat DIFERENTE pat
Rule 66    patop -> pat OR pat
Rule 67    patop -> pat NOT pat
Rule 68    patop -> pat AND pat
Rule 69    pat -> lpat DOIS_PONTOS pat
Rule 70    pat -> lpat
Rule 71    lpat -> apat
Rule 72    lpat -> MINUS lpattype
Rule 73    lpat -> gcon apatlist
Rule 74    lpattype -> INT
Rule 75    lpattype -> FLOAT
Rule 76    rhs -> EQUAL exp WHERE decls
Rule 77    rhs -> gdrhs WHERE decls
Rule 78    gdrhs -> guards EQUAL exp
Rule 79    gdrhs -> guards EQUAL exp gdrhs
Rule 80    guards -> PIPE guardslist
Rule 81    guardslist -> guard VIRGULA guardslist
Rule 82    guardslist -> guard
Rule 83    guard -> pat SETAS infixexp
Rule 84    guard -> LET decls
Rule 85    guard -> infixexp
Rule 86    aexp -> var
Rule 87    aexp -> INT
Rule 88    aexp -> FLOAT
Rule 89    aexp -> CHAR
Rule 90    aexp -> STRING
Rule 91    aexp -> TRUE
Rule 92    aexp -> FALSE
Rule 93    aexp -> LPAREN exptuple RPAREN
Rule 94    aexp -> LCOLCHETE explist RCOLCHETE
Rule 95    aexp -> LPAREN exp RPAREN
Rule 96    aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE
Rule 97    aexp -> LPAREN infixexp qop RPAREN
Rule 98    aexp -> LPAREN qop infixexp RPAREN
Rule 99    exptuple -> exp VIRGULA exptuple
Rule 100   exptuple -> exp VIRGULA exp
Rule 101   explist -> exp VIRGULA explist
Rule 102   explist -> exp
Rule 103   exp -> infixexp DOIS_PONTOS_DUPLO type
Rule 104   exp -> infixexp
Rule 105   infixexp -> expop
Rule 106   infixexp -> MINUS infixexp
Rule 107   infixexp -> lexp
Rule 108   expop -> infixexp varop infixexp
Rule 109   expop -> infixexp PLUS infixexp
Rule 110   expop -> infixexp MINUS infixexp
Rule 111   expop -> infixexp MULT infixexp
Rule 112   expop -> infixexp DIV infixexp
Rule 113   expop -> infixexp CIRCUNFLEXO infixexp
Rule 114   expop -> infixexp MAIOR_IGUAL infixexp
Rule 115   expop -> infixexp MENOR_IGUAL infixexp
Rule 116   expop -> infixexp MAIOR infixexp
Rule 117   expop -> infixexp MENOR infixexp
Rule 118   expop -> infixexp IGUAL infixexp
Rule 119   expop -> infixexp DIFERENTE infixexp
Rule 120   expop -> infixexp OR infixexp
Rule 121   expop -> infixexp NOT infixexp
Rule 122   expop -> infixexp AND infixexp
Rule 123   lexp -> BARRA_INVERTIDA apatlist SETAS exp
Rule 124   lexp -> LET decls IN exp
Rule 125   lexp -> IF exp THEN exp ELSE exp
Rule 126   lexp -> CASE exp OF LCHAVE alts RCHAVE
Rule 127   lexp -> fexp
Rule 128   fexp -> aexp aexp
Rule 129   fexp -> aexp fexp
Rule 130   quallist -> qual VIRGULA quallist
Rule 131   quallist -> qual
Rule 132   qual -> pat SETAS exp
Rule 133   qual -> LET decls
Rule 134   qual -> exp
Rule 135   alts -> alt PONTO_VIRGULA alts
Rule 136   alts -> alt
Rule 137   alt -> pat SETAS exp optionwhere
Rule 138   alt -> pat gdpat optionwhere
Rule 139   optionwhere -> WHERE decls
Rule 140   optionwhere -> <empty>
Rule 141   gdpat -> guards SETAS exp
Rule 142   gdpat -> guards SETAS exp gdpat
Rule 143   gcon -> LPAREN RPAREN
Rule 144   gcon -> LCOLCHETE RCOLCHETE
Rule 145   gcon -> LPAREN virgulalist RPAREN
Rule 146   gcon -> qcon
Rule 147   virgulalist -> VIRGULA virgulalist
Rule 148   virgulalist -> VIRGULA
Rule 149   var -> ID
Rule 150   var -> LPAREN VARSYM RPAREN
Rule 151   qcon -> LPAREN DOIS_PONTOS RPAREN
Rule 152   varop -> VARSYM
Rule 153   varop -> CRASE ID CRASE
Rule 154   qvarop -> VARSYM
Rule 155   qvarop -> CRASE ID CRASE
Rule 156   qop -> qvarop
Rule 157   qop -> DOIS_PONTOS

Terminals, with rules where they appear

ABREBLOCO            : 
AND                  : 68 122
ARROBA               : 34
ASPAS_DUPLAS         : 
ASPAS_SIMPLES        : 
BARRA                : 58
BARRA_INVERTIDA      : 123
BOOL                 : 20
CASE                 : 126
CHAR                 : 21 38 89
CIRCUNFLEXO          : 59 113
COMENTARIO           : 
CRASE                : 153 153 155 155
DEFAULT              : 
DIFERENTE            : 65 119
DIV                  : 112
DOIS_PONTOS          : 69 151 157
DOIS_PONTOS_DUPLO    : 11 103
DOLLAR               : 
ECOMERCIAL           : 
ELSE                 : 125
EQUAL                : 49 76 78 79
ESTRELA              : 
EXCLAMACAO           : 
FALSE                : 41 92
FECHABLOCO           : 
FLOAT                : 19 37 75 88
HASHTAG              : 
ID                   : 149 153 155
IF                   : 125
IGUAL                : 64 118
IN                   : 124
INT                  : 18 36 74 87
INTERROGACAO         : 
LCHAVE               : 5 35 126
LCOLCHETE            : 25 46 94 96 144
LET                  : 84 124 133
LPAREN               : 23 24 30 44 45 93 95 97 98 143 145 150 151
MAIOR                : 62 116
MAIOR_IGUAL          : 60 114
MENOR                : 63 117
MENOR_IGUAL          : 61 115
MINUS                : 56 72 106 110
MULT                 : 57 111
NEWLINE              : 
NOT                  : 67 121
NOVA_LINHA           : 
OF                   : 126
OR                   : 66 120
PERCENT              : 
PIPE                 : 80 96
PLUS                 : 55 109
PONTO                : 
PONTO_VIRGULA        : 2 6 135
RCHAVE               : 5 35 126
RCOLCHETE            : 25 46 94 96 144
RPAREN               : 23 24 30 44 45 93 95 97 98 143 145 150 151
SETAS                : 15 83 123 132 137 141 142
SETAS_DUPLO          : 
SETAS_ESQUERDA       : 
STRING               : 22 39 90
TABULACAO            : 
THEN                 : 125
TIL                  : 
TIPO                 : 
TRUE                 : 40 91
UMINUS               : 
UNDERLINE            : 43
VARSYM               : 150 152 154
VIRGULA              : 13 26 47 50 52 53 81 99 100 101 130 147 148
WHERE                : 76 77 139
error                : 

Nonterminals, with rules where they appear

aexp                 : 128 128 129
alt                  : 135 136
alts                 : 126 135
apat                 : 31 32 34 71
apatlist             : 28 30 31 73 123
atype                : 16 17
body                 : 0
btype                : 14 15 16
decl                 : 4 6 7
decls                : 76 77 84 124 133 139
declslist            : 5 6
exp                  : 76 78 79 95 96 99 100 100 101 102 123 124 125 125 125 126 132 134 137 141 142
explist              : 94 101
expop                : 105
exptuple             : 93 99
fexp                 : 127 129
fpat                 : 47 48
fpatlist             : 35 47
funlhs               : 9 30
gcon                 : 42 73
gdpat                : 138 142
gdrhs                : 77 79
gendecl              : 8
guard                : 81 82
guards               : 78 79 141 142
guardslist           : 80 81
infixexp             : 83 85 97 98 103 104 106 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122
lexp                 : 107
lpat                 : 69 70
lpattype             : 72
optionwhere          : 137 138
pat                  : 10 44 49 50 51 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 83 132 137 138
patlist              : 46 50
patop                : 29
pattuple             : 45 52
qcon                 : 35 146
qop                  : 97 98
qual                 : 130 131
quallist             : 96 130
qvarop               : 156
rhs                  : 9 10
topdecl              : 2 3
topdecls             : 1 2
type                 : 11 15 23 25 26 27 103
typetuple            : 24 26
var                  : 12 13 28 33 34 49 86
varop                : 54 108
vars                 : 11 13
virgulalist          : 145 147

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . topdecls
    (2) topdecls -> . topdecl PONTO_VIRGULA topdecls
    (3) topdecls -> . topdecl
    (4) topdecl -> . decl
    (8) decl -> . gendecl
    (9) decl -> . funlhs rhs
    (10) decl -> . pat rhs
    (11) gendecl -> . vars DOIS_PONTOS_DUPLO type
    (28) funlhs -> . var apatlist
    (29) funlhs -> . patop
    (30) funlhs -> . LPAREN funlhs RPAREN apatlist
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (12) vars -> . var
    (13) vars -> . var VIRGULA vars
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (54) patop -> . pat varop pat
    (55) patop -> . pat PLUS pat
    (56) patop -> . pat MINUS pat
    (57) patop -> . pat MULT pat
    (58) patop -> . pat BARRA pat
    (59) patop -> . pat CIRCUNFLEXO pat
    (60) patop -> . pat MAIOR_IGUAL pat
    (61) patop -> . pat MENOR_IGUAL pat
    (62) patop -> . pat MAIOR pat
    (63) patop -> . pat MENOR pat
    (64) patop -> . pat IGUAL pat
    (65) patop -> . pat DIFERENTE pat
    (66) patop -> . pat OR pat
    (67) patop -> . pat NOT pat
    (68) patop -> . pat AND pat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    LPAREN          shift and go to state 11
    ID              shift and go to state 13
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LCOLCHETE       shift and go to state 25

    body                           shift and go to state 1
    topdecls                       shift and go to state 2
    topdecl                        shift and go to state 3
    decl                           shift and go to state 4
    gendecl                        shift and go to state 5
    funlhs                         shift and go to state 6
    pat                            shift and go to state 7
    vars                           shift and go to state 8
    var                            shift and go to state 9
    patop                          shift and go to state 10
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    qcon                           shift and go to state 17

state 1

    (0) S' -> body .



state 2

    (1) body -> topdecls .

    $end            reduce using rule 1 (body -> topdecls .)


state 3

    (2) topdecls -> topdecl . PONTO_VIRGULA topdecls
    (3) topdecls -> topdecl .

    PONTO_VIRGULA   shift and go to state 26
    $end            reduce using rule 3 (topdecls -> topdecl .)


state 4

    (4) topdecl -> decl .

    PONTO_VIRGULA   reduce using rule 4 (topdecl -> decl .)
    $end            reduce using rule 4 (topdecl -> decl .)


state 5

    (8) decl -> gendecl .

    PONTO_VIRGULA   reduce using rule 8 (decl -> gendecl .)
    $end            reduce using rule 8 (decl -> gendecl .)
    RCHAVE          reduce using rule 8 (decl -> gendecl .)


state 6

    (9) decl -> funlhs . rhs
    (76) rhs -> . EQUAL exp WHERE decls
    (77) rhs -> . gdrhs WHERE decls
    (78) gdrhs -> . guards EQUAL exp
    (79) gdrhs -> . guards EQUAL exp gdrhs
    (80) guards -> . PIPE guardslist

    EQUAL           shift and go to state 28
    PIPE            shift and go to state 31

    rhs                            shift and go to state 27
    gdrhs                          shift and go to state 29
    guards                         shift and go to state 30

state 7

    (10) decl -> pat . rhs
    (54) patop -> pat . varop pat
    (55) patop -> pat . PLUS pat
    (56) patop -> pat . MINUS pat
    (57) patop -> pat . MULT pat
    (58) patop -> pat . BARRA pat
    (59) patop -> pat . CIRCUNFLEXO pat
    (60) patop -> pat . MAIOR_IGUAL pat
    (61) patop -> pat . MENOR_IGUAL pat
    (62) patop -> pat . MAIOR pat
    (63) patop -> pat . MENOR pat
    (64) patop -> pat . IGUAL pat
    (65) patop -> pat . DIFERENTE pat
    (66) patop -> pat . OR pat
    (67) patop -> pat . NOT pat
    (68) patop -> pat . AND pat
    (76) rhs -> . EQUAL exp WHERE decls
    (77) rhs -> . gdrhs WHERE decls
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE
    (78) gdrhs -> . guards EQUAL exp
    (79) gdrhs -> . guards EQUAL exp gdrhs
    (80) guards -> . PIPE guardslist

    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULT            shift and go to state 36
    BARRA           shift and go to state 37
    CIRCUNFLEXO     shift and go to state 38
    MAIOR_IGUAL     shift and go to state 39
    MENOR_IGUAL     shift and go to state 40
    MAIOR           shift and go to state 41
    MENOR           shift and go to state 42
    IGUAL           shift and go to state 43
    DIFERENTE       shift and go to state 44
    OR              shift and go to state 45
    NOT             shift and go to state 46
    AND             shift and go to state 47
    EQUAL           shift and go to state 28
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49
    PIPE            shift and go to state 31

    rhs                            shift and go to state 32
    varop                          shift and go to state 33
    gdrhs                          shift and go to state 29
    guards                         shift and go to state 30

state 8

    (11) gendecl -> vars . DOIS_PONTOS_DUPLO type

    DOIS_PONTOS_DUPLO shift and go to state 50


state 9

    (28) funlhs -> var . apatlist
    (12) vars -> var .
    (13) vars -> var . VIRGULA vars
    (33) apat -> var .
    (34) apat -> var . ARROBA apat
    (31) apatlist -> . apat apatlist
    (32) apatlist -> . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    DOIS_PONTOS_DUPLO reduce using rule 12 (vars -> var .)
    VIRGULA         shift and go to state 53
    DOIS_PONTOS     reduce using rule 33 (apat -> var .)
    PLUS            reduce using rule 33 (apat -> var .)
    MINUS           reduce using rule 33 (apat -> var .)
    MULT            reduce using rule 33 (apat -> var .)
    BARRA           reduce using rule 33 (apat -> var .)
    CIRCUNFLEXO     reduce using rule 33 (apat -> var .)
    MAIOR_IGUAL     reduce using rule 33 (apat -> var .)
    MENOR_IGUAL     reduce using rule 33 (apat -> var .)
    MAIOR           reduce using rule 33 (apat -> var .)
    MENOR           reduce using rule 33 (apat -> var .)
    IGUAL           reduce using rule 33 (apat -> var .)
    DIFERENTE       reduce using rule 33 (apat -> var .)
    OR              reduce using rule 33 (apat -> var .)
    NOT             reduce using rule 33 (apat -> var .)
    AND             reduce using rule 33 (apat -> var .)
    EQUAL           reduce using rule 33 (apat -> var .)
    VARSYM          reduce using rule 33 (apat -> var .)
    CRASE           reduce using rule 33 (apat -> var .)
    PIPE            reduce using rule 33 (apat -> var .)
    ARROBA          shift and go to state 54
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    var                            shift and go to state 51
    apatlist                       shift and go to state 52
    apat                           shift and go to state 55
    qcon                           shift and go to state 17
    gcon                           shift and go to state 56

state 10

    (29) funlhs -> patop .

    EQUAL           reduce using rule 29 (funlhs -> patop .)
    PIPE            reduce using rule 29 (funlhs -> patop .)
    RPAREN          reduce using rule 29 (funlhs -> patop .)


state 11

    (30) funlhs -> LPAREN . funlhs RPAREN apatlist
    (150) var -> LPAREN . VARSYM RPAREN
    (44) apat -> LPAREN . pat RPAREN
    (45) apat -> LPAREN . pattuple RPAREN
    (143) gcon -> LPAREN . RPAREN
    (145) gcon -> LPAREN . virgulalist RPAREN
    (151) qcon -> LPAREN . DOIS_PONTOS RPAREN
    (28) funlhs -> . var apatlist
    (29) funlhs -> . patop
    (30) funlhs -> . LPAREN funlhs RPAREN apatlist
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (52) pattuple -> . pat VIRGULA pattuple
    (53) pattuple -> . pat VIRGULA pat
    (147) virgulalist -> . VIRGULA virgulalist
    (148) virgulalist -> . VIRGULA
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (54) patop -> . pat varop pat
    (55) patop -> . pat PLUS pat
    (56) patop -> . pat MINUS pat
    (57) patop -> . pat MULT pat
    (58) patop -> . pat BARRA pat
    (59) patop -> . pat CIRCUNFLEXO pat
    (60) patop -> . pat MAIOR_IGUAL pat
    (61) patop -> . pat MENOR_IGUAL pat
    (62) patop -> . pat MAIOR pat
    (63) patop -> . pat MENOR pat
    (64) patop -> . pat IGUAL pat
    (65) patop -> . pat DIFERENTE pat
    (66) patop -> . pat OR pat
    (67) patop -> . pat NOT pat
    (68) patop -> . pat AND pat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    VARSYM          shift and go to state 60
    RPAREN          shift and go to state 59
    DOIS_PONTOS     shift and go to state 64
    LPAREN          shift and go to state 11
    VIRGULA         shift and go to state 66
    ID              shift and go to state 13
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LCOLCHETE       shift and go to state 25

    funlhs                         shift and go to state 58
    pat                            shift and go to state 61
    pattuple                       shift and go to state 62
    virgulalist                    shift and go to state 63
    var                            shift and go to state 65
    patop                          shift and go to state 10
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    qcon                           shift and go to state 17

state 12

    (69) pat -> lpat . DOIS_PONTOS pat
    (70) pat -> lpat .

    DOIS_PONTOS     shift and go to state 67
    PLUS            reduce using rule 70 (pat -> lpat .)
    MINUS           reduce using rule 70 (pat -> lpat .)
    MULT            reduce using rule 70 (pat -> lpat .)
    BARRA           reduce using rule 70 (pat -> lpat .)
    CIRCUNFLEXO     reduce using rule 70 (pat -> lpat .)
    MAIOR_IGUAL     reduce using rule 70 (pat -> lpat .)
    MENOR_IGUAL     reduce using rule 70 (pat -> lpat .)
    MAIOR           reduce using rule 70 (pat -> lpat .)
    MENOR           reduce using rule 70 (pat -> lpat .)
    IGUAL           reduce using rule 70 (pat -> lpat .)
    DIFERENTE       reduce using rule 70 (pat -> lpat .)
    OR              reduce using rule 70 (pat -> lpat .)
    NOT             reduce using rule 70 (pat -> lpat .)
    AND             reduce using rule 70 (pat -> lpat .)
    EQUAL           reduce using rule 70 (pat -> lpat .)
    VARSYM          reduce using rule 70 (pat -> lpat .)
    CRASE           reduce using rule 70 (pat -> lpat .)
    PIPE            reduce using rule 70 (pat -> lpat .)
    RPAREN          reduce using rule 70 (pat -> lpat .)
    VIRGULA         reduce using rule 70 (pat -> lpat .)
    RCOLCHETE       reduce using rule 70 (pat -> lpat .)
    SETAS           reduce using rule 70 (pat -> lpat .)
    RCHAVE          reduce using rule 70 (pat -> lpat .)


state 13

    (149) var -> ID .

    VIRGULA         reduce using rule 149 (var -> ID .)
    ARROBA          reduce using rule 149 (var -> ID .)
    INT             reduce using rule 149 (var -> ID .)
    FLOAT           reduce using rule 149 (var -> ID .)
    CHAR            reduce using rule 149 (var -> ID .)
    STRING          reduce using rule 149 (var -> ID .)
    TRUE            reduce using rule 149 (var -> ID .)
    FALSE           reduce using rule 149 (var -> ID .)
    UNDERLINE       reduce using rule 149 (var -> ID .)
    LPAREN          reduce using rule 149 (var -> ID .)
    LCOLCHETE       reduce using rule 149 (var -> ID .)
    ID              reduce using rule 149 (var -> ID .)
    DOIS_PONTOS_DUPLO reduce using rule 149 (var -> ID .)
    DOIS_PONTOS     reduce using rule 149 (var -> ID .)
    PLUS            reduce using rule 149 (var -> ID .)
    MINUS           reduce using rule 149 (var -> ID .)
    MULT            reduce using rule 149 (var -> ID .)
    BARRA           reduce using rule 149 (var -> ID .)
    CIRCUNFLEXO     reduce using rule 149 (var -> ID .)
    MAIOR_IGUAL     reduce using rule 149 (var -> ID .)
    MENOR_IGUAL     reduce using rule 149 (var -> ID .)
    MAIOR           reduce using rule 149 (var -> ID .)
    MENOR           reduce using rule 149 (var -> ID .)
    IGUAL           reduce using rule 149 (var -> ID .)
    DIFERENTE       reduce using rule 149 (var -> ID .)
    OR              reduce using rule 149 (var -> ID .)
    NOT             reduce using rule 149 (var -> ID .)
    AND             reduce using rule 149 (var -> ID .)
    EQUAL           reduce using rule 149 (var -> ID .)
    VARSYM          reduce using rule 149 (var -> ID .)
    CRASE           reduce using rule 149 (var -> ID .)
    PIPE            reduce using rule 149 (var -> ID .)
    RPAREN          reduce using rule 149 (var -> ID .)
    RCOLCHETE       reduce using rule 149 (var -> ID .)
    SETAS           reduce using rule 149 (var -> ID .)
    RCHAVE          reduce using rule 149 (var -> ID .)
    DIV             reduce using rule 149 (var -> ID .)
    WHERE           reduce using rule 149 (var -> ID .)
    THEN            reduce using rule 149 (var -> ID .)
    OF              reduce using rule 149 (var -> ID .)
    ELSE            reduce using rule 149 (var -> ID .)
    PONTO_VIRGULA   reduce using rule 149 (var -> ID .)


state 14

    (72) lpat -> MINUS . lpattype
    (74) lpattype -> . INT
    (75) lpattype -> . FLOAT

    INT             shift and go to state 69
    FLOAT           shift and go to state 70

    lpattype                       shift and go to state 68

state 15

    (71) lpat -> apat .

    DOIS_PONTOS     reduce using rule 71 (lpat -> apat .)
    PLUS            reduce using rule 71 (lpat -> apat .)
    MINUS           reduce using rule 71 (lpat -> apat .)
    MULT            reduce using rule 71 (lpat -> apat .)
    BARRA           reduce using rule 71 (lpat -> apat .)
    CIRCUNFLEXO     reduce using rule 71 (lpat -> apat .)
    MAIOR_IGUAL     reduce using rule 71 (lpat -> apat .)
    MENOR_IGUAL     reduce using rule 71 (lpat -> apat .)
    MAIOR           reduce using rule 71 (lpat -> apat .)
    MENOR           reduce using rule 71 (lpat -> apat .)
    IGUAL           reduce using rule 71 (lpat -> apat .)
    DIFERENTE       reduce using rule 71 (lpat -> apat .)
    OR              reduce using rule 71 (lpat -> apat .)
    NOT             reduce using rule 71 (lpat -> apat .)
    AND             reduce using rule 71 (lpat -> apat .)
    EQUAL           reduce using rule 71 (lpat -> apat .)
    VARSYM          reduce using rule 71 (lpat -> apat .)
    CRASE           reduce using rule 71 (lpat -> apat .)
    PIPE            reduce using rule 71 (lpat -> apat .)
    RPAREN          reduce using rule 71 (lpat -> apat .)
    VIRGULA         reduce using rule 71 (lpat -> apat .)
    RCOLCHETE       reduce using rule 71 (lpat -> apat .)
    SETAS           reduce using rule 71 (lpat -> apat .)
    RCHAVE          reduce using rule 71 (lpat -> apat .)


state 16

    (73) lpat -> gcon . apatlist
    (42) apat -> gcon .
    (31) apatlist -> . apat apatlist
    (32) apatlist -> . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    DOIS_PONTOS     reduce using rule 42 (apat -> gcon .)
    PLUS            reduce using rule 42 (apat -> gcon .)
    MINUS           reduce using rule 42 (apat -> gcon .)
    MULT            reduce using rule 42 (apat -> gcon .)
    BARRA           reduce using rule 42 (apat -> gcon .)
    CIRCUNFLEXO     reduce using rule 42 (apat -> gcon .)
    MAIOR_IGUAL     reduce using rule 42 (apat -> gcon .)
    MENOR_IGUAL     reduce using rule 42 (apat -> gcon .)
    MAIOR           reduce using rule 42 (apat -> gcon .)
    MENOR           reduce using rule 42 (apat -> gcon .)
    IGUAL           reduce using rule 42 (apat -> gcon .)
    DIFERENTE       reduce using rule 42 (apat -> gcon .)
    OR              reduce using rule 42 (apat -> gcon .)
    NOT             reduce using rule 42 (apat -> gcon .)
    AND             reduce using rule 42 (apat -> gcon .)
    EQUAL           reduce using rule 42 (apat -> gcon .)
    VARSYM          reduce using rule 42 (apat -> gcon .)
    CRASE           reduce using rule 42 (apat -> gcon .)
    PIPE            reduce using rule 42 (apat -> gcon .)
    RPAREN          reduce using rule 42 (apat -> gcon .)
    VIRGULA         reduce using rule 42 (apat -> gcon .)
    RCOLCHETE       reduce using rule 42 (apat -> gcon .)
    SETAS           reduce using rule 42 (apat -> gcon .)
    RCHAVE          reduce using rule 42 (apat -> gcon .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    gcon                           shift and go to state 56
    apatlist                       shift and go to state 71
    apat                           shift and go to state 55
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 17

    (35) apat -> qcon . LCHAVE fpatlist RCHAVE
    (146) gcon -> qcon .

    LCHAVE          shift and go to state 72
    INT             reduce using rule 146 (gcon -> qcon .)
    FLOAT           reduce using rule 146 (gcon -> qcon .)
    CHAR            reduce using rule 146 (gcon -> qcon .)
    STRING          reduce using rule 146 (gcon -> qcon .)
    TRUE            reduce using rule 146 (gcon -> qcon .)
    FALSE           reduce using rule 146 (gcon -> qcon .)
    UNDERLINE       reduce using rule 146 (gcon -> qcon .)
    LPAREN          reduce using rule 146 (gcon -> qcon .)
    LCOLCHETE       reduce using rule 146 (gcon -> qcon .)
    ID              reduce using rule 146 (gcon -> qcon .)
    DOIS_PONTOS     reduce using rule 146 (gcon -> qcon .)
    PLUS            reduce using rule 146 (gcon -> qcon .)
    MINUS           reduce using rule 146 (gcon -> qcon .)
    MULT            reduce using rule 146 (gcon -> qcon .)
    BARRA           reduce using rule 146 (gcon -> qcon .)
    CIRCUNFLEXO     reduce using rule 146 (gcon -> qcon .)
    MAIOR_IGUAL     reduce using rule 146 (gcon -> qcon .)
    MENOR_IGUAL     reduce using rule 146 (gcon -> qcon .)
    MAIOR           reduce using rule 146 (gcon -> qcon .)
    MENOR           reduce using rule 146 (gcon -> qcon .)
    IGUAL           reduce using rule 146 (gcon -> qcon .)
    DIFERENTE       reduce using rule 146 (gcon -> qcon .)
    OR              reduce using rule 146 (gcon -> qcon .)
    NOT             reduce using rule 146 (gcon -> qcon .)
    AND             reduce using rule 146 (gcon -> qcon .)
    EQUAL           reduce using rule 146 (gcon -> qcon .)
    VARSYM          reduce using rule 146 (gcon -> qcon .)
    CRASE           reduce using rule 146 (gcon -> qcon .)
    PIPE            reduce using rule 146 (gcon -> qcon .)
    RPAREN          reduce using rule 146 (gcon -> qcon .)
    VIRGULA         reduce using rule 146 (gcon -> qcon .)
    RCOLCHETE       reduce using rule 146 (gcon -> qcon .)
    SETAS           reduce using rule 146 (gcon -> qcon .)
    RCHAVE          reduce using rule 146 (gcon -> qcon .)


state 18

    (36) apat -> INT .

    DOIS_PONTOS     reduce using rule 36 (apat -> INT .)
    PLUS            reduce using rule 36 (apat -> INT .)
    MINUS           reduce using rule 36 (apat -> INT .)
    MULT            reduce using rule 36 (apat -> INT .)
    BARRA           reduce using rule 36 (apat -> INT .)
    CIRCUNFLEXO     reduce using rule 36 (apat -> INT .)
    MAIOR_IGUAL     reduce using rule 36 (apat -> INT .)
    MENOR_IGUAL     reduce using rule 36 (apat -> INT .)
    MAIOR           reduce using rule 36 (apat -> INT .)
    MENOR           reduce using rule 36 (apat -> INT .)
    IGUAL           reduce using rule 36 (apat -> INT .)
    DIFERENTE       reduce using rule 36 (apat -> INT .)
    OR              reduce using rule 36 (apat -> INT .)
    NOT             reduce using rule 36 (apat -> INT .)
    AND             reduce using rule 36 (apat -> INT .)
    EQUAL           reduce using rule 36 (apat -> INT .)
    VARSYM          reduce using rule 36 (apat -> INT .)
    CRASE           reduce using rule 36 (apat -> INT .)
    PIPE            reduce using rule 36 (apat -> INT .)
    INT             reduce using rule 36 (apat -> INT .)
    FLOAT           reduce using rule 36 (apat -> INT .)
    CHAR            reduce using rule 36 (apat -> INT .)
    STRING          reduce using rule 36 (apat -> INT .)
    TRUE            reduce using rule 36 (apat -> INT .)
    FALSE           reduce using rule 36 (apat -> INT .)
    UNDERLINE       reduce using rule 36 (apat -> INT .)
    LPAREN          reduce using rule 36 (apat -> INT .)
    LCOLCHETE       reduce using rule 36 (apat -> INT .)
    ID              reduce using rule 36 (apat -> INT .)
    RPAREN          reduce using rule 36 (apat -> INT .)
    VIRGULA         reduce using rule 36 (apat -> INT .)
    RCOLCHETE       reduce using rule 36 (apat -> INT .)
    SETAS           reduce using rule 36 (apat -> INT .)
    RCHAVE          reduce using rule 36 (apat -> INT .)


state 19

    (37) apat -> FLOAT .

    DOIS_PONTOS     reduce using rule 37 (apat -> FLOAT .)
    PLUS            reduce using rule 37 (apat -> FLOAT .)
    MINUS           reduce using rule 37 (apat -> FLOAT .)
    MULT            reduce using rule 37 (apat -> FLOAT .)
    BARRA           reduce using rule 37 (apat -> FLOAT .)
    CIRCUNFLEXO     reduce using rule 37 (apat -> FLOAT .)
    MAIOR_IGUAL     reduce using rule 37 (apat -> FLOAT .)
    MENOR_IGUAL     reduce using rule 37 (apat -> FLOAT .)
    MAIOR           reduce using rule 37 (apat -> FLOAT .)
    MENOR           reduce using rule 37 (apat -> FLOAT .)
    IGUAL           reduce using rule 37 (apat -> FLOAT .)
    DIFERENTE       reduce using rule 37 (apat -> FLOAT .)
    OR              reduce using rule 37 (apat -> FLOAT .)
    NOT             reduce using rule 37 (apat -> FLOAT .)
    AND             reduce using rule 37 (apat -> FLOAT .)
    EQUAL           reduce using rule 37 (apat -> FLOAT .)
    VARSYM          reduce using rule 37 (apat -> FLOAT .)
    CRASE           reduce using rule 37 (apat -> FLOAT .)
    PIPE            reduce using rule 37 (apat -> FLOAT .)
    INT             reduce using rule 37 (apat -> FLOAT .)
    FLOAT           reduce using rule 37 (apat -> FLOAT .)
    CHAR            reduce using rule 37 (apat -> FLOAT .)
    STRING          reduce using rule 37 (apat -> FLOAT .)
    TRUE            reduce using rule 37 (apat -> FLOAT .)
    FALSE           reduce using rule 37 (apat -> FLOAT .)
    UNDERLINE       reduce using rule 37 (apat -> FLOAT .)
    LPAREN          reduce using rule 37 (apat -> FLOAT .)
    LCOLCHETE       reduce using rule 37 (apat -> FLOAT .)
    ID              reduce using rule 37 (apat -> FLOAT .)
    RPAREN          reduce using rule 37 (apat -> FLOAT .)
    VIRGULA         reduce using rule 37 (apat -> FLOAT .)
    RCOLCHETE       reduce using rule 37 (apat -> FLOAT .)
    SETAS           reduce using rule 37 (apat -> FLOAT .)
    RCHAVE          reduce using rule 37 (apat -> FLOAT .)


state 20

    (38) apat -> CHAR .

    DOIS_PONTOS     reduce using rule 38 (apat -> CHAR .)
    PLUS            reduce using rule 38 (apat -> CHAR .)
    MINUS           reduce using rule 38 (apat -> CHAR .)
    MULT            reduce using rule 38 (apat -> CHAR .)
    BARRA           reduce using rule 38 (apat -> CHAR .)
    CIRCUNFLEXO     reduce using rule 38 (apat -> CHAR .)
    MAIOR_IGUAL     reduce using rule 38 (apat -> CHAR .)
    MENOR_IGUAL     reduce using rule 38 (apat -> CHAR .)
    MAIOR           reduce using rule 38 (apat -> CHAR .)
    MENOR           reduce using rule 38 (apat -> CHAR .)
    IGUAL           reduce using rule 38 (apat -> CHAR .)
    DIFERENTE       reduce using rule 38 (apat -> CHAR .)
    OR              reduce using rule 38 (apat -> CHAR .)
    NOT             reduce using rule 38 (apat -> CHAR .)
    AND             reduce using rule 38 (apat -> CHAR .)
    EQUAL           reduce using rule 38 (apat -> CHAR .)
    VARSYM          reduce using rule 38 (apat -> CHAR .)
    CRASE           reduce using rule 38 (apat -> CHAR .)
    PIPE            reduce using rule 38 (apat -> CHAR .)
    INT             reduce using rule 38 (apat -> CHAR .)
    FLOAT           reduce using rule 38 (apat -> CHAR .)
    CHAR            reduce using rule 38 (apat -> CHAR .)
    STRING          reduce using rule 38 (apat -> CHAR .)
    TRUE            reduce using rule 38 (apat -> CHAR .)
    FALSE           reduce using rule 38 (apat -> CHAR .)
    UNDERLINE       reduce using rule 38 (apat -> CHAR .)
    LPAREN          reduce using rule 38 (apat -> CHAR .)
    LCOLCHETE       reduce using rule 38 (apat -> CHAR .)
    ID              reduce using rule 38 (apat -> CHAR .)
    RPAREN          reduce using rule 38 (apat -> CHAR .)
    VIRGULA         reduce using rule 38 (apat -> CHAR .)
    RCOLCHETE       reduce using rule 38 (apat -> CHAR .)
    SETAS           reduce using rule 38 (apat -> CHAR .)
    RCHAVE          reduce using rule 38 (apat -> CHAR .)


state 21

    (39) apat -> STRING .

    DOIS_PONTOS     reduce using rule 39 (apat -> STRING .)
    PLUS            reduce using rule 39 (apat -> STRING .)
    MINUS           reduce using rule 39 (apat -> STRING .)
    MULT            reduce using rule 39 (apat -> STRING .)
    BARRA           reduce using rule 39 (apat -> STRING .)
    CIRCUNFLEXO     reduce using rule 39 (apat -> STRING .)
    MAIOR_IGUAL     reduce using rule 39 (apat -> STRING .)
    MENOR_IGUAL     reduce using rule 39 (apat -> STRING .)
    MAIOR           reduce using rule 39 (apat -> STRING .)
    MENOR           reduce using rule 39 (apat -> STRING .)
    IGUAL           reduce using rule 39 (apat -> STRING .)
    DIFERENTE       reduce using rule 39 (apat -> STRING .)
    OR              reduce using rule 39 (apat -> STRING .)
    NOT             reduce using rule 39 (apat -> STRING .)
    AND             reduce using rule 39 (apat -> STRING .)
    EQUAL           reduce using rule 39 (apat -> STRING .)
    VARSYM          reduce using rule 39 (apat -> STRING .)
    CRASE           reduce using rule 39 (apat -> STRING .)
    PIPE            reduce using rule 39 (apat -> STRING .)
    INT             reduce using rule 39 (apat -> STRING .)
    FLOAT           reduce using rule 39 (apat -> STRING .)
    CHAR            reduce using rule 39 (apat -> STRING .)
    STRING          reduce using rule 39 (apat -> STRING .)
    TRUE            reduce using rule 39 (apat -> STRING .)
    FALSE           reduce using rule 39 (apat -> STRING .)
    UNDERLINE       reduce using rule 39 (apat -> STRING .)
    LPAREN          reduce using rule 39 (apat -> STRING .)
    LCOLCHETE       reduce using rule 39 (apat -> STRING .)
    ID              reduce using rule 39 (apat -> STRING .)
    RPAREN          reduce using rule 39 (apat -> STRING .)
    VIRGULA         reduce using rule 39 (apat -> STRING .)
    RCOLCHETE       reduce using rule 39 (apat -> STRING .)
    SETAS           reduce using rule 39 (apat -> STRING .)
    RCHAVE          reduce using rule 39 (apat -> STRING .)


state 22

    (40) apat -> TRUE .

    DOIS_PONTOS     reduce using rule 40 (apat -> TRUE .)
    PLUS            reduce using rule 40 (apat -> TRUE .)
    MINUS           reduce using rule 40 (apat -> TRUE .)
    MULT            reduce using rule 40 (apat -> TRUE .)
    BARRA           reduce using rule 40 (apat -> TRUE .)
    CIRCUNFLEXO     reduce using rule 40 (apat -> TRUE .)
    MAIOR_IGUAL     reduce using rule 40 (apat -> TRUE .)
    MENOR_IGUAL     reduce using rule 40 (apat -> TRUE .)
    MAIOR           reduce using rule 40 (apat -> TRUE .)
    MENOR           reduce using rule 40 (apat -> TRUE .)
    IGUAL           reduce using rule 40 (apat -> TRUE .)
    DIFERENTE       reduce using rule 40 (apat -> TRUE .)
    OR              reduce using rule 40 (apat -> TRUE .)
    NOT             reduce using rule 40 (apat -> TRUE .)
    AND             reduce using rule 40 (apat -> TRUE .)
    EQUAL           reduce using rule 40 (apat -> TRUE .)
    VARSYM          reduce using rule 40 (apat -> TRUE .)
    CRASE           reduce using rule 40 (apat -> TRUE .)
    PIPE            reduce using rule 40 (apat -> TRUE .)
    INT             reduce using rule 40 (apat -> TRUE .)
    FLOAT           reduce using rule 40 (apat -> TRUE .)
    CHAR            reduce using rule 40 (apat -> TRUE .)
    STRING          reduce using rule 40 (apat -> TRUE .)
    TRUE            reduce using rule 40 (apat -> TRUE .)
    FALSE           reduce using rule 40 (apat -> TRUE .)
    UNDERLINE       reduce using rule 40 (apat -> TRUE .)
    LPAREN          reduce using rule 40 (apat -> TRUE .)
    LCOLCHETE       reduce using rule 40 (apat -> TRUE .)
    ID              reduce using rule 40 (apat -> TRUE .)
    RPAREN          reduce using rule 40 (apat -> TRUE .)
    VIRGULA         reduce using rule 40 (apat -> TRUE .)
    RCOLCHETE       reduce using rule 40 (apat -> TRUE .)
    SETAS           reduce using rule 40 (apat -> TRUE .)
    RCHAVE          reduce using rule 40 (apat -> TRUE .)


state 23

    (41) apat -> FALSE .

    DOIS_PONTOS     reduce using rule 41 (apat -> FALSE .)
    PLUS            reduce using rule 41 (apat -> FALSE .)
    MINUS           reduce using rule 41 (apat -> FALSE .)
    MULT            reduce using rule 41 (apat -> FALSE .)
    BARRA           reduce using rule 41 (apat -> FALSE .)
    CIRCUNFLEXO     reduce using rule 41 (apat -> FALSE .)
    MAIOR_IGUAL     reduce using rule 41 (apat -> FALSE .)
    MENOR_IGUAL     reduce using rule 41 (apat -> FALSE .)
    MAIOR           reduce using rule 41 (apat -> FALSE .)
    MENOR           reduce using rule 41 (apat -> FALSE .)
    IGUAL           reduce using rule 41 (apat -> FALSE .)
    DIFERENTE       reduce using rule 41 (apat -> FALSE .)
    OR              reduce using rule 41 (apat -> FALSE .)
    NOT             reduce using rule 41 (apat -> FALSE .)
    AND             reduce using rule 41 (apat -> FALSE .)
    EQUAL           reduce using rule 41 (apat -> FALSE .)
    VARSYM          reduce using rule 41 (apat -> FALSE .)
    CRASE           reduce using rule 41 (apat -> FALSE .)
    PIPE            reduce using rule 41 (apat -> FALSE .)
    INT             reduce using rule 41 (apat -> FALSE .)
    FLOAT           reduce using rule 41 (apat -> FALSE .)
    CHAR            reduce using rule 41 (apat -> FALSE .)
    STRING          reduce using rule 41 (apat -> FALSE .)
    TRUE            reduce using rule 41 (apat -> FALSE .)
    FALSE           reduce using rule 41 (apat -> FALSE .)
    UNDERLINE       reduce using rule 41 (apat -> FALSE .)
    LPAREN          reduce using rule 41 (apat -> FALSE .)
    LCOLCHETE       reduce using rule 41 (apat -> FALSE .)
    ID              reduce using rule 41 (apat -> FALSE .)
    RPAREN          reduce using rule 41 (apat -> FALSE .)
    VIRGULA         reduce using rule 41 (apat -> FALSE .)
    RCOLCHETE       reduce using rule 41 (apat -> FALSE .)
    SETAS           reduce using rule 41 (apat -> FALSE .)
    RCHAVE          reduce using rule 41 (apat -> FALSE .)


state 24

    (43) apat -> UNDERLINE .

    DOIS_PONTOS     reduce using rule 43 (apat -> UNDERLINE .)
    PLUS            reduce using rule 43 (apat -> UNDERLINE .)
    MINUS           reduce using rule 43 (apat -> UNDERLINE .)
    MULT            reduce using rule 43 (apat -> UNDERLINE .)
    BARRA           reduce using rule 43 (apat -> UNDERLINE .)
    CIRCUNFLEXO     reduce using rule 43 (apat -> UNDERLINE .)
    MAIOR_IGUAL     reduce using rule 43 (apat -> UNDERLINE .)
    MENOR_IGUAL     reduce using rule 43 (apat -> UNDERLINE .)
    MAIOR           reduce using rule 43 (apat -> UNDERLINE .)
    MENOR           reduce using rule 43 (apat -> UNDERLINE .)
    IGUAL           reduce using rule 43 (apat -> UNDERLINE .)
    DIFERENTE       reduce using rule 43 (apat -> UNDERLINE .)
    OR              reduce using rule 43 (apat -> UNDERLINE .)
    NOT             reduce using rule 43 (apat -> UNDERLINE .)
    AND             reduce using rule 43 (apat -> UNDERLINE .)
    EQUAL           reduce using rule 43 (apat -> UNDERLINE .)
    VARSYM          reduce using rule 43 (apat -> UNDERLINE .)
    CRASE           reduce using rule 43 (apat -> UNDERLINE .)
    PIPE            reduce using rule 43 (apat -> UNDERLINE .)
    INT             reduce using rule 43 (apat -> UNDERLINE .)
    FLOAT           reduce using rule 43 (apat -> UNDERLINE .)
    CHAR            reduce using rule 43 (apat -> UNDERLINE .)
    STRING          reduce using rule 43 (apat -> UNDERLINE .)
    TRUE            reduce using rule 43 (apat -> UNDERLINE .)
    FALSE           reduce using rule 43 (apat -> UNDERLINE .)
    UNDERLINE       reduce using rule 43 (apat -> UNDERLINE .)
    LPAREN          reduce using rule 43 (apat -> UNDERLINE .)
    LCOLCHETE       reduce using rule 43 (apat -> UNDERLINE .)
    ID              reduce using rule 43 (apat -> UNDERLINE .)
    RPAREN          reduce using rule 43 (apat -> UNDERLINE .)
    VIRGULA         reduce using rule 43 (apat -> UNDERLINE .)
    RCOLCHETE       reduce using rule 43 (apat -> UNDERLINE .)
    SETAS           reduce using rule 43 (apat -> UNDERLINE .)
    RCHAVE          reduce using rule 43 (apat -> UNDERLINE .)


state 25

    (46) apat -> LCOLCHETE . patlist RCOLCHETE
    (144) gcon -> LCOLCHETE . RCOLCHETE
    (50) patlist -> . pat VIRGULA patlist
    (51) patlist -> . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    RCOLCHETE       shift and go to state 74
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    patlist                        shift and go to state 73
    pat                            shift and go to state 75
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 26

    (2) topdecls -> topdecl PONTO_VIRGULA . topdecls
    (2) topdecls -> . topdecl PONTO_VIRGULA topdecls
    (3) topdecls -> . topdecl
    (4) topdecl -> . decl
    (8) decl -> . gendecl
    (9) decl -> . funlhs rhs
    (10) decl -> . pat rhs
    (11) gendecl -> . vars DOIS_PONTOS_DUPLO type
    (28) funlhs -> . var apatlist
    (29) funlhs -> . patop
    (30) funlhs -> . LPAREN funlhs RPAREN apatlist
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (12) vars -> . var
    (13) vars -> . var VIRGULA vars
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (54) patop -> . pat varop pat
    (55) patop -> . pat PLUS pat
    (56) patop -> . pat MINUS pat
    (57) patop -> . pat MULT pat
    (58) patop -> . pat BARRA pat
    (59) patop -> . pat CIRCUNFLEXO pat
    (60) patop -> . pat MAIOR_IGUAL pat
    (61) patop -> . pat MENOR_IGUAL pat
    (62) patop -> . pat MAIOR pat
    (63) patop -> . pat MENOR pat
    (64) patop -> . pat IGUAL pat
    (65) patop -> . pat DIFERENTE pat
    (66) patop -> . pat OR pat
    (67) patop -> . pat NOT pat
    (68) patop -> . pat AND pat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    LPAREN          shift and go to state 11
    ID              shift and go to state 13
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LCOLCHETE       shift and go to state 25

    topdecl                        shift and go to state 3
    topdecls                       shift and go to state 77
    decl                           shift and go to state 4
    gendecl                        shift and go to state 5
    funlhs                         shift and go to state 6
    pat                            shift and go to state 7
    vars                           shift and go to state 8
    var                            shift and go to state 9
    patop                          shift and go to state 10
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    qcon                           shift and go to state 17

state 27

    (9) decl -> funlhs rhs .

    PONTO_VIRGULA   reduce using rule 9 (decl -> funlhs rhs .)
    $end            reduce using rule 9 (decl -> funlhs rhs .)
    RCHAVE          reduce using rule 9 (decl -> funlhs rhs .)


state 28

    (76) rhs -> EQUAL . exp WHERE decls
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 78
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 29

    (77) rhs -> gdrhs . WHERE decls

    WHERE           shift and go to state 98


state 30

    (78) gdrhs -> guards . EQUAL exp
    (79) gdrhs -> guards . EQUAL exp gdrhs

    EQUAL           shift and go to state 99


state 31

    (80) guards -> PIPE . guardslist
    (81) guardslist -> . guard VIRGULA guardslist
    (82) guardslist -> . guard
    (83) guard -> . pat SETAS infixexp
    (84) guard -> . LET decls
    (85) guard -> . infixexp
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN

    LET             shift and go to state 104
    MINUS           shift and go to state 105
    BARRA_INVERTIDA shift and go to state 83
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    CHAR            shift and go to state 109
    STRING          shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 113
    LCOLCHETE       shift and go to state 114
    ID              shift and go to state 13

    guardslist                     shift and go to state 100
    guard                          shift and go to state 101
    pat                            shift and go to state 102
    infixexp                       shift and go to state 103
    lpat                           shift and go to state 12
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    fexp                           shift and go to state 87
    var                            shift and go to state 106
    qcon                           shift and go to state 17
    aexp                           shift and go to state 88

state 32

    (10) decl -> pat rhs .

    PONTO_VIRGULA   reduce using rule 10 (decl -> pat rhs .)
    $end            reduce using rule 10 (decl -> pat rhs .)
    RCHAVE          reduce using rule 10 (decl -> pat rhs .)


state 33

    (54) patop -> pat varop . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 115
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 34

    (55) patop -> pat PLUS . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 116
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 35

    (56) patop -> pat MINUS . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 117
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 36

    (57) patop -> pat MULT . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 118
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 37

    (58) patop -> pat BARRA . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 119
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 38

    (59) patop -> pat CIRCUNFLEXO . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 120
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 39

    (60) patop -> pat MAIOR_IGUAL . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 121
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 40

    (61) patop -> pat MENOR_IGUAL . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 122
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 41

    (62) patop -> pat MAIOR . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 123
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 42

    (63) patop -> pat MENOR . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 124
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 43

    (64) patop -> pat IGUAL . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 125
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 44

    (65) patop -> pat DIFERENTE . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 126
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 45

    (66) patop -> pat OR . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 127
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 46

    (67) patop -> pat NOT . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 128
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 47

    (68) patop -> pat AND . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 129
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 48

    (152) varop -> VARSYM .

    MINUS           reduce using rule 152 (varop -> VARSYM .)
    INT             reduce using rule 152 (varop -> VARSYM .)
    FLOAT           reduce using rule 152 (varop -> VARSYM .)
    CHAR            reduce using rule 152 (varop -> VARSYM .)
    STRING          reduce using rule 152 (varop -> VARSYM .)
    TRUE            reduce using rule 152 (varop -> VARSYM .)
    FALSE           reduce using rule 152 (varop -> VARSYM .)
    UNDERLINE       reduce using rule 152 (varop -> VARSYM .)
    LPAREN          reduce using rule 152 (varop -> VARSYM .)
    LCOLCHETE       reduce using rule 152 (varop -> VARSYM .)
    ID              reduce using rule 152 (varop -> VARSYM .)
    BARRA_INVERTIDA reduce using rule 152 (varop -> VARSYM .)
    LET             reduce using rule 152 (varop -> VARSYM .)
    IF              reduce using rule 152 (varop -> VARSYM .)
    CASE            reduce using rule 152 (varop -> VARSYM .)


state 49

    (153) varop -> CRASE . ID CRASE

    ID              shift and go to state 130


state 50

    (11) gendecl -> vars DOIS_PONTOS_DUPLO . type
    (14) type -> . btype
    (15) type -> . btype SETAS type
    (16) btype -> . btype atype
    (17) btype -> . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

    type                           shift and go to state 131
    btype                          shift and go to state 132
    atype                          shift and go to state 133

state 51

    (33) apat -> var .
    (34) apat -> var . ARROBA apat

    INT             reduce using rule 33 (apat -> var .)
    FLOAT           reduce using rule 33 (apat -> var .)
    CHAR            reduce using rule 33 (apat -> var .)
    STRING          reduce using rule 33 (apat -> var .)
    TRUE            reduce using rule 33 (apat -> var .)
    FALSE           reduce using rule 33 (apat -> var .)
    UNDERLINE       reduce using rule 33 (apat -> var .)
    LPAREN          reduce using rule 33 (apat -> var .)
    LCOLCHETE       reduce using rule 33 (apat -> var .)
    ID              reduce using rule 33 (apat -> var .)
    EQUAL           reduce using rule 33 (apat -> var .)
    PIPE            reduce using rule 33 (apat -> var .)
    DOIS_PONTOS     reduce using rule 33 (apat -> var .)
    PLUS            reduce using rule 33 (apat -> var .)
    MINUS           reduce using rule 33 (apat -> var .)
    MULT            reduce using rule 33 (apat -> var .)
    BARRA           reduce using rule 33 (apat -> var .)
    CIRCUNFLEXO     reduce using rule 33 (apat -> var .)
    MAIOR_IGUAL     reduce using rule 33 (apat -> var .)
    MENOR_IGUAL     reduce using rule 33 (apat -> var .)
    MAIOR           reduce using rule 33 (apat -> var .)
    MENOR           reduce using rule 33 (apat -> var .)
    IGUAL           reduce using rule 33 (apat -> var .)
    DIFERENTE       reduce using rule 33 (apat -> var .)
    OR              reduce using rule 33 (apat -> var .)
    NOT             reduce using rule 33 (apat -> var .)
    AND             reduce using rule 33 (apat -> var .)
    VARSYM          reduce using rule 33 (apat -> var .)
    CRASE           reduce using rule 33 (apat -> var .)
    RPAREN          reduce using rule 33 (apat -> var .)
    VIRGULA         reduce using rule 33 (apat -> var .)
    RCOLCHETE       reduce using rule 33 (apat -> var .)
    SETAS           reduce using rule 33 (apat -> var .)
    RCHAVE          reduce using rule 33 (apat -> var .)
    ARROBA          shift and go to state 54


state 52

    (28) funlhs -> var apatlist .

    EQUAL           reduce using rule 28 (funlhs -> var apatlist .)
    PIPE            reduce using rule 28 (funlhs -> var apatlist .)
    RPAREN          reduce using rule 28 (funlhs -> var apatlist .)


state 53

    (13) vars -> var VIRGULA . vars
    (12) vars -> . var
    (13) vars -> . var VIRGULA vars
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 143

    var                            shift and go to state 141
    vars                           shift and go to state 142

state 54

    (34) apat -> var ARROBA . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    var                            shift and go to state 51
    apat                           shift and go to state 144
    qcon                           shift and go to state 17
    gcon                           shift and go to state 56

state 55

    (31) apatlist -> apat . apatlist
    (32) apatlist -> apat .
    (31) apatlist -> . apat apatlist
    (32) apatlist -> . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    EQUAL           reduce using rule 32 (apatlist -> apat .)
    PIPE            reduce using rule 32 (apatlist -> apat .)
    DOIS_PONTOS     reduce using rule 32 (apatlist -> apat .)
    PLUS            reduce using rule 32 (apatlist -> apat .)
    MINUS           reduce using rule 32 (apatlist -> apat .)
    MULT            reduce using rule 32 (apatlist -> apat .)
    BARRA           reduce using rule 32 (apatlist -> apat .)
    CIRCUNFLEXO     reduce using rule 32 (apatlist -> apat .)
    MAIOR_IGUAL     reduce using rule 32 (apatlist -> apat .)
    MENOR_IGUAL     reduce using rule 32 (apatlist -> apat .)
    MAIOR           reduce using rule 32 (apatlist -> apat .)
    MENOR           reduce using rule 32 (apatlist -> apat .)
    IGUAL           reduce using rule 32 (apatlist -> apat .)
    DIFERENTE       reduce using rule 32 (apatlist -> apat .)
    OR              reduce using rule 32 (apatlist -> apat .)
    NOT             reduce using rule 32 (apatlist -> apat .)
    AND             reduce using rule 32 (apatlist -> apat .)
    VARSYM          reduce using rule 32 (apatlist -> apat .)
    CRASE           reduce using rule 32 (apatlist -> apat .)
    RPAREN          reduce using rule 32 (apatlist -> apat .)
    VIRGULA         reduce using rule 32 (apatlist -> apat .)
    RCOLCHETE       reduce using rule 32 (apatlist -> apat .)
    SETAS           reduce using rule 32 (apatlist -> apat .)
    RCHAVE          reduce using rule 32 (apatlist -> apat .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    apat                           shift and go to state 55
    apatlist                       shift and go to state 145
    var                            shift and go to state 51
    qcon                           shift and go to state 17
    gcon                           shift and go to state 56

state 56

    (42) apat -> gcon .

    INT             reduce using rule 42 (apat -> gcon .)
    FLOAT           reduce using rule 42 (apat -> gcon .)
    CHAR            reduce using rule 42 (apat -> gcon .)
    STRING          reduce using rule 42 (apat -> gcon .)
    TRUE            reduce using rule 42 (apat -> gcon .)
    FALSE           reduce using rule 42 (apat -> gcon .)
    UNDERLINE       reduce using rule 42 (apat -> gcon .)
    LPAREN          reduce using rule 42 (apat -> gcon .)
    LCOLCHETE       reduce using rule 42 (apat -> gcon .)
    ID              reduce using rule 42 (apat -> gcon .)
    EQUAL           reduce using rule 42 (apat -> gcon .)
    PIPE            reduce using rule 42 (apat -> gcon .)
    DOIS_PONTOS     reduce using rule 42 (apat -> gcon .)
    PLUS            reduce using rule 42 (apat -> gcon .)
    MINUS           reduce using rule 42 (apat -> gcon .)
    MULT            reduce using rule 42 (apat -> gcon .)
    BARRA           reduce using rule 42 (apat -> gcon .)
    CIRCUNFLEXO     reduce using rule 42 (apat -> gcon .)
    MAIOR_IGUAL     reduce using rule 42 (apat -> gcon .)
    MENOR_IGUAL     reduce using rule 42 (apat -> gcon .)
    MAIOR           reduce using rule 42 (apat -> gcon .)
    MENOR           reduce using rule 42 (apat -> gcon .)
    IGUAL           reduce using rule 42 (apat -> gcon .)
    DIFERENTE       reduce using rule 42 (apat -> gcon .)
    OR              reduce using rule 42 (apat -> gcon .)
    NOT             reduce using rule 42 (apat -> gcon .)
    AND             reduce using rule 42 (apat -> gcon .)
    VARSYM          reduce using rule 42 (apat -> gcon .)
    CRASE           reduce using rule 42 (apat -> gcon .)
    RPAREN          reduce using rule 42 (apat -> gcon .)
    VIRGULA         reduce using rule 42 (apat -> gcon .)
    RCOLCHETE       reduce using rule 42 (apat -> gcon .)
    SETAS           reduce using rule 42 (apat -> gcon .)
    RCHAVE          reduce using rule 42 (apat -> gcon .)


state 57

    (44) apat -> LPAREN . pat RPAREN
    (45) apat -> LPAREN . pattuple RPAREN
    (150) var -> LPAREN . VARSYM RPAREN
    (151) qcon -> LPAREN . DOIS_PONTOS RPAREN
    (143) gcon -> LPAREN . RPAREN
    (145) gcon -> LPAREN . virgulalist RPAREN
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (52) pattuple -> . pat VIRGULA pattuple
    (53) pattuple -> . pat VIRGULA pat
    (147) virgulalist -> . VIRGULA virgulalist
    (148) virgulalist -> . VIRGULA
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    VARSYM          shift and go to state 60
    DOIS_PONTOS     shift and go to state 64
    RPAREN          shift and go to state 59
    VIRGULA         shift and go to state 66
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 146
    pattuple                       shift and go to state 62
    virgulalist                    shift and go to state 63
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 58

    (30) funlhs -> LPAREN funlhs . RPAREN apatlist

    RPAREN          shift and go to state 147


state 59

    (143) gcon -> LPAREN RPAREN .

    INT             reduce using rule 143 (gcon -> LPAREN RPAREN .)
    FLOAT           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    CHAR            reduce using rule 143 (gcon -> LPAREN RPAREN .)
    STRING          reduce using rule 143 (gcon -> LPAREN RPAREN .)
    TRUE            reduce using rule 143 (gcon -> LPAREN RPAREN .)
    FALSE           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    UNDERLINE       reduce using rule 143 (gcon -> LPAREN RPAREN .)
    LPAREN          reduce using rule 143 (gcon -> LPAREN RPAREN .)
    LCOLCHETE       reduce using rule 143 (gcon -> LPAREN RPAREN .)
    ID              reduce using rule 143 (gcon -> LPAREN RPAREN .)
    DOIS_PONTOS     reduce using rule 143 (gcon -> LPAREN RPAREN .)
    PLUS            reduce using rule 143 (gcon -> LPAREN RPAREN .)
    MINUS           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    MULT            reduce using rule 143 (gcon -> LPAREN RPAREN .)
    BARRA           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    CIRCUNFLEXO     reduce using rule 143 (gcon -> LPAREN RPAREN .)
    MAIOR_IGUAL     reduce using rule 143 (gcon -> LPAREN RPAREN .)
    MENOR_IGUAL     reduce using rule 143 (gcon -> LPAREN RPAREN .)
    MAIOR           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    MENOR           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    IGUAL           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 143 (gcon -> LPAREN RPAREN .)
    OR              reduce using rule 143 (gcon -> LPAREN RPAREN .)
    NOT             reduce using rule 143 (gcon -> LPAREN RPAREN .)
    AND             reduce using rule 143 (gcon -> LPAREN RPAREN .)
    EQUAL           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    VARSYM          reduce using rule 143 (gcon -> LPAREN RPAREN .)
    CRASE           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    PIPE            reduce using rule 143 (gcon -> LPAREN RPAREN .)
    RPAREN          reduce using rule 143 (gcon -> LPAREN RPAREN .)
    VIRGULA         reduce using rule 143 (gcon -> LPAREN RPAREN .)
    RCOLCHETE       reduce using rule 143 (gcon -> LPAREN RPAREN .)
    SETAS           reduce using rule 143 (gcon -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 143 (gcon -> LPAREN RPAREN .)


state 60

    (150) var -> LPAREN VARSYM . RPAREN

    RPAREN          shift and go to state 148


state 61

    (44) apat -> LPAREN pat . RPAREN
    (52) pattuple -> pat . VIRGULA pattuple
    (53) pattuple -> pat . VIRGULA pat
    (54) patop -> pat . varop pat
    (55) patop -> pat . PLUS pat
    (56) patop -> pat . MINUS pat
    (57) patop -> pat . MULT pat
    (58) patop -> pat . BARRA pat
    (59) patop -> pat . CIRCUNFLEXO pat
    (60) patop -> pat . MAIOR_IGUAL pat
    (61) patop -> pat . MENOR_IGUAL pat
    (62) patop -> pat . MAIOR pat
    (63) patop -> pat . MENOR pat
    (64) patop -> pat . IGUAL pat
    (65) patop -> pat . DIFERENTE pat
    (66) patop -> pat . OR pat
    (67) patop -> pat . NOT pat
    (68) patop -> pat . AND pat
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    RPAREN          shift and go to state 149
    VIRGULA         shift and go to state 150
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULT            shift and go to state 36
    BARRA           shift and go to state 37
    CIRCUNFLEXO     shift and go to state 38
    MAIOR_IGUAL     shift and go to state 39
    MENOR_IGUAL     shift and go to state 40
    MAIOR           shift and go to state 41
    MENOR           shift and go to state 42
    IGUAL           shift and go to state 43
    DIFERENTE       shift and go to state 44
    OR              shift and go to state 45
    NOT             shift and go to state 46
    AND             shift and go to state 47
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

    varop                          shift and go to state 33

state 62

    (45) apat -> LPAREN pattuple . RPAREN

    RPAREN          shift and go to state 151


state 63

    (145) gcon -> LPAREN virgulalist . RPAREN

    RPAREN          shift and go to state 152


state 64

    (151) qcon -> LPAREN DOIS_PONTOS . RPAREN

    RPAREN          shift and go to state 153


state 65

    (28) funlhs -> var . apatlist
    (33) apat -> var .
    (34) apat -> var . ARROBA apat
    (31) apatlist -> . apat apatlist
    (32) apatlist -> . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    DOIS_PONTOS     reduce using rule 33 (apat -> var .)
    RPAREN          reduce using rule 33 (apat -> var .)
    VIRGULA         reduce using rule 33 (apat -> var .)
    PLUS            reduce using rule 33 (apat -> var .)
    MINUS           reduce using rule 33 (apat -> var .)
    MULT            reduce using rule 33 (apat -> var .)
    BARRA           reduce using rule 33 (apat -> var .)
    CIRCUNFLEXO     reduce using rule 33 (apat -> var .)
    MAIOR_IGUAL     reduce using rule 33 (apat -> var .)
    MENOR_IGUAL     reduce using rule 33 (apat -> var .)
    MAIOR           reduce using rule 33 (apat -> var .)
    MENOR           reduce using rule 33 (apat -> var .)
    IGUAL           reduce using rule 33 (apat -> var .)
    DIFERENTE       reduce using rule 33 (apat -> var .)
    OR              reduce using rule 33 (apat -> var .)
    NOT             reduce using rule 33 (apat -> var .)
    AND             reduce using rule 33 (apat -> var .)
    VARSYM          reduce using rule 33 (apat -> var .)
    CRASE           reduce using rule 33 (apat -> var .)
    ARROBA          shift and go to state 54
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    var                            shift and go to state 51
    apatlist                       shift and go to state 52
    apat                           shift and go to state 55
    qcon                           shift and go to state 17
    gcon                           shift and go to state 56

state 66

    (147) virgulalist -> VIRGULA . virgulalist
    (148) virgulalist -> VIRGULA .
    (147) virgulalist -> . VIRGULA virgulalist
    (148) virgulalist -> . VIRGULA

    RPAREN          reduce using rule 148 (virgulalist -> VIRGULA .)
    VIRGULA         shift and go to state 66

    virgulalist                    shift and go to state 154

state 67

    (69) pat -> lpat DOIS_PONTOS . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    lpat                           shift and go to state 12
    pat                            shift and go to state 155
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 68

    (72) lpat -> MINUS lpattype .

    DOIS_PONTOS     reduce using rule 72 (lpat -> MINUS lpattype .)
    PLUS            reduce using rule 72 (lpat -> MINUS lpattype .)
    MINUS           reduce using rule 72 (lpat -> MINUS lpattype .)
    MULT            reduce using rule 72 (lpat -> MINUS lpattype .)
    BARRA           reduce using rule 72 (lpat -> MINUS lpattype .)
    CIRCUNFLEXO     reduce using rule 72 (lpat -> MINUS lpattype .)
    MAIOR_IGUAL     reduce using rule 72 (lpat -> MINUS lpattype .)
    MENOR_IGUAL     reduce using rule 72 (lpat -> MINUS lpattype .)
    MAIOR           reduce using rule 72 (lpat -> MINUS lpattype .)
    MENOR           reduce using rule 72 (lpat -> MINUS lpattype .)
    IGUAL           reduce using rule 72 (lpat -> MINUS lpattype .)
    DIFERENTE       reduce using rule 72 (lpat -> MINUS lpattype .)
    OR              reduce using rule 72 (lpat -> MINUS lpattype .)
    NOT             reduce using rule 72 (lpat -> MINUS lpattype .)
    AND             reduce using rule 72 (lpat -> MINUS lpattype .)
    EQUAL           reduce using rule 72 (lpat -> MINUS lpattype .)
    VARSYM          reduce using rule 72 (lpat -> MINUS lpattype .)
    CRASE           reduce using rule 72 (lpat -> MINUS lpattype .)
    PIPE            reduce using rule 72 (lpat -> MINUS lpattype .)
    RPAREN          reduce using rule 72 (lpat -> MINUS lpattype .)
    VIRGULA         reduce using rule 72 (lpat -> MINUS lpattype .)
    RCOLCHETE       reduce using rule 72 (lpat -> MINUS lpattype .)
    SETAS           reduce using rule 72 (lpat -> MINUS lpattype .)
    RCHAVE          reduce using rule 72 (lpat -> MINUS lpattype .)


state 69

    (74) lpattype -> INT .

    DOIS_PONTOS     reduce using rule 74 (lpattype -> INT .)
    PLUS            reduce using rule 74 (lpattype -> INT .)
    MINUS           reduce using rule 74 (lpattype -> INT .)
    MULT            reduce using rule 74 (lpattype -> INT .)
    BARRA           reduce using rule 74 (lpattype -> INT .)
    CIRCUNFLEXO     reduce using rule 74 (lpattype -> INT .)
    MAIOR_IGUAL     reduce using rule 74 (lpattype -> INT .)
    MENOR_IGUAL     reduce using rule 74 (lpattype -> INT .)
    MAIOR           reduce using rule 74 (lpattype -> INT .)
    MENOR           reduce using rule 74 (lpattype -> INT .)
    IGUAL           reduce using rule 74 (lpattype -> INT .)
    DIFERENTE       reduce using rule 74 (lpattype -> INT .)
    OR              reduce using rule 74 (lpattype -> INT .)
    NOT             reduce using rule 74 (lpattype -> INT .)
    AND             reduce using rule 74 (lpattype -> INT .)
    EQUAL           reduce using rule 74 (lpattype -> INT .)
    VARSYM          reduce using rule 74 (lpattype -> INT .)
    CRASE           reduce using rule 74 (lpattype -> INT .)
    PIPE            reduce using rule 74 (lpattype -> INT .)
    RPAREN          reduce using rule 74 (lpattype -> INT .)
    VIRGULA         reduce using rule 74 (lpattype -> INT .)
    RCOLCHETE       reduce using rule 74 (lpattype -> INT .)
    SETAS           reduce using rule 74 (lpattype -> INT .)
    RCHAVE          reduce using rule 74 (lpattype -> INT .)


state 70

    (75) lpattype -> FLOAT .

    DOIS_PONTOS     reduce using rule 75 (lpattype -> FLOAT .)
    PLUS            reduce using rule 75 (lpattype -> FLOAT .)
    MINUS           reduce using rule 75 (lpattype -> FLOAT .)
    MULT            reduce using rule 75 (lpattype -> FLOAT .)
    BARRA           reduce using rule 75 (lpattype -> FLOAT .)
    CIRCUNFLEXO     reduce using rule 75 (lpattype -> FLOAT .)
    MAIOR_IGUAL     reduce using rule 75 (lpattype -> FLOAT .)
    MENOR_IGUAL     reduce using rule 75 (lpattype -> FLOAT .)
    MAIOR           reduce using rule 75 (lpattype -> FLOAT .)
    MENOR           reduce using rule 75 (lpattype -> FLOAT .)
    IGUAL           reduce using rule 75 (lpattype -> FLOAT .)
    DIFERENTE       reduce using rule 75 (lpattype -> FLOAT .)
    OR              reduce using rule 75 (lpattype -> FLOAT .)
    NOT             reduce using rule 75 (lpattype -> FLOAT .)
    AND             reduce using rule 75 (lpattype -> FLOAT .)
    EQUAL           reduce using rule 75 (lpattype -> FLOAT .)
    VARSYM          reduce using rule 75 (lpattype -> FLOAT .)
    CRASE           reduce using rule 75 (lpattype -> FLOAT .)
    PIPE            reduce using rule 75 (lpattype -> FLOAT .)
    RPAREN          reduce using rule 75 (lpattype -> FLOAT .)
    VIRGULA         reduce using rule 75 (lpattype -> FLOAT .)
    RCOLCHETE       reduce using rule 75 (lpattype -> FLOAT .)
    SETAS           reduce using rule 75 (lpattype -> FLOAT .)
    RCHAVE          reduce using rule 75 (lpattype -> FLOAT .)


state 71

    (73) lpat -> gcon apatlist .

    DOIS_PONTOS     reduce using rule 73 (lpat -> gcon apatlist .)
    PLUS            reduce using rule 73 (lpat -> gcon apatlist .)
    MINUS           reduce using rule 73 (lpat -> gcon apatlist .)
    MULT            reduce using rule 73 (lpat -> gcon apatlist .)
    BARRA           reduce using rule 73 (lpat -> gcon apatlist .)
    CIRCUNFLEXO     reduce using rule 73 (lpat -> gcon apatlist .)
    MAIOR_IGUAL     reduce using rule 73 (lpat -> gcon apatlist .)
    MENOR_IGUAL     reduce using rule 73 (lpat -> gcon apatlist .)
    MAIOR           reduce using rule 73 (lpat -> gcon apatlist .)
    MENOR           reduce using rule 73 (lpat -> gcon apatlist .)
    IGUAL           reduce using rule 73 (lpat -> gcon apatlist .)
    DIFERENTE       reduce using rule 73 (lpat -> gcon apatlist .)
    OR              reduce using rule 73 (lpat -> gcon apatlist .)
    NOT             reduce using rule 73 (lpat -> gcon apatlist .)
    AND             reduce using rule 73 (lpat -> gcon apatlist .)
    EQUAL           reduce using rule 73 (lpat -> gcon apatlist .)
    VARSYM          reduce using rule 73 (lpat -> gcon apatlist .)
    CRASE           reduce using rule 73 (lpat -> gcon apatlist .)
    PIPE            reduce using rule 73 (lpat -> gcon apatlist .)
    RPAREN          reduce using rule 73 (lpat -> gcon apatlist .)
    VIRGULA         reduce using rule 73 (lpat -> gcon apatlist .)
    RCOLCHETE       reduce using rule 73 (lpat -> gcon apatlist .)
    SETAS           reduce using rule 73 (lpat -> gcon apatlist .)
    RCHAVE          reduce using rule 73 (lpat -> gcon apatlist .)


state 72

    (35) apat -> qcon LCHAVE . fpatlist RCHAVE
    (47) fpatlist -> . fpat VIRGULA fpatlist
    (48) fpatlist -> . fpat
    (49) fpat -> . var EQUAL pat
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 143

    fpatlist                       shift and go to state 156
    fpat                           shift and go to state 157
    var                            shift and go to state 158

state 73

    (46) apat -> LCOLCHETE patlist . RCOLCHETE

    RCOLCHETE       shift and go to state 159


state 74

    (144) gcon -> LCOLCHETE RCOLCHETE .

    INT             reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    FLOAT           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    CHAR            reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    STRING          reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    TRUE            reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    FALSE           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    UNDERLINE       reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    LPAREN          reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    LCOLCHETE       reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    ID              reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    DOIS_PONTOS     reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    PLUS            reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    MINUS           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    MULT            reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    BARRA           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    CIRCUNFLEXO     reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    MAIOR_IGUAL     reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    MENOR_IGUAL     reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    MAIOR           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    MENOR           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    IGUAL           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    DIFERENTE       reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    OR              reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    NOT             reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    AND             reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    EQUAL           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    VARSYM          reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    CRASE           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    PIPE            reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    RPAREN          reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    VIRGULA         reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    RCOLCHETE       reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    SETAS           reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)
    RCHAVE          reduce using rule 144 (gcon -> LCOLCHETE RCOLCHETE .)


state 75

    (50) patlist -> pat . VIRGULA patlist
    (51) patlist -> pat .

    VIRGULA         shift and go to state 160
    RCOLCHETE       reduce using rule 51 (patlist -> pat .)


state 76

    (44) apat -> LPAREN . pat RPAREN
    (45) apat -> LPAREN . pattuple RPAREN
    (143) gcon -> LPAREN . RPAREN
    (145) gcon -> LPAREN . virgulalist RPAREN
    (150) var -> LPAREN . VARSYM RPAREN
    (151) qcon -> LPAREN . DOIS_PONTOS RPAREN
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (52) pattuple -> . pat VIRGULA pattuple
    (53) pattuple -> . pat VIRGULA pat
    (147) virgulalist -> . VIRGULA virgulalist
    (148) virgulalist -> . VIRGULA
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    RPAREN          shift and go to state 59
    VARSYM          shift and go to state 60
    DOIS_PONTOS     shift and go to state 64
    VIRGULA         shift and go to state 66
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 146
    pattuple                       shift and go to state 62
    virgulalist                    shift and go to state 63
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 77

    (2) topdecls -> topdecl PONTO_VIRGULA topdecls .

    $end            reduce using rule 2 (topdecls -> topdecl PONTO_VIRGULA topdecls .)


state 78

    (76) rhs -> EQUAL exp . WHERE decls

    WHERE           shift and go to state 161


state 79

    (103) exp -> infixexp . DOIS_PONTOS_DUPLO type
    (104) exp -> infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

  ! shift/reduce conflict for DOIS_PONTOS_DUPLO resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for CIRCUNFLEXO resolved as shift
  ! shift/reduce conflict for MAIOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for VARSYM resolved as shift
  ! shift/reduce conflict for CRASE resolved as shift
    DOIS_PONTOS_DUPLO shift and go to state 162
    WHERE           reduce using rule 104 (exp -> infixexp .)
    THEN            reduce using rule 104 (exp -> infixexp .)
    OF              reduce using rule 104 (exp -> infixexp .)
    PIPE            reduce using rule 104 (exp -> infixexp .)
    VIRGULA         reduce using rule 104 (exp -> infixexp .)
    RCOLCHETE       reduce using rule 104 (exp -> infixexp .)
    DOIS_PONTOS     reduce using rule 104 (exp -> infixexp .)
    RPAREN          reduce using rule 104 (exp -> infixexp .)
    EQUAL           reduce using rule 104 (exp -> infixexp .)
    SETAS           reduce using rule 104 (exp -> infixexp .)
    ELSE            reduce using rule 104 (exp -> infixexp .)
    PONTO_VIRGULA   reduce using rule 104 (exp -> infixexp .)
    RCHAVE          reduce using rule 104 (exp -> infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 104 (exp -> infixexp .) ]
  ! MINUS           [ reduce using rule 104 (exp -> infixexp .) ]
  ! MULT            [ reduce using rule 104 (exp -> infixexp .) ]
  ! DIV             [ reduce using rule 104 (exp -> infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 104 (exp -> infixexp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 104 (exp -> infixexp .) ]
  ! MENOR_IGUAL     [ reduce using rule 104 (exp -> infixexp .) ]
  ! MAIOR           [ reduce using rule 104 (exp -> infixexp .) ]
  ! MENOR           [ reduce using rule 104 (exp -> infixexp .) ]
  ! IGUAL           [ reduce using rule 104 (exp -> infixexp .) ]
  ! DIFERENTE       [ reduce using rule 104 (exp -> infixexp .) ]
  ! OR              [ reduce using rule 104 (exp -> infixexp .) ]
  ! NOT             [ reduce using rule 104 (exp -> infixexp .) ]
  ! AND             [ reduce using rule 104 (exp -> infixexp .) ]
  ! VARSYM          [ reduce using rule 104 (exp -> infixexp .) ]
  ! CRASE           [ reduce using rule 104 (exp -> infixexp .) ]
  ! DOIS_PONTOS_DUPLO [ reduce using rule 104 (exp -> infixexp .) ]

    varop                          shift and go to state 163

state 80

    (105) infixexp -> expop .

    DOIS_PONTOS_DUPLO reduce using rule 105 (infixexp -> expop .)
    PLUS            reduce using rule 105 (infixexp -> expop .)
    MINUS           reduce using rule 105 (infixexp -> expop .)
    MULT            reduce using rule 105 (infixexp -> expop .)
    DIV             reduce using rule 105 (infixexp -> expop .)
    CIRCUNFLEXO     reduce using rule 105 (infixexp -> expop .)
    MAIOR_IGUAL     reduce using rule 105 (infixexp -> expop .)
    MENOR_IGUAL     reduce using rule 105 (infixexp -> expop .)
    MAIOR           reduce using rule 105 (infixexp -> expop .)
    MENOR           reduce using rule 105 (infixexp -> expop .)
    IGUAL           reduce using rule 105 (infixexp -> expop .)
    DIFERENTE       reduce using rule 105 (infixexp -> expop .)
    OR              reduce using rule 105 (infixexp -> expop .)
    NOT             reduce using rule 105 (infixexp -> expop .)
    AND             reduce using rule 105 (infixexp -> expop .)
    VARSYM          reduce using rule 105 (infixexp -> expop .)
    CRASE           reduce using rule 105 (infixexp -> expop .)
    WHERE           reduce using rule 105 (infixexp -> expop .)
    VIRGULA         reduce using rule 105 (infixexp -> expop .)
    EQUAL           reduce using rule 105 (infixexp -> expop .)
    SETAS           reduce using rule 105 (infixexp -> expop .)
    THEN            reduce using rule 105 (infixexp -> expop .)
    OF              reduce using rule 105 (infixexp -> expop .)
    DOIS_PONTOS     reduce using rule 105 (infixexp -> expop .)
    RPAREN          reduce using rule 105 (infixexp -> expop .)
    PIPE            reduce using rule 105 (infixexp -> expop .)
    RCOLCHETE       reduce using rule 105 (infixexp -> expop .)
    ELSE            reduce using rule 105 (infixexp -> expop .)
    PONTO_VIRGULA   reduce using rule 105 (infixexp -> expop .)
    RCHAVE          reduce using rule 105 (infixexp -> expop .)


state 81

    (106) infixexp -> MINUS . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 178
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 82

    (107) infixexp -> lexp .

    DOIS_PONTOS_DUPLO reduce using rule 107 (infixexp -> lexp .)
    PLUS            reduce using rule 107 (infixexp -> lexp .)
    MINUS           reduce using rule 107 (infixexp -> lexp .)
    MULT            reduce using rule 107 (infixexp -> lexp .)
    DIV             reduce using rule 107 (infixexp -> lexp .)
    CIRCUNFLEXO     reduce using rule 107 (infixexp -> lexp .)
    MAIOR_IGUAL     reduce using rule 107 (infixexp -> lexp .)
    MENOR_IGUAL     reduce using rule 107 (infixexp -> lexp .)
    MAIOR           reduce using rule 107 (infixexp -> lexp .)
    MENOR           reduce using rule 107 (infixexp -> lexp .)
    IGUAL           reduce using rule 107 (infixexp -> lexp .)
    DIFERENTE       reduce using rule 107 (infixexp -> lexp .)
    OR              reduce using rule 107 (infixexp -> lexp .)
    NOT             reduce using rule 107 (infixexp -> lexp .)
    AND             reduce using rule 107 (infixexp -> lexp .)
    VARSYM          reduce using rule 107 (infixexp -> lexp .)
    CRASE           reduce using rule 107 (infixexp -> lexp .)
    WHERE           reduce using rule 107 (infixexp -> lexp .)
    VIRGULA         reduce using rule 107 (infixexp -> lexp .)
    EQUAL           reduce using rule 107 (infixexp -> lexp .)
    SETAS           reduce using rule 107 (infixexp -> lexp .)
    THEN            reduce using rule 107 (infixexp -> lexp .)
    OF              reduce using rule 107 (infixexp -> lexp .)
    DOIS_PONTOS     reduce using rule 107 (infixexp -> lexp .)
    RPAREN          reduce using rule 107 (infixexp -> lexp .)
    PIPE            reduce using rule 107 (infixexp -> lexp .)
    RCOLCHETE       reduce using rule 107 (infixexp -> lexp .)
    ELSE            reduce using rule 107 (infixexp -> lexp .)
    PONTO_VIRGULA   reduce using rule 107 (infixexp -> lexp .)
    RCHAVE          reduce using rule 107 (infixexp -> lexp .)


state 83

    (123) lexp -> BARRA_INVERTIDA . apatlist SETAS exp
    (31) apatlist -> . apat apatlist
    (32) apatlist -> . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    apatlist                       shift and go to state 179
    apat                           shift and go to state 55
    var                            shift and go to state 51
    qcon                           shift and go to state 17
    gcon                           shift and go to state 56

state 84

    (124) lexp -> LET . decls IN exp
    (5) decls -> . LCHAVE declslist RCHAVE

    LCHAVE          shift and go to state 181

    decls                          shift and go to state 180

state 85

    (125) lexp -> IF . exp THEN exp ELSE exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 182
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 86

    (126) lexp -> CASE . exp OF LCHAVE alts RCHAVE
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 183
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 87

    (127) lexp -> fexp .

    DOIS_PONTOS_DUPLO reduce using rule 127 (lexp -> fexp .)
    PLUS            reduce using rule 127 (lexp -> fexp .)
    MINUS           reduce using rule 127 (lexp -> fexp .)
    MULT            reduce using rule 127 (lexp -> fexp .)
    DIV             reduce using rule 127 (lexp -> fexp .)
    CIRCUNFLEXO     reduce using rule 127 (lexp -> fexp .)
    MAIOR_IGUAL     reduce using rule 127 (lexp -> fexp .)
    MENOR_IGUAL     reduce using rule 127 (lexp -> fexp .)
    MAIOR           reduce using rule 127 (lexp -> fexp .)
    MENOR           reduce using rule 127 (lexp -> fexp .)
    IGUAL           reduce using rule 127 (lexp -> fexp .)
    DIFERENTE       reduce using rule 127 (lexp -> fexp .)
    OR              reduce using rule 127 (lexp -> fexp .)
    NOT             reduce using rule 127 (lexp -> fexp .)
    AND             reduce using rule 127 (lexp -> fexp .)
    VARSYM          reduce using rule 127 (lexp -> fexp .)
    CRASE           reduce using rule 127 (lexp -> fexp .)
    WHERE           reduce using rule 127 (lexp -> fexp .)
    VIRGULA         reduce using rule 127 (lexp -> fexp .)
    EQUAL           reduce using rule 127 (lexp -> fexp .)
    SETAS           reduce using rule 127 (lexp -> fexp .)
    THEN            reduce using rule 127 (lexp -> fexp .)
    OF              reduce using rule 127 (lexp -> fexp .)
    DOIS_PONTOS     reduce using rule 127 (lexp -> fexp .)
    RPAREN          reduce using rule 127 (lexp -> fexp .)
    PIPE            reduce using rule 127 (lexp -> fexp .)
    RCOLCHETE       reduce using rule 127 (lexp -> fexp .)
    ELSE            reduce using rule 127 (lexp -> fexp .)
    PONTO_VIRGULA   reduce using rule 127 (lexp -> fexp .)
    RCHAVE          reduce using rule 127 (lexp -> fexp .)


state 88

    (128) fexp -> aexp . aexp
    (129) fexp -> aexp . fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    aexp                           shift and go to state 184
    fexp                           shift and go to state 185
    var                            shift and go to state 89

state 89

    (86) aexp -> var .

    INT             reduce using rule 86 (aexp -> var .)
    FLOAT           reduce using rule 86 (aexp -> var .)
    CHAR            reduce using rule 86 (aexp -> var .)
    STRING          reduce using rule 86 (aexp -> var .)
    TRUE            reduce using rule 86 (aexp -> var .)
    FALSE           reduce using rule 86 (aexp -> var .)
    LPAREN          reduce using rule 86 (aexp -> var .)
    LCOLCHETE       reduce using rule 86 (aexp -> var .)
    ID              reduce using rule 86 (aexp -> var .)
    DOIS_PONTOS_DUPLO reduce using rule 86 (aexp -> var .)
    PLUS            reduce using rule 86 (aexp -> var .)
    MINUS           reduce using rule 86 (aexp -> var .)
    MULT            reduce using rule 86 (aexp -> var .)
    DIV             reduce using rule 86 (aexp -> var .)
    CIRCUNFLEXO     reduce using rule 86 (aexp -> var .)
    MAIOR_IGUAL     reduce using rule 86 (aexp -> var .)
    MENOR_IGUAL     reduce using rule 86 (aexp -> var .)
    MAIOR           reduce using rule 86 (aexp -> var .)
    MENOR           reduce using rule 86 (aexp -> var .)
    IGUAL           reduce using rule 86 (aexp -> var .)
    DIFERENTE       reduce using rule 86 (aexp -> var .)
    OR              reduce using rule 86 (aexp -> var .)
    NOT             reduce using rule 86 (aexp -> var .)
    AND             reduce using rule 86 (aexp -> var .)
    VARSYM          reduce using rule 86 (aexp -> var .)
    CRASE           reduce using rule 86 (aexp -> var .)
    WHERE           reduce using rule 86 (aexp -> var .)
    VIRGULA         reduce using rule 86 (aexp -> var .)
    EQUAL           reduce using rule 86 (aexp -> var .)
    SETAS           reduce using rule 86 (aexp -> var .)
    THEN            reduce using rule 86 (aexp -> var .)
    OF              reduce using rule 86 (aexp -> var .)
    DOIS_PONTOS     reduce using rule 86 (aexp -> var .)
    RPAREN          reduce using rule 86 (aexp -> var .)
    PIPE            reduce using rule 86 (aexp -> var .)
    RCOLCHETE       reduce using rule 86 (aexp -> var .)
    ELSE            reduce using rule 86 (aexp -> var .)
    PONTO_VIRGULA   reduce using rule 86 (aexp -> var .)
    RCHAVE          reduce using rule 86 (aexp -> var .)


state 90

    (87) aexp -> INT .

    INT             reduce using rule 87 (aexp -> INT .)
    FLOAT           reduce using rule 87 (aexp -> INT .)
    CHAR            reduce using rule 87 (aexp -> INT .)
    STRING          reduce using rule 87 (aexp -> INT .)
    TRUE            reduce using rule 87 (aexp -> INT .)
    FALSE           reduce using rule 87 (aexp -> INT .)
    LPAREN          reduce using rule 87 (aexp -> INT .)
    LCOLCHETE       reduce using rule 87 (aexp -> INT .)
    ID              reduce using rule 87 (aexp -> INT .)
    DOIS_PONTOS_DUPLO reduce using rule 87 (aexp -> INT .)
    PLUS            reduce using rule 87 (aexp -> INT .)
    MINUS           reduce using rule 87 (aexp -> INT .)
    MULT            reduce using rule 87 (aexp -> INT .)
    DIV             reduce using rule 87 (aexp -> INT .)
    CIRCUNFLEXO     reduce using rule 87 (aexp -> INT .)
    MAIOR_IGUAL     reduce using rule 87 (aexp -> INT .)
    MENOR_IGUAL     reduce using rule 87 (aexp -> INT .)
    MAIOR           reduce using rule 87 (aexp -> INT .)
    MENOR           reduce using rule 87 (aexp -> INT .)
    IGUAL           reduce using rule 87 (aexp -> INT .)
    DIFERENTE       reduce using rule 87 (aexp -> INT .)
    OR              reduce using rule 87 (aexp -> INT .)
    NOT             reduce using rule 87 (aexp -> INT .)
    AND             reduce using rule 87 (aexp -> INT .)
    VARSYM          reduce using rule 87 (aexp -> INT .)
    CRASE           reduce using rule 87 (aexp -> INT .)
    WHERE           reduce using rule 87 (aexp -> INT .)
    VIRGULA         reduce using rule 87 (aexp -> INT .)
    EQUAL           reduce using rule 87 (aexp -> INT .)
    SETAS           reduce using rule 87 (aexp -> INT .)
    THEN            reduce using rule 87 (aexp -> INT .)
    OF              reduce using rule 87 (aexp -> INT .)
    DOIS_PONTOS     reduce using rule 87 (aexp -> INT .)
    RPAREN          reduce using rule 87 (aexp -> INT .)
    PIPE            reduce using rule 87 (aexp -> INT .)
    RCOLCHETE       reduce using rule 87 (aexp -> INT .)
    ELSE            reduce using rule 87 (aexp -> INT .)
    PONTO_VIRGULA   reduce using rule 87 (aexp -> INT .)
    RCHAVE          reduce using rule 87 (aexp -> INT .)


state 91

    (88) aexp -> FLOAT .

    INT             reduce using rule 88 (aexp -> FLOAT .)
    FLOAT           reduce using rule 88 (aexp -> FLOAT .)
    CHAR            reduce using rule 88 (aexp -> FLOAT .)
    STRING          reduce using rule 88 (aexp -> FLOAT .)
    TRUE            reduce using rule 88 (aexp -> FLOAT .)
    FALSE           reduce using rule 88 (aexp -> FLOAT .)
    LPAREN          reduce using rule 88 (aexp -> FLOAT .)
    LCOLCHETE       reduce using rule 88 (aexp -> FLOAT .)
    ID              reduce using rule 88 (aexp -> FLOAT .)
    DOIS_PONTOS_DUPLO reduce using rule 88 (aexp -> FLOAT .)
    PLUS            reduce using rule 88 (aexp -> FLOAT .)
    MINUS           reduce using rule 88 (aexp -> FLOAT .)
    MULT            reduce using rule 88 (aexp -> FLOAT .)
    DIV             reduce using rule 88 (aexp -> FLOAT .)
    CIRCUNFLEXO     reduce using rule 88 (aexp -> FLOAT .)
    MAIOR_IGUAL     reduce using rule 88 (aexp -> FLOAT .)
    MENOR_IGUAL     reduce using rule 88 (aexp -> FLOAT .)
    MAIOR           reduce using rule 88 (aexp -> FLOAT .)
    MENOR           reduce using rule 88 (aexp -> FLOAT .)
    IGUAL           reduce using rule 88 (aexp -> FLOAT .)
    DIFERENTE       reduce using rule 88 (aexp -> FLOAT .)
    OR              reduce using rule 88 (aexp -> FLOAT .)
    NOT             reduce using rule 88 (aexp -> FLOAT .)
    AND             reduce using rule 88 (aexp -> FLOAT .)
    VARSYM          reduce using rule 88 (aexp -> FLOAT .)
    CRASE           reduce using rule 88 (aexp -> FLOAT .)
    WHERE           reduce using rule 88 (aexp -> FLOAT .)
    VIRGULA         reduce using rule 88 (aexp -> FLOAT .)
    EQUAL           reduce using rule 88 (aexp -> FLOAT .)
    SETAS           reduce using rule 88 (aexp -> FLOAT .)
    THEN            reduce using rule 88 (aexp -> FLOAT .)
    OF              reduce using rule 88 (aexp -> FLOAT .)
    DOIS_PONTOS     reduce using rule 88 (aexp -> FLOAT .)
    RPAREN          reduce using rule 88 (aexp -> FLOAT .)
    PIPE            reduce using rule 88 (aexp -> FLOAT .)
    RCOLCHETE       reduce using rule 88 (aexp -> FLOAT .)
    ELSE            reduce using rule 88 (aexp -> FLOAT .)
    PONTO_VIRGULA   reduce using rule 88 (aexp -> FLOAT .)
    RCHAVE          reduce using rule 88 (aexp -> FLOAT .)


state 92

    (89) aexp -> CHAR .

    INT             reduce using rule 89 (aexp -> CHAR .)
    FLOAT           reduce using rule 89 (aexp -> CHAR .)
    CHAR            reduce using rule 89 (aexp -> CHAR .)
    STRING          reduce using rule 89 (aexp -> CHAR .)
    TRUE            reduce using rule 89 (aexp -> CHAR .)
    FALSE           reduce using rule 89 (aexp -> CHAR .)
    LPAREN          reduce using rule 89 (aexp -> CHAR .)
    LCOLCHETE       reduce using rule 89 (aexp -> CHAR .)
    ID              reduce using rule 89 (aexp -> CHAR .)
    DOIS_PONTOS_DUPLO reduce using rule 89 (aexp -> CHAR .)
    PLUS            reduce using rule 89 (aexp -> CHAR .)
    MINUS           reduce using rule 89 (aexp -> CHAR .)
    MULT            reduce using rule 89 (aexp -> CHAR .)
    DIV             reduce using rule 89 (aexp -> CHAR .)
    CIRCUNFLEXO     reduce using rule 89 (aexp -> CHAR .)
    MAIOR_IGUAL     reduce using rule 89 (aexp -> CHAR .)
    MENOR_IGUAL     reduce using rule 89 (aexp -> CHAR .)
    MAIOR           reduce using rule 89 (aexp -> CHAR .)
    MENOR           reduce using rule 89 (aexp -> CHAR .)
    IGUAL           reduce using rule 89 (aexp -> CHAR .)
    DIFERENTE       reduce using rule 89 (aexp -> CHAR .)
    OR              reduce using rule 89 (aexp -> CHAR .)
    NOT             reduce using rule 89 (aexp -> CHAR .)
    AND             reduce using rule 89 (aexp -> CHAR .)
    VARSYM          reduce using rule 89 (aexp -> CHAR .)
    CRASE           reduce using rule 89 (aexp -> CHAR .)
    WHERE           reduce using rule 89 (aexp -> CHAR .)
    VIRGULA         reduce using rule 89 (aexp -> CHAR .)
    EQUAL           reduce using rule 89 (aexp -> CHAR .)
    SETAS           reduce using rule 89 (aexp -> CHAR .)
    THEN            reduce using rule 89 (aexp -> CHAR .)
    OF              reduce using rule 89 (aexp -> CHAR .)
    DOIS_PONTOS     reduce using rule 89 (aexp -> CHAR .)
    RPAREN          reduce using rule 89 (aexp -> CHAR .)
    PIPE            reduce using rule 89 (aexp -> CHAR .)
    RCOLCHETE       reduce using rule 89 (aexp -> CHAR .)
    ELSE            reduce using rule 89 (aexp -> CHAR .)
    PONTO_VIRGULA   reduce using rule 89 (aexp -> CHAR .)
    RCHAVE          reduce using rule 89 (aexp -> CHAR .)


state 93

    (90) aexp -> STRING .

    INT             reduce using rule 90 (aexp -> STRING .)
    FLOAT           reduce using rule 90 (aexp -> STRING .)
    CHAR            reduce using rule 90 (aexp -> STRING .)
    STRING          reduce using rule 90 (aexp -> STRING .)
    TRUE            reduce using rule 90 (aexp -> STRING .)
    FALSE           reduce using rule 90 (aexp -> STRING .)
    LPAREN          reduce using rule 90 (aexp -> STRING .)
    LCOLCHETE       reduce using rule 90 (aexp -> STRING .)
    ID              reduce using rule 90 (aexp -> STRING .)
    DOIS_PONTOS_DUPLO reduce using rule 90 (aexp -> STRING .)
    PLUS            reduce using rule 90 (aexp -> STRING .)
    MINUS           reduce using rule 90 (aexp -> STRING .)
    MULT            reduce using rule 90 (aexp -> STRING .)
    DIV             reduce using rule 90 (aexp -> STRING .)
    CIRCUNFLEXO     reduce using rule 90 (aexp -> STRING .)
    MAIOR_IGUAL     reduce using rule 90 (aexp -> STRING .)
    MENOR_IGUAL     reduce using rule 90 (aexp -> STRING .)
    MAIOR           reduce using rule 90 (aexp -> STRING .)
    MENOR           reduce using rule 90 (aexp -> STRING .)
    IGUAL           reduce using rule 90 (aexp -> STRING .)
    DIFERENTE       reduce using rule 90 (aexp -> STRING .)
    OR              reduce using rule 90 (aexp -> STRING .)
    NOT             reduce using rule 90 (aexp -> STRING .)
    AND             reduce using rule 90 (aexp -> STRING .)
    VARSYM          reduce using rule 90 (aexp -> STRING .)
    CRASE           reduce using rule 90 (aexp -> STRING .)
    WHERE           reduce using rule 90 (aexp -> STRING .)
    VIRGULA         reduce using rule 90 (aexp -> STRING .)
    EQUAL           reduce using rule 90 (aexp -> STRING .)
    SETAS           reduce using rule 90 (aexp -> STRING .)
    THEN            reduce using rule 90 (aexp -> STRING .)
    OF              reduce using rule 90 (aexp -> STRING .)
    DOIS_PONTOS     reduce using rule 90 (aexp -> STRING .)
    RPAREN          reduce using rule 90 (aexp -> STRING .)
    PIPE            reduce using rule 90 (aexp -> STRING .)
    RCOLCHETE       reduce using rule 90 (aexp -> STRING .)
    ELSE            reduce using rule 90 (aexp -> STRING .)
    PONTO_VIRGULA   reduce using rule 90 (aexp -> STRING .)
    RCHAVE          reduce using rule 90 (aexp -> STRING .)


state 94

    (91) aexp -> TRUE .

    INT             reduce using rule 91 (aexp -> TRUE .)
    FLOAT           reduce using rule 91 (aexp -> TRUE .)
    CHAR            reduce using rule 91 (aexp -> TRUE .)
    STRING          reduce using rule 91 (aexp -> TRUE .)
    TRUE            reduce using rule 91 (aexp -> TRUE .)
    FALSE           reduce using rule 91 (aexp -> TRUE .)
    LPAREN          reduce using rule 91 (aexp -> TRUE .)
    LCOLCHETE       reduce using rule 91 (aexp -> TRUE .)
    ID              reduce using rule 91 (aexp -> TRUE .)
    DOIS_PONTOS_DUPLO reduce using rule 91 (aexp -> TRUE .)
    PLUS            reduce using rule 91 (aexp -> TRUE .)
    MINUS           reduce using rule 91 (aexp -> TRUE .)
    MULT            reduce using rule 91 (aexp -> TRUE .)
    DIV             reduce using rule 91 (aexp -> TRUE .)
    CIRCUNFLEXO     reduce using rule 91 (aexp -> TRUE .)
    MAIOR_IGUAL     reduce using rule 91 (aexp -> TRUE .)
    MENOR_IGUAL     reduce using rule 91 (aexp -> TRUE .)
    MAIOR           reduce using rule 91 (aexp -> TRUE .)
    MENOR           reduce using rule 91 (aexp -> TRUE .)
    IGUAL           reduce using rule 91 (aexp -> TRUE .)
    DIFERENTE       reduce using rule 91 (aexp -> TRUE .)
    OR              reduce using rule 91 (aexp -> TRUE .)
    NOT             reduce using rule 91 (aexp -> TRUE .)
    AND             reduce using rule 91 (aexp -> TRUE .)
    VARSYM          reduce using rule 91 (aexp -> TRUE .)
    CRASE           reduce using rule 91 (aexp -> TRUE .)
    WHERE           reduce using rule 91 (aexp -> TRUE .)
    VIRGULA         reduce using rule 91 (aexp -> TRUE .)
    EQUAL           reduce using rule 91 (aexp -> TRUE .)
    SETAS           reduce using rule 91 (aexp -> TRUE .)
    THEN            reduce using rule 91 (aexp -> TRUE .)
    OF              reduce using rule 91 (aexp -> TRUE .)
    DOIS_PONTOS     reduce using rule 91 (aexp -> TRUE .)
    RPAREN          reduce using rule 91 (aexp -> TRUE .)
    PIPE            reduce using rule 91 (aexp -> TRUE .)
    RCOLCHETE       reduce using rule 91 (aexp -> TRUE .)
    ELSE            reduce using rule 91 (aexp -> TRUE .)
    PONTO_VIRGULA   reduce using rule 91 (aexp -> TRUE .)
    RCHAVE          reduce using rule 91 (aexp -> TRUE .)


state 95

    (92) aexp -> FALSE .

    INT             reduce using rule 92 (aexp -> FALSE .)
    FLOAT           reduce using rule 92 (aexp -> FALSE .)
    CHAR            reduce using rule 92 (aexp -> FALSE .)
    STRING          reduce using rule 92 (aexp -> FALSE .)
    TRUE            reduce using rule 92 (aexp -> FALSE .)
    FALSE           reduce using rule 92 (aexp -> FALSE .)
    LPAREN          reduce using rule 92 (aexp -> FALSE .)
    LCOLCHETE       reduce using rule 92 (aexp -> FALSE .)
    ID              reduce using rule 92 (aexp -> FALSE .)
    DOIS_PONTOS_DUPLO reduce using rule 92 (aexp -> FALSE .)
    PLUS            reduce using rule 92 (aexp -> FALSE .)
    MINUS           reduce using rule 92 (aexp -> FALSE .)
    MULT            reduce using rule 92 (aexp -> FALSE .)
    DIV             reduce using rule 92 (aexp -> FALSE .)
    CIRCUNFLEXO     reduce using rule 92 (aexp -> FALSE .)
    MAIOR_IGUAL     reduce using rule 92 (aexp -> FALSE .)
    MENOR_IGUAL     reduce using rule 92 (aexp -> FALSE .)
    MAIOR           reduce using rule 92 (aexp -> FALSE .)
    MENOR           reduce using rule 92 (aexp -> FALSE .)
    IGUAL           reduce using rule 92 (aexp -> FALSE .)
    DIFERENTE       reduce using rule 92 (aexp -> FALSE .)
    OR              reduce using rule 92 (aexp -> FALSE .)
    NOT             reduce using rule 92 (aexp -> FALSE .)
    AND             reduce using rule 92 (aexp -> FALSE .)
    VARSYM          reduce using rule 92 (aexp -> FALSE .)
    CRASE           reduce using rule 92 (aexp -> FALSE .)
    WHERE           reduce using rule 92 (aexp -> FALSE .)
    VIRGULA         reduce using rule 92 (aexp -> FALSE .)
    EQUAL           reduce using rule 92 (aexp -> FALSE .)
    SETAS           reduce using rule 92 (aexp -> FALSE .)
    THEN            reduce using rule 92 (aexp -> FALSE .)
    OF              reduce using rule 92 (aexp -> FALSE .)
    DOIS_PONTOS     reduce using rule 92 (aexp -> FALSE .)
    RPAREN          reduce using rule 92 (aexp -> FALSE .)
    PIPE            reduce using rule 92 (aexp -> FALSE .)
    RCOLCHETE       reduce using rule 92 (aexp -> FALSE .)
    ELSE            reduce using rule 92 (aexp -> FALSE .)
    PONTO_VIRGULA   reduce using rule 92 (aexp -> FALSE .)
    RCHAVE          reduce using rule 92 (aexp -> FALSE .)


state 96

    (93) aexp -> LPAREN . exptuple RPAREN
    (95) aexp -> LPAREN . exp RPAREN
    (97) aexp -> LPAREN . infixexp qop RPAREN
    (98) aexp -> LPAREN . qop infixexp RPAREN
    (150) var -> LPAREN . VARSYM RPAREN
    (99) exptuple -> . exp VIRGULA exptuple
    (100) exptuple -> . exp VIRGULA exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (156) qop -> . qvarop
    (157) qop -> . DOIS_PONTOS
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (154) qvarop -> . VARSYM
    (155) qvarop -> . CRASE ID CRASE
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    VARSYM          shift and go to state 190
    MINUS           shift and go to state 81
    DOIS_PONTOS     shift and go to state 192
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    CRASE           shift and go to state 193
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exptuple                       shift and go to state 186
    exp                            shift and go to state 187
    infixexp                       shift and go to state 188
    qop                            shift and go to state 189
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    qvarop                         shift and go to state 191
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 97

    (94) aexp -> LCOLCHETE . explist RCOLCHETE
    (96) aexp -> LCOLCHETE . exp PIPE quallist RCOLCHETE
    (101) explist -> . exp VIRGULA explist
    (102) explist -> . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    explist                        shift and go to state 194
    exp                            shift and go to state 195
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 98

    (77) rhs -> gdrhs WHERE . decls
    (5) decls -> . LCHAVE declslist RCHAVE

    LCHAVE          shift and go to state 181

    decls                          shift and go to state 196

state 99

    (78) gdrhs -> guards EQUAL . exp
    (79) gdrhs -> guards EQUAL . exp gdrhs
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 197
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 100

    (80) guards -> PIPE guardslist .

    EQUAL           reduce using rule 80 (guards -> PIPE guardslist .)
    SETAS           reduce using rule 80 (guards -> PIPE guardslist .)


state 101

    (81) guardslist -> guard . VIRGULA guardslist
    (82) guardslist -> guard .

    VIRGULA         shift and go to state 198
    EQUAL           reduce using rule 82 (guardslist -> guard .)
    SETAS           reduce using rule 82 (guardslist -> guard .)


state 102

    (83) guard -> pat . SETAS infixexp

    SETAS           shift and go to state 199


state 103

    (85) guard -> infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    VIRGULA         reduce using rule 85 (guard -> infixexp .)
    EQUAL           reduce using rule 85 (guard -> infixexp .)
    SETAS           reduce using rule 85 (guard -> infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

    varop                          shift and go to state 163

state 104

    (84) guard -> LET . decls
    (124) lexp -> LET . decls IN exp
    (5) decls -> . LCHAVE declslist RCHAVE

    LCHAVE          shift and go to state 181

    decls                          shift and go to state 200

state 105

    (106) infixexp -> MINUS . infixexp
    (72) lpat -> MINUS . lpattype
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (74) lpattype -> . INT
    (75) lpattype -> . FLOAT
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    INT             shift and go to state 201
    FLOAT           shift and go to state 202
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 178
    lpattype                       shift and go to state 68
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 106

    (33) apat -> var .
    (34) apat -> var . ARROBA apat
    (86) aexp -> var .

    DOIS_PONTOS     reduce using rule 33 (apat -> var .)
    SETAS           reduce using rule 33 (apat -> var .)
    RPAREN          reduce using rule 33 (apat -> var .)
    VIRGULA         reduce using rule 33 (apat -> var .)
    RCOLCHETE       reduce using rule 33 (apat -> var .)
    ARROBA          shift and go to state 54
    INT             reduce using rule 86 (aexp -> var .)
    FLOAT           reduce using rule 86 (aexp -> var .)
    CHAR            reduce using rule 86 (aexp -> var .)
    STRING          reduce using rule 86 (aexp -> var .)
    TRUE            reduce using rule 86 (aexp -> var .)
    FALSE           reduce using rule 86 (aexp -> var .)
    LPAREN          reduce using rule 86 (aexp -> var .)
    LCOLCHETE       reduce using rule 86 (aexp -> var .)
    ID              reduce using rule 86 (aexp -> var .)


state 107

    (36) apat -> INT .
    (87) aexp -> INT .

    DOIS_PONTOS     reduce using rule 36 (apat -> INT .)
    SETAS           reduce using rule 36 (apat -> INT .)
    RPAREN          reduce using rule 36 (apat -> INT .)
    VIRGULA         reduce using rule 36 (apat -> INT .)
    RCOLCHETE       reduce using rule 36 (apat -> INT .)
    INT             reduce using rule 87 (aexp -> INT .)
    FLOAT           reduce using rule 87 (aexp -> INT .)
    CHAR            reduce using rule 87 (aexp -> INT .)
    STRING          reduce using rule 87 (aexp -> INT .)
    TRUE            reduce using rule 87 (aexp -> INT .)
    FALSE           reduce using rule 87 (aexp -> INT .)
    LPAREN          reduce using rule 87 (aexp -> INT .)
    LCOLCHETE       reduce using rule 87 (aexp -> INT .)
    ID              reduce using rule 87 (aexp -> INT .)


state 108

    (37) apat -> FLOAT .
    (88) aexp -> FLOAT .

    DOIS_PONTOS     reduce using rule 37 (apat -> FLOAT .)
    SETAS           reduce using rule 37 (apat -> FLOAT .)
    RPAREN          reduce using rule 37 (apat -> FLOAT .)
    VIRGULA         reduce using rule 37 (apat -> FLOAT .)
    RCOLCHETE       reduce using rule 37 (apat -> FLOAT .)
    INT             reduce using rule 88 (aexp -> FLOAT .)
    FLOAT           reduce using rule 88 (aexp -> FLOAT .)
    CHAR            reduce using rule 88 (aexp -> FLOAT .)
    STRING          reduce using rule 88 (aexp -> FLOAT .)
    TRUE            reduce using rule 88 (aexp -> FLOAT .)
    FALSE           reduce using rule 88 (aexp -> FLOAT .)
    LPAREN          reduce using rule 88 (aexp -> FLOAT .)
    LCOLCHETE       reduce using rule 88 (aexp -> FLOAT .)
    ID              reduce using rule 88 (aexp -> FLOAT .)


state 109

    (38) apat -> CHAR .
    (89) aexp -> CHAR .

    DOIS_PONTOS     reduce using rule 38 (apat -> CHAR .)
    SETAS           reduce using rule 38 (apat -> CHAR .)
    RPAREN          reduce using rule 38 (apat -> CHAR .)
    VIRGULA         reduce using rule 38 (apat -> CHAR .)
    RCOLCHETE       reduce using rule 38 (apat -> CHAR .)
    INT             reduce using rule 89 (aexp -> CHAR .)
    FLOAT           reduce using rule 89 (aexp -> CHAR .)
    CHAR            reduce using rule 89 (aexp -> CHAR .)
    STRING          reduce using rule 89 (aexp -> CHAR .)
    TRUE            reduce using rule 89 (aexp -> CHAR .)
    FALSE           reduce using rule 89 (aexp -> CHAR .)
    LPAREN          reduce using rule 89 (aexp -> CHAR .)
    LCOLCHETE       reduce using rule 89 (aexp -> CHAR .)
    ID              reduce using rule 89 (aexp -> CHAR .)


state 110

    (39) apat -> STRING .
    (90) aexp -> STRING .

    DOIS_PONTOS     reduce using rule 39 (apat -> STRING .)
    SETAS           reduce using rule 39 (apat -> STRING .)
    RPAREN          reduce using rule 39 (apat -> STRING .)
    VIRGULA         reduce using rule 39 (apat -> STRING .)
    RCOLCHETE       reduce using rule 39 (apat -> STRING .)
    INT             reduce using rule 90 (aexp -> STRING .)
    FLOAT           reduce using rule 90 (aexp -> STRING .)
    CHAR            reduce using rule 90 (aexp -> STRING .)
    STRING          reduce using rule 90 (aexp -> STRING .)
    TRUE            reduce using rule 90 (aexp -> STRING .)
    FALSE           reduce using rule 90 (aexp -> STRING .)
    LPAREN          reduce using rule 90 (aexp -> STRING .)
    LCOLCHETE       reduce using rule 90 (aexp -> STRING .)
    ID              reduce using rule 90 (aexp -> STRING .)


state 111

    (40) apat -> TRUE .
    (91) aexp -> TRUE .

    DOIS_PONTOS     reduce using rule 40 (apat -> TRUE .)
    SETAS           reduce using rule 40 (apat -> TRUE .)
    RPAREN          reduce using rule 40 (apat -> TRUE .)
    VIRGULA         reduce using rule 40 (apat -> TRUE .)
    RCOLCHETE       reduce using rule 40 (apat -> TRUE .)
    INT             reduce using rule 91 (aexp -> TRUE .)
    FLOAT           reduce using rule 91 (aexp -> TRUE .)
    CHAR            reduce using rule 91 (aexp -> TRUE .)
    STRING          reduce using rule 91 (aexp -> TRUE .)
    TRUE            reduce using rule 91 (aexp -> TRUE .)
    FALSE           reduce using rule 91 (aexp -> TRUE .)
    LPAREN          reduce using rule 91 (aexp -> TRUE .)
    LCOLCHETE       reduce using rule 91 (aexp -> TRUE .)
    ID              reduce using rule 91 (aexp -> TRUE .)


state 112

    (41) apat -> FALSE .
    (92) aexp -> FALSE .

    DOIS_PONTOS     reduce using rule 41 (apat -> FALSE .)
    SETAS           reduce using rule 41 (apat -> FALSE .)
    RPAREN          reduce using rule 41 (apat -> FALSE .)
    VIRGULA         reduce using rule 41 (apat -> FALSE .)
    RCOLCHETE       reduce using rule 41 (apat -> FALSE .)
    INT             reduce using rule 92 (aexp -> FALSE .)
    FLOAT           reduce using rule 92 (aexp -> FALSE .)
    CHAR            reduce using rule 92 (aexp -> FALSE .)
    STRING          reduce using rule 92 (aexp -> FALSE .)
    TRUE            reduce using rule 92 (aexp -> FALSE .)
    FALSE           reduce using rule 92 (aexp -> FALSE .)
    LPAREN          reduce using rule 92 (aexp -> FALSE .)
    LCOLCHETE       reduce using rule 92 (aexp -> FALSE .)
    ID              reduce using rule 92 (aexp -> FALSE .)


state 113

    (44) apat -> LPAREN . pat RPAREN
    (45) apat -> LPAREN . pattuple RPAREN
    (143) gcon -> LPAREN . RPAREN
    (145) gcon -> LPAREN . virgulalist RPAREN
    (150) var -> LPAREN . VARSYM RPAREN
    (151) qcon -> LPAREN . DOIS_PONTOS RPAREN
    (93) aexp -> LPAREN . exptuple RPAREN
    (95) aexp -> LPAREN . exp RPAREN
    (97) aexp -> LPAREN . infixexp qop RPAREN
    (98) aexp -> LPAREN . qop infixexp RPAREN
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (52) pattuple -> . pat VIRGULA pattuple
    (53) pattuple -> . pat VIRGULA pat
    (147) virgulalist -> . VIRGULA virgulalist
    (148) virgulalist -> . VIRGULA
    (99) exptuple -> . exp VIRGULA exptuple
    (100) exptuple -> . exp VIRGULA exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (156) qop -> . qvarop
    (157) qop -> . DOIS_PONTOS
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (154) qvarop -> . VARSYM
    (155) qvarop -> . CRASE ID CRASE
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN

    RPAREN          shift and go to state 59
    VARSYM          shift and go to state 190
    DOIS_PONTOS     shift and go to state 203
    VIRGULA         shift and go to state 66
    MINUS           shift and go to state 105
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    CRASE           shift and go to state 193
    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    CHAR            shift and go to state 109
    STRING          shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 113
    LCOLCHETE       shift and go to state 114
    ID              shift and go to state 13

    pat                            shift and go to state 146
    pattuple                       shift and go to state 62
    virgulalist                    shift and go to state 63
    exptuple                       shift and go to state 186
    exp                            shift and go to state 187
    infixexp                       shift and go to state 188
    qop                            shift and go to state 189
    lpat                           shift and go to state 12
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    qvarop                         shift and go to state 191
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    fexp                           shift and go to state 87
    var                            shift and go to state 106
    qcon                           shift and go to state 17
    aexp                           shift and go to state 88

state 114

    (46) apat -> LCOLCHETE . patlist RCOLCHETE
    (144) gcon -> LCOLCHETE . RCOLCHETE
    (94) aexp -> LCOLCHETE . explist RCOLCHETE
    (96) aexp -> LCOLCHETE . exp PIPE quallist RCOLCHETE
    (50) patlist -> . pat VIRGULA patlist
    (51) patlist -> . pat
    (101) explist -> . exp VIRGULA explist
    (102) explist -> . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN

    RCOLCHETE       shift and go to state 74
    MINUS           shift and go to state 105
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    CHAR            shift and go to state 109
    STRING          shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 113
    LCOLCHETE       shift and go to state 114
    ID              shift and go to state 13

    patlist                        shift and go to state 73
    explist                        shift and go to state 194
    exp                            shift and go to state 195
    pat                            shift and go to state 75
    infixexp                       shift and go to state 79
    lpat                           shift and go to state 12
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    fexp                           shift and go to state 87
    var                            shift and go to state 106
    qcon                           shift and go to state 17
    aexp                           shift and go to state 88

state 115

    (54) patop -> pat varop pat .

    EQUAL           reduce using rule 54 (patop -> pat varop pat .)
    PIPE            reduce using rule 54 (patop -> pat varop pat .)
    RPAREN          reduce using rule 54 (patop -> pat varop pat .)


state 116

    (55) patop -> pat PLUS pat .

    EQUAL           reduce using rule 55 (patop -> pat PLUS pat .)
    PIPE            reduce using rule 55 (patop -> pat PLUS pat .)
    RPAREN          reduce using rule 55 (patop -> pat PLUS pat .)


state 117

    (56) patop -> pat MINUS pat .

    EQUAL           reduce using rule 56 (patop -> pat MINUS pat .)
    PIPE            reduce using rule 56 (patop -> pat MINUS pat .)
    RPAREN          reduce using rule 56 (patop -> pat MINUS pat .)


state 118

    (57) patop -> pat MULT pat .

    EQUAL           reduce using rule 57 (patop -> pat MULT pat .)
    PIPE            reduce using rule 57 (patop -> pat MULT pat .)
    RPAREN          reduce using rule 57 (patop -> pat MULT pat .)


state 119

    (58) patop -> pat BARRA pat .

    EQUAL           reduce using rule 58 (patop -> pat BARRA pat .)
    PIPE            reduce using rule 58 (patop -> pat BARRA pat .)
    RPAREN          reduce using rule 58 (patop -> pat BARRA pat .)


state 120

    (59) patop -> pat CIRCUNFLEXO pat .

    EQUAL           reduce using rule 59 (patop -> pat CIRCUNFLEXO pat .)
    PIPE            reduce using rule 59 (patop -> pat CIRCUNFLEXO pat .)
    RPAREN          reduce using rule 59 (patop -> pat CIRCUNFLEXO pat .)


state 121

    (60) patop -> pat MAIOR_IGUAL pat .

    EQUAL           reduce using rule 60 (patop -> pat MAIOR_IGUAL pat .)
    PIPE            reduce using rule 60 (patop -> pat MAIOR_IGUAL pat .)
    RPAREN          reduce using rule 60 (patop -> pat MAIOR_IGUAL pat .)


state 122

    (61) patop -> pat MENOR_IGUAL pat .

    EQUAL           reduce using rule 61 (patop -> pat MENOR_IGUAL pat .)
    PIPE            reduce using rule 61 (patop -> pat MENOR_IGUAL pat .)
    RPAREN          reduce using rule 61 (patop -> pat MENOR_IGUAL pat .)


state 123

    (62) patop -> pat MAIOR pat .

    EQUAL           reduce using rule 62 (patop -> pat MAIOR pat .)
    PIPE            reduce using rule 62 (patop -> pat MAIOR pat .)
    RPAREN          reduce using rule 62 (patop -> pat MAIOR pat .)


state 124

    (63) patop -> pat MENOR pat .

    EQUAL           reduce using rule 63 (patop -> pat MENOR pat .)
    PIPE            reduce using rule 63 (patop -> pat MENOR pat .)
    RPAREN          reduce using rule 63 (patop -> pat MENOR pat .)


state 125

    (64) patop -> pat IGUAL pat .

    EQUAL           reduce using rule 64 (patop -> pat IGUAL pat .)
    PIPE            reduce using rule 64 (patop -> pat IGUAL pat .)
    RPAREN          reduce using rule 64 (patop -> pat IGUAL pat .)


state 126

    (65) patop -> pat DIFERENTE pat .

    EQUAL           reduce using rule 65 (patop -> pat DIFERENTE pat .)
    PIPE            reduce using rule 65 (patop -> pat DIFERENTE pat .)
    RPAREN          reduce using rule 65 (patop -> pat DIFERENTE pat .)


state 127

    (66) patop -> pat OR pat .

    EQUAL           reduce using rule 66 (patop -> pat OR pat .)
    PIPE            reduce using rule 66 (patop -> pat OR pat .)
    RPAREN          reduce using rule 66 (patop -> pat OR pat .)


state 128

    (67) patop -> pat NOT pat .

    EQUAL           reduce using rule 67 (patop -> pat NOT pat .)
    PIPE            reduce using rule 67 (patop -> pat NOT pat .)
    RPAREN          reduce using rule 67 (patop -> pat NOT pat .)


state 129

    (68) patop -> pat AND pat .

    EQUAL           reduce using rule 68 (patop -> pat AND pat .)
    PIPE            reduce using rule 68 (patop -> pat AND pat .)
    RPAREN          reduce using rule 68 (patop -> pat AND pat .)


state 130

    (153) varop -> CRASE ID . CRASE

    CRASE           shift and go to state 204


state 131

    (11) gendecl -> vars DOIS_PONTOS_DUPLO type .

    PONTO_VIRGULA   reduce using rule 11 (gendecl -> vars DOIS_PONTOS_DUPLO type .)
    $end            reduce using rule 11 (gendecl -> vars DOIS_PONTOS_DUPLO type .)
    RCHAVE          reduce using rule 11 (gendecl -> vars DOIS_PONTOS_DUPLO type .)


state 132

    (14) type -> btype .
    (15) type -> btype . SETAS type
    (16) btype -> btype . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

  ! shift/reduce conflict for SETAS resolved as shift
    PONTO_VIRGULA   reduce using rule 14 (type -> btype .)
    $end            reduce using rule 14 (type -> btype .)
    RCHAVE          reduce using rule 14 (type -> btype .)
    RPAREN          reduce using rule 14 (type -> btype .)
    VIRGULA         reduce using rule 14 (type -> btype .)
    RCOLCHETE       reduce using rule 14 (type -> btype .)
    WHERE           reduce using rule 14 (type -> btype .)
    THEN            reduce using rule 14 (type -> btype .)
    OF              reduce using rule 14 (type -> btype .)
    PIPE            reduce using rule 14 (type -> btype .)
    PLUS            reduce using rule 14 (type -> btype .)
    MINUS           reduce using rule 14 (type -> btype .)
    MULT            reduce using rule 14 (type -> btype .)
    DIV             reduce using rule 14 (type -> btype .)
    CIRCUNFLEXO     reduce using rule 14 (type -> btype .)
    MAIOR_IGUAL     reduce using rule 14 (type -> btype .)
    MENOR_IGUAL     reduce using rule 14 (type -> btype .)
    MAIOR           reduce using rule 14 (type -> btype .)
    MENOR           reduce using rule 14 (type -> btype .)
    IGUAL           reduce using rule 14 (type -> btype .)
    DIFERENTE       reduce using rule 14 (type -> btype .)
    OR              reduce using rule 14 (type -> btype .)
    NOT             reduce using rule 14 (type -> btype .)
    AND             reduce using rule 14 (type -> btype .)
    VARSYM          reduce using rule 14 (type -> btype .)
    CRASE           reduce using rule 14 (type -> btype .)
    DOIS_PONTOS_DUPLO reduce using rule 14 (type -> btype .)
    DOIS_PONTOS     reduce using rule 14 (type -> btype .)
    EQUAL           reduce using rule 14 (type -> btype .)
    ELSE            reduce using rule 14 (type -> btype .)
    SETAS           shift and go to state 205
    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

  ! SETAS           [ reduce using rule 14 (type -> btype .) ]

    atype                          shift and go to state 206

state 133

    (17) btype -> atype .

    SETAS           reduce using rule 17 (btype -> atype .)
    INT             reduce using rule 17 (btype -> atype .)
    FLOAT           reduce using rule 17 (btype -> atype .)
    BOOL            reduce using rule 17 (btype -> atype .)
    CHAR            reduce using rule 17 (btype -> atype .)
    STRING          reduce using rule 17 (btype -> atype .)
    LPAREN          reduce using rule 17 (btype -> atype .)
    LCOLCHETE       reduce using rule 17 (btype -> atype .)
    PONTO_VIRGULA   reduce using rule 17 (btype -> atype .)
    $end            reduce using rule 17 (btype -> atype .)
    RCHAVE          reduce using rule 17 (btype -> atype .)
    RPAREN          reduce using rule 17 (btype -> atype .)
    VIRGULA         reduce using rule 17 (btype -> atype .)
    RCOLCHETE       reduce using rule 17 (btype -> atype .)
    WHERE           reduce using rule 17 (btype -> atype .)
    THEN            reduce using rule 17 (btype -> atype .)
    OF              reduce using rule 17 (btype -> atype .)
    PIPE            reduce using rule 17 (btype -> atype .)
    PLUS            reduce using rule 17 (btype -> atype .)
    MINUS           reduce using rule 17 (btype -> atype .)
    MULT            reduce using rule 17 (btype -> atype .)
    DIV             reduce using rule 17 (btype -> atype .)
    CIRCUNFLEXO     reduce using rule 17 (btype -> atype .)
    MAIOR_IGUAL     reduce using rule 17 (btype -> atype .)
    MENOR_IGUAL     reduce using rule 17 (btype -> atype .)
    MAIOR           reduce using rule 17 (btype -> atype .)
    MENOR           reduce using rule 17 (btype -> atype .)
    IGUAL           reduce using rule 17 (btype -> atype .)
    DIFERENTE       reduce using rule 17 (btype -> atype .)
    OR              reduce using rule 17 (btype -> atype .)
    NOT             reduce using rule 17 (btype -> atype .)
    AND             reduce using rule 17 (btype -> atype .)
    VARSYM          reduce using rule 17 (btype -> atype .)
    CRASE           reduce using rule 17 (btype -> atype .)
    DOIS_PONTOS_DUPLO reduce using rule 17 (btype -> atype .)
    DOIS_PONTOS     reduce using rule 17 (btype -> atype .)
    EQUAL           reduce using rule 17 (btype -> atype .)
    ELSE            reduce using rule 17 (btype -> atype .)


state 134

    (18) atype -> INT .

    SETAS           reduce using rule 18 (atype -> INT .)
    INT             reduce using rule 18 (atype -> INT .)
    FLOAT           reduce using rule 18 (atype -> INT .)
    BOOL            reduce using rule 18 (atype -> INT .)
    CHAR            reduce using rule 18 (atype -> INT .)
    STRING          reduce using rule 18 (atype -> INT .)
    LPAREN          reduce using rule 18 (atype -> INT .)
    LCOLCHETE       reduce using rule 18 (atype -> INT .)
    PONTO_VIRGULA   reduce using rule 18 (atype -> INT .)
    $end            reduce using rule 18 (atype -> INT .)
    RCHAVE          reduce using rule 18 (atype -> INT .)
    RPAREN          reduce using rule 18 (atype -> INT .)
    VIRGULA         reduce using rule 18 (atype -> INT .)
    RCOLCHETE       reduce using rule 18 (atype -> INT .)
    WHERE           reduce using rule 18 (atype -> INT .)
    THEN            reduce using rule 18 (atype -> INT .)
    OF              reduce using rule 18 (atype -> INT .)
    PIPE            reduce using rule 18 (atype -> INT .)
    PLUS            reduce using rule 18 (atype -> INT .)
    MINUS           reduce using rule 18 (atype -> INT .)
    MULT            reduce using rule 18 (atype -> INT .)
    DIV             reduce using rule 18 (atype -> INT .)
    CIRCUNFLEXO     reduce using rule 18 (atype -> INT .)
    MAIOR_IGUAL     reduce using rule 18 (atype -> INT .)
    MENOR_IGUAL     reduce using rule 18 (atype -> INT .)
    MAIOR           reduce using rule 18 (atype -> INT .)
    MENOR           reduce using rule 18 (atype -> INT .)
    IGUAL           reduce using rule 18 (atype -> INT .)
    DIFERENTE       reduce using rule 18 (atype -> INT .)
    OR              reduce using rule 18 (atype -> INT .)
    NOT             reduce using rule 18 (atype -> INT .)
    AND             reduce using rule 18 (atype -> INT .)
    VARSYM          reduce using rule 18 (atype -> INT .)
    CRASE           reduce using rule 18 (atype -> INT .)
    DOIS_PONTOS_DUPLO reduce using rule 18 (atype -> INT .)
    DOIS_PONTOS     reduce using rule 18 (atype -> INT .)
    EQUAL           reduce using rule 18 (atype -> INT .)
    ELSE            reduce using rule 18 (atype -> INT .)


state 135

    (19) atype -> FLOAT .

    SETAS           reduce using rule 19 (atype -> FLOAT .)
    INT             reduce using rule 19 (atype -> FLOAT .)
    FLOAT           reduce using rule 19 (atype -> FLOAT .)
    BOOL            reduce using rule 19 (atype -> FLOAT .)
    CHAR            reduce using rule 19 (atype -> FLOAT .)
    STRING          reduce using rule 19 (atype -> FLOAT .)
    LPAREN          reduce using rule 19 (atype -> FLOAT .)
    LCOLCHETE       reduce using rule 19 (atype -> FLOAT .)
    PONTO_VIRGULA   reduce using rule 19 (atype -> FLOAT .)
    $end            reduce using rule 19 (atype -> FLOAT .)
    RCHAVE          reduce using rule 19 (atype -> FLOAT .)
    RPAREN          reduce using rule 19 (atype -> FLOAT .)
    VIRGULA         reduce using rule 19 (atype -> FLOAT .)
    RCOLCHETE       reduce using rule 19 (atype -> FLOAT .)
    WHERE           reduce using rule 19 (atype -> FLOAT .)
    THEN            reduce using rule 19 (atype -> FLOAT .)
    OF              reduce using rule 19 (atype -> FLOAT .)
    PIPE            reduce using rule 19 (atype -> FLOAT .)
    PLUS            reduce using rule 19 (atype -> FLOAT .)
    MINUS           reduce using rule 19 (atype -> FLOAT .)
    MULT            reduce using rule 19 (atype -> FLOAT .)
    DIV             reduce using rule 19 (atype -> FLOAT .)
    CIRCUNFLEXO     reduce using rule 19 (atype -> FLOAT .)
    MAIOR_IGUAL     reduce using rule 19 (atype -> FLOAT .)
    MENOR_IGUAL     reduce using rule 19 (atype -> FLOAT .)
    MAIOR           reduce using rule 19 (atype -> FLOAT .)
    MENOR           reduce using rule 19 (atype -> FLOAT .)
    IGUAL           reduce using rule 19 (atype -> FLOAT .)
    DIFERENTE       reduce using rule 19 (atype -> FLOAT .)
    OR              reduce using rule 19 (atype -> FLOAT .)
    NOT             reduce using rule 19 (atype -> FLOAT .)
    AND             reduce using rule 19 (atype -> FLOAT .)
    VARSYM          reduce using rule 19 (atype -> FLOAT .)
    CRASE           reduce using rule 19 (atype -> FLOAT .)
    DOIS_PONTOS_DUPLO reduce using rule 19 (atype -> FLOAT .)
    DOIS_PONTOS     reduce using rule 19 (atype -> FLOAT .)
    EQUAL           reduce using rule 19 (atype -> FLOAT .)
    ELSE            reduce using rule 19 (atype -> FLOAT .)


state 136

    (20) atype -> BOOL .

    SETAS           reduce using rule 20 (atype -> BOOL .)
    INT             reduce using rule 20 (atype -> BOOL .)
    FLOAT           reduce using rule 20 (atype -> BOOL .)
    BOOL            reduce using rule 20 (atype -> BOOL .)
    CHAR            reduce using rule 20 (atype -> BOOL .)
    STRING          reduce using rule 20 (atype -> BOOL .)
    LPAREN          reduce using rule 20 (atype -> BOOL .)
    LCOLCHETE       reduce using rule 20 (atype -> BOOL .)
    PONTO_VIRGULA   reduce using rule 20 (atype -> BOOL .)
    $end            reduce using rule 20 (atype -> BOOL .)
    RCHAVE          reduce using rule 20 (atype -> BOOL .)
    RPAREN          reduce using rule 20 (atype -> BOOL .)
    VIRGULA         reduce using rule 20 (atype -> BOOL .)
    RCOLCHETE       reduce using rule 20 (atype -> BOOL .)
    WHERE           reduce using rule 20 (atype -> BOOL .)
    THEN            reduce using rule 20 (atype -> BOOL .)
    OF              reduce using rule 20 (atype -> BOOL .)
    PIPE            reduce using rule 20 (atype -> BOOL .)
    PLUS            reduce using rule 20 (atype -> BOOL .)
    MINUS           reduce using rule 20 (atype -> BOOL .)
    MULT            reduce using rule 20 (atype -> BOOL .)
    DIV             reduce using rule 20 (atype -> BOOL .)
    CIRCUNFLEXO     reduce using rule 20 (atype -> BOOL .)
    MAIOR_IGUAL     reduce using rule 20 (atype -> BOOL .)
    MENOR_IGUAL     reduce using rule 20 (atype -> BOOL .)
    MAIOR           reduce using rule 20 (atype -> BOOL .)
    MENOR           reduce using rule 20 (atype -> BOOL .)
    IGUAL           reduce using rule 20 (atype -> BOOL .)
    DIFERENTE       reduce using rule 20 (atype -> BOOL .)
    OR              reduce using rule 20 (atype -> BOOL .)
    NOT             reduce using rule 20 (atype -> BOOL .)
    AND             reduce using rule 20 (atype -> BOOL .)
    VARSYM          reduce using rule 20 (atype -> BOOL .)
    CRASE           reduce using rule 20 (atype -> BOOL .)
    DOIS_PONTOS_DUPLO reduce using rule 20 (atype -> BOOL .)
    DOIS_PONTOS     reduce using rule 20 (atype -> BOOL .)
    EQUAL           reduce using rule 20 (atype -> BOOL .)
    ELSE            reduce using rule 20 (atype -> BOOL .)


state 137

    (21) atype -> CHAR .

    SETAS           reduce using rule 21 (atype -> CHAR .)
    INT             reduce using rule 21 (atype -> CHAR .)
    FLOAT           reduce using rule 21 (atype -> CHAR .)
    BOOL            reduce using rule 21 (atype -> CHAR .)
    CHAR            reduce using rule 21 (atype -> CHAR .)
    STRING          reduce using rule 21 (atype -> CHAR .)
    LPAREN          reduce using rule 21 (atype -> CHAR .)
    LCOLCHETE       reduce using rule 21 (atype -> CHAR .)
    PONTO_VIRGULA   reduce using rule 21 (atype -> CHAR .)
    $end            reduce using rule 21 (atype -> CHAR .)
    RCHAVE          reduce using rule 21 (atype -> CHAR .)
    RPAREN          reduce using rule 21 (atype -> CHAR .)
    VIRGULA         reduce using rule 21 (atype -> CHAR .)
    RCOLCHETE       reduce using rule 21 (atype -> CHAR .)
    WHERE           reduce using rule 21 (atype -> CHAR .)
    THEN            reduce using rule 21 (atype -> CHAR .)
    OF              reduce using rule 21 (atype -> CHAR .)
    PIPE            reduce using rule 21 (atype -> CHAR .)
    PLUS            reduce using rule 21 (atype -> CHAR .)
    MINUS           reduce using rule 21 (atype -> CHAR .)
    MULT            reduce using rule 21 (atype -> CHAR .)
    DIV             reduce using rule 21 (atype -> CHAR .)
    CIRCUNFLEXO     reduce using rule 21 (atype -> CHAR .)
    MAIOR_IGUAL     reduce using rule 21 (atype -> CHAR .)
    MENOR_IGUAL     reduce using rule 21 (atype -> CHAR .)
    MAIOR           reduce using rule 21 (atype -> CHAR .)
    MENOR           reduce using rule 21 (atype -> CHAR .)
    IGUAL           reduce using rule 21 (atype -> CHAR .)
    DIFERENTE       reduce using rule 21 (atype -> CHAR .)
    OR              reduce using rule 21 (atype -> CHAR .)
    NOT             reduce using rule 21 (atype -> CHAR .)
    AND             reduce using rule 21 (atype -> CHAR .)
    VARSYM          reduce using rule 21 (atype -> CHAR .)
    CRASE           reduce using rule 21 (atype -> CHAR .)
    DOIS_PONTOS_DUPLO reduce using rule 21 (atype -> CHAR .)
    DOIS_PONTOS     reduce using rule 21 (atype -> CHAR .)
    EQUAL           reduce using rule 21 (atype -> CHAR .)
    ELSE            reduce using rule 21 (atype -> CHAR .)


state 138

    (22) atype -> STRING .

    SETAS           reduce using rule 22 (atype -> STRING .)
    INT             reduce using rule 22 (atype -> STRING .)
    FLOAT           reduce using rule 22 (atype -> STRING .)
    BOOL            reduce using rule 22 (atype -> STRING .)
    CHAR            reduce using rule 22 (atype -> STRING .)
    STRING          reduce using rule 22 (atype -> STRING .)
    LPAREN          reduce using rule 22 (atype -> STRING .)
    LCOLCHETE       reduce using rule 22 (atype -> STRING .)
    PONTO_VIRGULA   reduce using rule 22 (atype -> STRING .)
    $end            reduce using rule 22 (atype -> STRING .)
    RCHAVE          reduce using rule 22 (atype -> STRING .)
    RPAREN          reduce using rule 22 (atype -> STRING .)
    VIRGULA         reduce using rule 22 (atype -> STRING .)
    RCOLCHETE       reduce using rule 22 (atype -> STRING .)
    WHERE           reduce using rule 22 (atype -> STRING .)
    THEN            reduce using rule 22 (atype -> STRING .)
    OF              reduce using rule 22 (atype -> STRING .)
    PIPE            reduce using rule 22 (atype -> STRING .)
    PLUS            reduce using rule 22 (atype -> STRING .)
    MINUS           reduce using rule 22 (atype -> STRING .)
    MULT            reduce using rule 22 (atype -> STRING .)
    DIV             reduce using rule 22 (atype -> STRING .)
    CIRCUNFLEXO     reduce using rule 22 (atype -> STRING .)
    MAIOR_IGUAL     reduce using rule 22 (atype -> STRING .)
    MENOR_IGUAL     reduce using rule 22 (atype -> STRING .)
    MAIOR           reduce using rule 22 (atype -> STRING .)
    MENOR           reduce using rule 22 (atype -> STRING .)
    IGUAL           reduce using rule 22 (atype -> STRING .)
    DIFERENTE       reduce using rule 22 (atype -> STRING .)
    OR              reduce using rule 22 (atype -> STRING .)
    NOT             reduce using rule 22 (atype -> STRING .)
    AND             reduce using rule 22 (atype -> STRING .)
    VARSYM          reduce using rule 22 (atype -> STRING .)
    CRASE           reduce using rule 22 (atype -> STRING .)
    DOIS_PONTOS_DUPLO reduce using rule 22 (atype -> STRING .)
    DOIS_PONTOS     reduce using rule 22 (atype -> STRING .)
    EQUAL           reduce using rule 22 (atype -> STRING .)
    ELSE            reduce using rule 22 (atype -> STRING .)


state 139

    (23) atype -> LPAREN . type RPAREN
    (24) atype -> LPAREN . typetuple RPAREN
    (14) type -> . btype
    (15) type -> . btype SETAS type
    (26) typetuple -> . type VIRGULA typetuple
    (27) typetuple -> . type
    (16) btype -> . btype atype
    (17) btype -> . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

    type                           shift and go to state 207
    typetuple                      shift and go to state 208
    btype                          shift and go to state 132
    atype                          shift and go to state 133

state 140

    (25) atype -> LCOLCHETE . type RCOLCHETE
    (14) type -> . btype
    (15) type -> . btype SETAS type
    (16) btype -> . btype atype
    (17) btype -> . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

    type                           shift and go to state 209
    btype                          shift and go to state 132
    atype                          shift and go to state 133

state 141

    (12) vars -> var .
    (13) vars -> var . VIRGULA vars

    DOIS_PONTOS_DUPLO reduce using rule 12 (vars -> var .)
    VIRGULA         shift and go to state 53


state 142

    (13) vars -> var VIRGULA vars .

    DOIS_PONTOS_DUPLO reduce using rule 13 (vars -> var VIRGULA vars .)


state 143

    (150) var -> LPAREN . VARSYM RPAREN

    VARSYM          shift and go to state 60


state 144

    (34) apat -> var ARROBA apat .

    DOIS_PONTOS     reduce using rule 34 (apat -> var ARROBA apat .)
    PLUS            reduce using rule 34 (apat -> var ARROBA apat .)
    MINUS           reduce using rule 34 (apat -> var ARROBA apat .)
    MULT            reduce using rule 34 (apat -> var ARROBA apat .)
    BARRA           reduce using rule 34 (apat -> var ARROBA apat .)
    CIRCUNFLEXO     reduce using rule 34 (apat -> var ARROBA apat .)
    MAIOR_IGUAL     reduce using rule 34 (apat -> var ARROBA apat .)
    MENOR_IGUAL     reduce using rule 34 (apat -> var ARROBA apat .)
    MAIOR           reduce using rule 34 (apat -> var ARROBA apat .)
    MENOR           reduce using rule 34 (apat -> var ARROBA apat .)
    IGUAL           reduce using rule 34 (apat -> var ARROBA apat .)
    DIFERENTE       reduce using rule 34 (apat -> var ARROBA apat .)
    OR              reduce using rule 34 (apat -> var ARROBA apat .)
    NOT             reduce using rule 34 (apat -> var ARROBA apat .)
    AND             reduce using rule 34 (apat -> var ARROBA apat .)
    EQUAL           reduce using rule 34 (apat -> var ARROBA apat .)
    VARSYM          reduce using rule 34 (apat -> var ARROBA apat .)
    CRASE           reduce using rule 34 (apat -> var ARROBA apat .)
    PIPE            reduce using rule 34 (apat -> var ARROBA apat .)
    INT             reduce using rule 34 (apat -> var ARROBA apat .)
    FLOAT           reduce using rule 34 (apat -> var ARROBA apat .)
    CHAR            reduce using rule 34 (apat -> var ARROBA apat .)
    STRING          reduce using rule 34 (apat -> var ARROBA apat .)
    TRUE            reduce using rule 34 (apat -> var ARROBA apat .)
    FALSE           reduce using rule 34 (apat -> var ARROBA apat .)
    UNDERLINE       reduce using rule 34 (apat -> var ARROBA apat .)
    LPAREN          reduce using rule 34 (apat -> var ARROBA apat .)
    LCOLCHETE       reduce using rule 34 (apat -> var ARROBA apat .)
    ID              reduce using rule 34 (apat -> var ARROBA apat .)
    RPAREN          reduce using rule 34 (apat -> var ARROBA apat .)
    VIRGULA         reduce using rule 34 (apat -> var ARROBA apat .)
    RCOLCHETE       reduce using rule 34 (apat -> var ARROBA apat .)
    SETAS           reduce using rule 34 (apat -> var ARROBA apat .)
    RCHAVE          reduce using rule 34 (apat -> var ARROBA apat .)


state 145

    (31) apatlist -> apat apatlist .

    EQUAL           reduce using rule 31 (apatlist -> apat apatlist .)
    PIPE            reduce using rule 31 (apatlist -> apat apatlist .)
    DOIS_PONTOS     reduce using rule 31 (apatlist -> apat apatlist .)
    PLUS            reduce using rule 31 (apatlist -> apat apatlist .)
    MINUS           reduce using rule 31 (apatlist -> apat apatlist .)
    MULT            reduce using rule 31 (apatlist -> apat apatlist .)
    BARRA           reduce using rule 31 (apatlist -> apat apatlist .)
    CIRCUNFLEXO     reduce using rule 31 (apatlist -> apat apatlist .)
    MAIOR_IGUAL     reduce using rule 31 (apatlist -> apat apatlist .)
    MENOR_IGUAL     reduce using rule 31 (apatlist -> apat apatlist .)
    MAIOR           reduce using rule 31 (apatlist -> apat apatlist .)
    MENOR           reduce using rule 31 (apatlist -> apat apatlist .)
    IGUAL           reduce using rule 31 (apatlist -> apat apatlist .)
    DIFERENTE       reduce using rule 31 (apatlist -> apat apatlist .)
    OR              reduce using rule 31 (apatlist -> apat apatlist .)
    NOT             reduce using rule 31 (apatlist -> apat apatlist .)
    AND             reduce using rule 31 (apatlist -> apat apatlist .)
    VARSYM          reduce using rule 31 (apatlist -> apat apatlist .)
    CRASE           reduce using rule 31 (apatlist -> apat apatlist .)
    RPAREN          reduce using rule 31 (apatlist -> apat apatlist .)
    VIRGULA         reduce using rule 31 (apatlist -> apat apatlist .)
    RCOLCHETE       reduce using rule 31 (apatlist -> apat apatlist .)
    SETAS           reduce using rule 31 (apatlist -> apat apatlist .)
    RCHAVE          reduce using rule 31 (apatlist -> apat apatlist .)


state 146

    (44) apat -> LPAREN pat . RPAREN
    (52) pattuple -> pat . VIRGULA pattuple
    (53) pattuple -> pat . VIRGULA pat

    RPAREN          shift and go to state 149
    VIRGULA         shift and go to state 150


state 147

    (30) funlhs -> LPAREN funlhs RPAREN . apatlist
    (31) apatlist -> . apat apatlist
    (32) apatlist -> . apat
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 57
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    apatlist                       shift and go to state 210
    apat                           shift and go to state 55
    var                            shift and go to state 51
    qcon                           shift and go to state 17
    gcon                           shift and go to state 56

state 148

    (150) var -> LPAREN VARSYM RPAREN .

    VIRGULA         reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    ARROBA          reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    INT             reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    FLOAT           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    CHAR            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    STRING          reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    TRUE            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    FALSE           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    UNDERLINE       reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    LPAREN          reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    LCOLCHETE       reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    ID              reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    DOIS_PONTOS     reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    PLUS            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    MINUS           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    MULT            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    BARRA           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    CIRCUNFLEXO     reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    MAIOR_IGUAL     reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    MENOR_IGUAL     reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    MAIOR           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    MENOR           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    IGUAL           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    DIFERENTE       reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    OR              reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    NOT             reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    AND             reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    EQUAL           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    VARSYM          reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    CRASE           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    PIPE            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    RPAREN          reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    RCOLCHETE       reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    SETAS           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    RCHAVE          reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    DIV             reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    WHERE           reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    THEN            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    OF              reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    ELSE            reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)
    PONTO_VIRGULA   reduce using rule 150 (var -> LPAREN VARSYM RPAREN .)


state 149

    (44) apat -> LPAREN pat RPAREN .

    DOIS_PONTOS     reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    PLUS            reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    MINUS           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    MULT            reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    BARRA           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    CIRCUNFLEXO     reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    MAIOR_IGUAL     reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    MENOR_IGUAL     reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    MAIOR           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    MENOR           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    IGUAL           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    DIFERENTE       reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    OR              reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    NOT             reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    AND             reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    EQUAL           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    VARSYM          reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    CRASE           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    PIPE            reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    INT             reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    FLOAT           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    CHAR            reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    STRING          reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    TRUE            reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    FALSE           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    UNDERLINE       reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    LPAREN          reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    LCOLCHETE       reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    ID              reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    RPAREN          reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    VIRGULA         reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    RCOLCHETE       reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    SETAS           reduce using rule 44 (apat -> LPAREN pat RPAREN .)
    RCHAVE          reduce using rule 44 (apat -> LPAREN pat RPAREN .)


state 150

    (52) pattuple -> pat VIRGULA . pattuple
    (53) pattuple -> pat VIRGULA . pat
    (52) pattuple -> . pat VIRGULA pattuple
    (53) pattuple -> . pat VIRGULA pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 211
    pattuple                       shift and go to state 212
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 151

    (45) apat -> LPAREN pattuple RPAREN .

    DOIS_PONTOS     reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    PLUS            reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    MINUS           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    MULT            reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    BARRA           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    CIRCUNFLEXO     reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    MAIOR_IGUAL     reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    MENOR_IGUAL     reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    MAIOR           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    MENOR           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    IGUAL           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    DIFERENTE       reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    OR              reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    NOT             reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    AND             reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    EQUAL           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    VARSYM          reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    CRASE           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    PIPE            reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    INT             reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    FLOAT           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    CHAR            reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    STRING          reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    TRUE            reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    FALSE           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    UNDERLINE       reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    LPAREN          reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    LCOLCHETE       reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    ID              reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    RPAREN          reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    VIRGULA         reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    RCOLCHETE       reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    SETAS           reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)
    RCHAVE          reduce using rule 45 (apat -> LPAREN pattuple RPAREN .)


state 152

    (145) gcon -> LPAREN virgulalist RPAREN .

    INT             reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    FLOAT           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    CHAR            reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    STRING          reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    TRUE            reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    FALSE           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    UNDERLINE       reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    LPAREN          reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    LCOLCHETE       reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    ID              reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    DOIS_PONTOS     reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    PLUS            reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    MINUS           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    MULT            reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    BARRA           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    CIRCUNFLEXO     reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    MAIOR_IGUAL     reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    MENOR_IGUAL     reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    MAIOR           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    MENOR           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    IGUAL           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    DIFERENTE       reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    OR              reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    NOT             reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    AND             reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    EQUAL           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    VARSYM          reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    CRASE           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    PIPE            reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    RPAREN          reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    VIRGULA         reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    RCOLCHETE       reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    SETAS           reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)
    RCHAVE          reduce using rule 145 (gcon -> LPAREN virgulalist RPAREN .)


state 153

    (151) qcon -> LPAREN DOIS_PONTOS RPAREN .

    LCHAVE          reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    INT             reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    FLOAT           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    CHAR            reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    STRING          reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    TRUE            reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    FALSE           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    UNDERLINE       reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    LPAREN          reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    LCOLCHETE       reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    ID              reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    DOIS_PONTOS     reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    PLUS            reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    MINUS           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    MULT            reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    BARRA           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    CIRCUNFLEXO     reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    MAIOR_IGUAL     reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    MENOR_IGUAL     reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    MAIOR           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    MENOR           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    IGUAL           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    DIFERENTE       reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    OR              reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    NOT             reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    AND             reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    EQUAL           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    VARSYM          reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    CRASE           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    PIPE            reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    RPAREN          reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    VIRGULA         reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    RCOLCHETE       reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    SETAS           reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)
    RCHAVE          reduce using rule 151 (qcon -> LPAREN DOIS_PONTOS RPAREN .)


state 154

    (147) virgulalist -> VIRGULA virgulalist .

    RPAREN          reduce using rule 147 (virgulalist -> VIRGULA virgulalist .)


state 155

    (69) pat -> lpat DOIS_PONTOS pat .

    PLUS            reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    MINUS           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    MULT            reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    BARRA           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    CIRCUNFLEXO     reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    MAIOR_IGUAL     reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    MENOR_IGUAL     reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    MAIOR           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    MENOR           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    IGUAL           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    DIFERENTE       reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    OR              reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    NOT             reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    AND             reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    EQUAL           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    VARSYM          reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    CRASE           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    PIPE            reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    RPAREN          reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    VIRGULA         reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    RCOLCHETE       reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    SETAS           reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)
    RCHAVE          reduce using rule 69 (pat -> lpat DOIS_PONTOS pat .)


state 156

    (35) apat -> qcon LCHAVE fpatlist . RCHAVE

    RCHAVE          shift and go to state 213


state 157

    (47) fpatlist -> fpat . VIRGULA fpatlist
    (48) fpatlist -> fpat .

    VIRGULA         shift and go to state 214
    RCHAVE          reduce using rule 48 (fpatlist -> fpat .)


state 158

    (49) fpat -> var . EQUAL pat

    EQUAL           shift and go to state 215


state 159

    (46) apat -> LCOLCHETE patlist RCOLCHETE .

    DOIS_PONTOS     reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    PLUS            reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    MINUS           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    MULT            reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    BARRA           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    CIRCUNFLEXO     reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    MAIOR_IGUAL     reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    MENOR_IGUAL     reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    MAIOR           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    MENOR           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    IGUAL           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    DIFERENTE       reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    OR              reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    NOT             reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    AND             reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    EQUAL           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    VARSYM          reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    CRASE           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    PIPE            reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    INT             reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    FLOAT           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    CHAR            reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    STRING          reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    TRUE            reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    FALSE           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    UNDERLINE       reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    LPAREN          reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    LCOLCHETE       reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    ID              reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    RPAREN          reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    VIRGULA         reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    RCOLCHETE       reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    SETAS           reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)
    RCHAVE          reduce using rule 46 (apat -> LCOLCHETE patlist RCOLCHETE .)


state 160

    (50) patlist -> pat VIRGULA . patlist
    (50) patlist -> . pat VIRGULA patlist
    (51) patlist -> . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    pat                            shift and go to state 75
    patlist                        shift and go to state 216
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 161

    (76) rhs -> EQUAL exp WHERE . decls
    (5) decls -> . LCHAVE declslist RCHAVE

    LCHAVE          shift and go to state 181

    decls                          shift and go to state 217

state 162

    (103) exp -> infixexp DOIS_PONTOS_DUPLO . type
    (14) type -> . btype
    (15) type -> . btype SETAS type
    (16) btype -> . btype atype
    (17) btype -> . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

    type                           shift and go to state 218
    btype                          shift and go to state 132
    atype                          shift and go to state 133

state 163

    (108) expop -> infixexp varop . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 219
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 164

    (109) expop -> infixexp PLUS . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 220
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 165

    (110) expop -> infixexp MINUS . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 221
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 166

    (111) expop -> infixexp MULT . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 222
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 167

    (112) expop -> infixexp DIV . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 223
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 168

    (113) expop -> infixexp CIRCUNFLEXO . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 224
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 169

    (114) expop -> infixexp MAIOR_IGUAL . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 225
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 170

    (115) expop -> infixexp MENOR_IGUAL . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 226
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 171

    (116) expop -> infixexp MAIOR . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 227
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 172

    (117) expop -> infixexp MENOR . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 228
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 173

    (118) expop -> infixexp IGUAL . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 229
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 174

    (119) expop -> infixexp DIFERENTE . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 230
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 175

    (120) expop -> infixexp OR . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 231
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 176

    (121) expop -> infixexp NOT . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 232
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 177

    (122) expop -> infixexp AND . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 233
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 178

    (106) infixexp -> MINUS infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 106 (infixexp -> MINUS infixexp .)
    PLUS            reduce using rule 106 (infixexp -> MINUS infixexp .)
    MINUS           reduce using rule 106 (infixexp -> MINUS infixexp .)
    DIV             reduce using rule 106 (infixexp -> MINUS infixexp .)
    MAIOR_IGUAL     reduce using rule 106 (infixexp -> MINUS infixexp .)
    MENOR_IGUAL     reduce using rule 106 (infixexp -> MINUS infixexp .)
    MAIOR           reduce using rule 106 (infixexp -> MINUS infixexp .)
    MENOR           reduce using rule 106 (infixexp -> MINUS infixexp .)
    IGUAL           reduce using rule 106 (infixexp -> MINUS infixexp .)
    DIFERENTE       reduce using rule 106 (infixexp -> MINUS infixexp .)
    OR              reduce using rule 106 (infixexp -> MINUS infixexp .)
    NOT             reduce using rule 106 (infixexp -> MINUS infixexp .)
    AND             reduce using rule 106 (infixexp -> MINUS infixexp .)
    WHERE           reduce using rule 106 (infixexp -> MINUS infixexp .)
    VIRGULA         reduce using rule 106 (infixexp -> MINUS infixexp .)
    EQUAL           reduce using rule 106 (infixexp -> MINUS infixexp .)
    SETAS           reduce using rule 106 (infixexp -> MINUS infixexp .)
    THEN            reduce using rule 106 (infixexp -> MINUS infixexp .)
    OF              reduce using rule 106 (infixexp -> MINUS infixexp .)
    DOIS_PONTOS     reduce using rule 106 (infixexp -> MINUS infixexp .)
    RPAREN          reduce using rule 106 (infixexp -> MINUS infixexp .)
    PIPE            reduce using rule 106 (infixexp -> MINUS infixexp .)
    RCOLCHETE       reduce using rule 106 (infixexp -> MINUS infixexp .)
    ELSE            reduce using rule 106 (infixexp -> MINUS infixexp .)
    PONTO_VIRGULA   reduce using rule 106 (infixexp -> MINUS infixexp .)
    RCHAVE          reduce using rule 106 (infixexp -> MINUS infixexp .)
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! MULT            [ reduce using rule 106 (infixexp -> MINUS infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 106 (infixexp -> MINUS infixexp .) ]
  ! VARSYM          [ reduce using rule 106 (infixexp -> MINUS infixexp .) ]
  ! CRASE           [ reduce using rule 106 (infixexp -> MINUS infixexp .) ]
  ! PLUS            [ shift and go to state 164 ]
  ! MINUS           [ shift and go to state 165 ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 179

    (123) lexp -> BARRA_INVERTIDA apatlist . SETAS exp

    SETAS           shift and go to state 234


state 180

    (124) lexp -> LET decls . IN exp

    IN              shift and go to state 235


state 181

    (5) decls -> LCHAVE . declslist RCHAVE
    (6) declslist -> . decl PONTO_VIRGULA declslist
    (7) declslist -> . decl
    (8) decl -> . gendecl
    (9) decl -> . funlhs rhs
    (10) decl -> . pat rhs
    (11) gendecl -> . vars DOIS_PONTOS_DUPLO type
    (28) funlhs -> . var apatlist
    (29) funlhs -> . patop
    (30) funlhs -> . LPAREN funlhs RPAREN apatlist
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (12) vars -> . var
    (13) vars -> . var VIRGULA vars
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (54) patop -> . pat varop pat
    (55) patop -> . pat PLUS pat
    (56) patop -> . pat MINUS pat
    (57) patop -> . pat MULT pat
    (58) patop -> . pat BARRA pat
    (59) patop -> . pat CIRCUNFLEXO pat
    (60) patop -> . pat MAIOR_IGUAL pat
    (61) patop -> . pat MENOR_IGUAL pat
    (62) patop -> . pat MAIOR pat
    (63) patop -> . pat MENOR pat
    (64) patop -> . pat IGUAL pat
    (65) patop -> . pat DIFERENTE pat
    (66) patop -> . pat OR pat
    (67) patop -> . pat NOT pat
    (68) patop -> . pat AND pat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    LPAREN          shift and go to state 11
    ID              shift and go to state 13
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LCOLCHETE       shift and go to state 25

    declslist                      shift and go to state 236
    decl                           shift and go to state 237
    gendecl                        shift and go to state 5
    funlhs                         shift and go to state 6
    pat                            shift and go to state 7
    vars                           shift and go to state 8
    var                            shift and go to state 9
    patop                          shift and go to state 10
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    qcon                           shift and go to state 17

state 182

    (125) lexp -> IF exp . THEN exp ELSE exp

    THEN            shift and go to state 238


state 183

    (126) lexp -> CASE exp . OF LCHAVE alts RCHAVE

    OF              shift and go to state 239


state 184

    (128) fexp -> aexp aexp .
    (128) fexp -> aexp . aexp
    (129) fexp -> aexp . fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    DOIS_PONTOS_DUPLO reduce using rule 128 (fexp -> aexp aexp .)
    PLUS            reduce using rule 128 (fexp -> aexp aexp .)
    MINUS           reduce using rule 128 (fexp -> aexp aexp .)
    MULT            reduce using rule 128 (fexp -> aexp aexp .)
    DIV             reduce using rule 128 (fexp -> aexp aexp .)
    CIRCUNFLEXO     reduce using rule 128 (fexp -> aexp aexp .)
    MAIOR_IGUAL     reduce using rule 128 (fexp -> aexp aexp .)
    MENOR_IGUAL     reduce using rule 128 (fexp -> aexp aexp .)
    MAIOR           reduce using rule 128 (fexp -> aexp aexp .)
    MENOR           reduce using rule 128 (fexp -> aexp aexp .)
    IGUAL           reduce using rule 128 (fexp -> aexp aexp .)
    DIFERENTE       reduce using rule 128 (fexp -> aexp aexp .)
    OR              reduce using rule 128 (fexp -> aexp aexp .)
    NOT             reduce using rule 128 (fexp -> aexp aexp .)
    AND             reduce using rule 128 (fexp -> aexp aexp .)
    VARSYM          reduce using rule 128 (fexp -> aexp aexp .)
    CRASE           reduce using rule 128 (fexp -> aexp aexp .)
    WHERE           reduce using rule 128 (fexp -> aexp aexp .)
    VIRGULA         reduce using rule 128 (fexp -> aexp aexp .)
    EQUAL           reduce using rule 128 (fexp -> aexp aexp .)
    SETAS           reduce using rule 128 (fexp -> aexp aexp .)
    THEN            reduce using rule 128 (fexp -> aexp aexp .)
    OF              reduce using rule 128 (fexp -> aexp aexp .)
    DOIS_PONTOS     reduce using rule 128 (fexp -> aexp aexp .)
    RPAREN          reduce using rule 128 (fexp -> aexp aexp .)
    PIPE            reduce using rule 128 (fexp -> aexp aexp .)
    RCOLCHETE       reduce using rule 128 (fexp -> aexp aexp .)
    ELSE            reduce using rule 128 (fexp -> aexp aexp .)
    PONTO_VIRGULA   reduce using rule 128 (fexp -> aexp aexp .)
    RCHAVE          reduce using rule 128 (fexp -> aexp aexp .)
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    aexp                           shift and go to state 184
    fexp                           shift and go to state 185
    var                            shift and go to state 89

state 185

    (129) fexp -> aexp fexp .

    DOIS_PONTOS_DUPLO reduce using rule 129 (fexp -> aexp fexp .)
    PLUS            reduce using rule 129 (fexp -> aexp fexp .)
    MINUS           reduce using rule 129 (fexp -> aexp fexp .)
    MULT            reduce using rule 129 (fexp -> aexp fexp .)
    DIV             reduce using rule 129 (fexp -> aexp fexp .)
    CIRCUNFLEXO     reduce using rule 129 (fexp -> aexp fexp .)
    MAIOR_IGUAL     reduce using rule 129 (fexp -> aexp fexp .)
    MENOR_IGUAL     reduce using rule 129 (fexp -> aexp fexp .)
    MAIOR           reduce using rule 129 (fexp -> aexp fexp .)
    MENOR           reduce using rule 129 (fexp -> aexp fexp .)
    IGUAL           reduce using rule 129 (fexp -> aexp fexp .)
    DIFERENTE       reduce using rule 129 (fexp -> aexp fexp .)
    OR              reduce using rule 129 (fexp -> aexp fexp .)
    NOT             reduce using rule 129 (fexp -> aexp fexp .)
    AND             reduce using rule 129 (fexp -> aexp fexp .)
    VARSYM          reduce using rule 129 (fexp -> aexp fexp .)
    CRASE           reduce using rule 129 (fexp -> aexp fexp .)
    WHERE           reduce using rule 129 (fexp -> aexp fexp .)
    VIRGULA         reduce using rule 129 (fexp -> aexp fexp .)
    EQUAL           reduce using rule 129 (fexp -> aexp fexp .)
    SETAS           reduce using rule 129 (fexp -> aexp fexp .)
    THEN            reduce using rule 129 (fexp -> aexp fexp .)
    OF              reduce using rule 129 (fexp -> aexp fexp .)
    DOIS_PONTOS     reduce using rule 129 (fexp -> aexp fexp .)
    RPAREN          reduce using rule 129 (fexp -> aexp fexp .)
    PIPE            reduce using rule 129 (fexp -> aexp fexp .)
    RCOLCHETE       reduce using rule 129 (fexp -> aexp fexp .)
    ELSE            reduce using rule 129 (fexp -> aexp fexp .)
    PONTO_VIRGULA   reduce using rule 129 (fexp -> aexp fexp .)
    RCHAVE          reduce using rule 129 (fexp -> aexp fexp .)


state 186

    (93) aexp -> LPAREN exptuple . RPAREN

    RPAREN          shift and go to state 240


state 187

    (95) aexp -> LPAREN exp . RPAREN
    (99) exptuple -> exp . VIRGULA exptuple
    (100) exptuple -> exp . VIRGULA exp

    RPAREN          shift and go to state 241
    VIRGULA         shift and go to state 242


state 188

    (97) aexp -> LPAREN infixexp . qop RPAREN
    (103) exp -> infixexp . DOIS_PONTOS_DUPLO type
    (104) exp -> infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (156) qop -> . qvarop
    (157) qop -> . DOIS_PONTOS
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE
    (154) qvarop -> . VARSYM
    (155) qvarop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO shift and go to state 162
    RPAREN          reduce using rule 104 (exp -> infixexp .)
    VIRGULA         reduce using rule 104 (exp -> infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    DOIS_PONTOS     shift and go to state 192
    VARSYM          shift and go to state 244
    CRASE           shift and go to state 245

    qop                            shift and go to state 243
    varop                          shift and go to state 163
    qvarop                         shift and go to state 191

state 189

    (98) aexp -> LPAREN qop . infixexp RPAREN
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 246
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 190

    (150) var -> LPAREN VARSYM . RPAREN
    (154) qvarop -> VARSYM .

    RPAREN          shift and go to state 148
    MINUS           reduce using rule 154 (qvarop -> VARSYM .)
    BARRA_INVERTIDA reduce using rule 154 (qvarop -> VARSYM .)
    LET             reduce using rule 154 (qvarop -> VARSYM .)
    IF              reduce using rule 154 (qvarop -> VARSYM .)
    CASE            reduce using rule 154 (qvarop -> VARSYM .)
    INT             reduce using rule 154 (qvarop -> VARSYM .)
    FLOAT           reduce using rule 154 (qvarop -> VARSYM .)
    CHAR            reduce using rule 154 (qvarop -> VARSYM .)
    STRING          reduce using rule 154 (qvarop -> VARSYM .)
    TRUE            reduce using rule 154 (qvarop -> VARSYM .)
    FALSE           reduce using rule 154 (qvarop -> VARSYM .)
    LPAREN          reduce using rule 154 (qvarop -> VARSYM .)
    LCOLCHETE       reduce using rule 154 (qvarop -> VARSYM .)
    ID              reduce using rule 154 (qvarop -> VARSYM .)


state 191

    (156) qop -> qvarop .

    MINUS           reduce using rule 156 (qop -> qvarop .)
    BARRA_INVERTIDA reduce using rule 156 (qop -> qvarop .)
    LET             reduce using rule 156 (qop -> qvarop .)
    IF              reduce using rule 156 (qop -> qvarop .)
    CASE            reduce using rule 156 (qop -> qvarop .)
    INT             reduce using rule 156 (qop -> qvarop .)
    FLOAT           reduce using rule 156 (qop -> qvarop .)
    CHAR            reduce using rule 156 (qop -> qvarop .)
    STRING          reduce using rule 156 (qop -> qvarop .)
    TRUE            reduce using rule 156 (qop -> qvarop .)
    FALSE           reduce using rule 156 (qop -> qvarop .)
    LPAREN          reduce using rule 156 (qop -> qvarop .)
    LCOLCHETE       reduce using rule 156 (qop -> qvarop .)
    ID              reduce using rule 156 (qop -> qvarop .)
    RPAREN          reduce using rule 156 (qop -> qvarop .)


state 192

    (157) qop -> DOIS_PONTOS .

    MINUS           reduce using rule 157 (qop -> DOIS_PONTOS .)
    BARRA_INVERTIDA reduce using rule 157 (qop -> DOIS_PONTOS .)
    LET             reduce using rule 157 (qop -> DOIS_PONTOS .)
    IF              reduce using rule 157 (qop -> DOIS_PONTOS .)
    CASE            reduce using rule 157 (qop -> DOIS_PONTOS .)
    INT             reduce using rule 157 (qop -> DOIS_PONTOS .)
    FLOAT           reduce using rule 157 (qop -> DOIS_PONTOS .)
    CHAR            reduce using rule 157 (qop -> DOIS_PONTOS .)
    STRING          reduce using rule 157 (qop -> DOIS_PONTOS .)
    TRUE            reduce using rule 157 (qop -> DOIS_PONTOS .)
    FALSE           reduce using rule 157 (qop -> DOIS_PONTOS .)
    LPAREN          reduce using rule 157 (qop -> DOIS_PONTOS .)
    LCOLCHETE       reduce using rule 157 (qop -> DOIS_PONTOS .)
    ID              reduce using rule 157 (qop -> DOIS_PONTOS .)
    RPAREN          reduce using rule 157 (qop -> DOIS_PONTOS .)


state 193

    (155) qvarop -> CRASE . ID CRASE

    ID              shift and go to state 247


state 194

    (94) aexp -> LCOLCHETE explist . RCOLCHETE

    RCOLCHETE       shift and go to state 248


state 195

    (96) aexp -> LCOLCHETE exp . PIPE quallist RCOLCHETE
    (101) explist -> exp . VIRGULA explist
    (102) explist -> exp .

    PIPE            shift and go to state 249
    VIRGULA         shift and go to state 250
    RCOLCHETE       reduce using rule 102 (explist -> exp .)


state 196

    (77) rhs -> gdrhs WHERE decls .

    PONTO_VIRGULA   reduce using rule 77 (rhs -> gdrhs WHERE decls .)
    $end            reduce using rule 77 (rhs -> gdrhs WHERE decls .)
    RCHAVE          reduce using rule 77 (rhs -> gdrhs WHERE decls .)


state 197

    (78) gdrhs -> guards EQUAL exp .
    (79) gdrhs -> guards EQUAL exp . gdrhs
    (78) gdrhs -> . guards EQUAL exp
    (79) gdrhs -> . guards EQUAL exp gdrhs
    (80) guards -> . PIPE guardslist

    WHERE           reduce using rule 78 (gdrhs -> guards EQUAL exp .)
    PIPE            shift and go to state 31

    guards                         shift and go to state 30
    gdrhs                          shift and go to state 251

state 198

    (81) guardslist -> guard VIRGULA . guardslist
    (81) guardslist -> . guard VIRGULA guardslist
    (82) guardslist -> . guard
    (83) guard -> . pat SETAS infixexp
    (84) guard -> . LET decls
    (85) guard -> . infixexp
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN

    LET             shift and go to state 104
    MINUS           shift and go to state 105
    BARRA_INVERTIDA shift and go to state 83
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    CHAR            shift and go to state 109
    STRING          shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 113
    LCOLCHETE       shift and go to state 114
    ID              shift and go to state 13

    guard                          shift and go to state 101
    guardslist                     shift and go to state 252
    pat                            shift and go to state 102
    infixexp                       shift and go to state 103
    lpat                           shift and go to state 12
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    fexp                           shift and go to state 87
    var                            shift and go to state 106
    qcon                           shift and go to state 17
    aexp                           shift and go to state 88

state 199

    (83) guard -> pat SETAS . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    infixexp                       shift and go to state 253
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 200

    (84) guard -> LET decls .
    (124) lexp -> LET decls . IN exp

    VIRGULA         reduce using rule 84 (guard -> LET decls .)
    EQUAL           reduce using rule 84 (guard -> LET decls .)
    SETAS           reduce using rule 84 (guard -> LET decls .)
    IN              shift and go to state 235


state 201

    (74) lpattype -> INT .
    (87) aexp -> INT .

    DOIS_PONTOS     reduce using rule 74 (lpattype -> INT .)
    SETAS           reduce using rule 74 (lpattype -> INT .)
    RPAREN          reduce using rule 74 (lpattype -> INT .)
    VIRGULA         reduce using rule 74 (lpattype -> INT .)
    RCOLCHETE       reduce using rule 74 (lpattype -> INT .)
    INT             reduce using rule 87 (aexp -> INT .)
    FLOAT           reduce using rule 87 (aexp -> INT .)
    CHAR            reduce using rule 87 (aexp -> INT .)
    STRING          reduce using rule 87 (aexp -> INT .)
    TRUE            reduce using rule 87 (aexp -> INT .)
    FALSE           reduce using rule 87 (aexp -> INT .)
    LPAREN          reduce using rule 87 (aexp -> INT .)
    LCOLCHETE       reduce using rule 87 (aexp -> INT .)
    ID              reduce using rule 87 (aexp -> INT .)


state 202

    (75) lpattype -> FLOAT .
    (88) aexp -> FLOAT .

    DOIS_PONTOS     reduce using rule 75 (lpattype -> FLOAT .)
    SETAS           reduce using rule 75 (lpattype -> FLOAT .)
    RPAREN          reduce using rule 75 (lpattype -> FLOAT .)
    VIRGULA         reduce using rule 75 (lpattype -> FLOAT .)
    RCOLCHETE       reduce using rule 75 (lpattype -> FLOAT .)
    INT             reduce using rule 88 (aexp -> FLOAT .)
    FLOAT           reduce using rule 88 (aexp -> FLOAT .)
    CHAR            reduce using rule 88 (aexp -> FLOAT .)
    STRING          reduce using rule 88 (aexp -> FLOAT .)
    TRUE            reduce using rule 88 (aexp -> FLOAT .)
    FALSE           reduce using rule 88 (aexp -> FLOAT .)
    LPAREN          reduce using rule 88 (aexp -> FLOAT .)
    LCOLCHETE       reduce using rule 88 (aexp -> FLOAT .)
    ID              reduce using rule 88 (aexp -> FLOAT .)


state 203

    (151) qcon -> LPAREN DOIS_PONTOS . RPAREN
    (157) qop -> DOIS_PONTOS .

    RPAREN          shift and go to state 153
    MINUS           reduce using rule 157 (qop -> DOIS_PONTOS .)
    BARRA_INVERTIDA reduce using rule 157 (qop -> DOIS_PONTOS .)
    LET             reduce using rule 157 (qop -> DOIS_PONTOS .)
    IF              reduce using rule 157 (qop -> DOIS_PONTOS .)
    CASE            reduce using rule 157 (qop -> DOIS_PONTOS .)
    INT             reduce using rule 157 (qop -> DOIS_PONTOS .)
    FLOAT           reduce using rule 157 (qop -> DOIS_PONTOS .)
    CHAR            reduce using rule 157 (qop -> DOIS_PONTOS .)
    STRING          reduce using rule 157 (qop -> DOIS_PONTOS .)
    TRUE            reduce using rule 157 (qop -> DOIS_PONTOS .)
    FALSE           reduce using rule 157 (qop -> DOIS_PONTOS .)
    LPAREN          reduce using rule 157 (qop -> DOIS_PONTOS .)
    LCOLCHETE       reduce using rule 157 (qop -> DOIS_PONTOS .)
    ID              reduce using rule 157 (qop -> DOIS_PONTOS .)


state 204

    (153) varop -> CRASE ID CRASE .

    MINUS           reduce using rule 153 (varop -> CRASE ID CRASE .)
    INT             reduce using rule 153 (varop -> CRASE ID CRASE .)
    FLOAT           reduce using rule 153 (varop -> CRASE ID CRASE .)
    CHAR            reduce using rule 153 (varop -> CRASE ID CRASE .)
    STRING          reduce using rule 153 (varop -> CRASE ID CRASE .)
    TRUE            reduce using rule 153 (varop -> CRASE ID CRASE .)
    FALSE           reduce using rule 153 (varop -> CRASE ID CRASE .)
    UNDERLINE       reduce using rule 153 (varop -> CRASE ID CRASE .)
    LPAREN          reduce using rule 153 (varop -> CRASE ID CRASE .)
    LCOLCHETE       reduce using rule 153 (varop -> CRASE ID CRASE .)
    ID              reduce using rule 153 (varop -> CRASE ID CRASE .)
    BARRA_INVERTIDA reduce using rule 153 (varop -> CRASE ID CRASE .)
    LET             reduce using rule 153 (varop -> CRASE ID CRASE .)
    IF              reduce using rule 153 (varop -> CRASE ID CRASE .)
    CASE            reduce using rule 153 (varop -> CRASE ID CRASE .)


state 205

    (15) type -> btype SETAS . type
    (14) type -> . btype
    (15) type -> . btype SETAS type
    (16) btype -> . btype atype
    (17) btype -> . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

    btype                          shift and go to state 132
    type                           shift and go to state 254
    atype                          shift and go to state 133

state 206

    (16) btype -> btype atype .

    SETAS           reduce using rule 16 (btype -> btype atype .)
    INT             reduce using rule 16 (btype -> btype atype .)
    FLOAT           reduce using rule 16 (btype -> btype atype .)
    BOOL            reduce using rule 16 (btype -> btype atype .)
    CHAR            reduce using rule 16 (btype -> btype atype .)
    STRING          reduce using rule 16 (btype -> btype atype .)
    LPAREN          reduce using rule 16 (btype -> btype atype .)
    LCOLCHETE       reduce using rule 16 (btype -> btype atype .)
    PONTO_VIRGULA   reduce using rule 16 (btype -> btype atype .)
    $end            reduce using rule 16 (btype -> btype atype .)
    RCHAVE          reduce using rule 16 (btype -> btype atype .)
    RPAREN          reduce using rule 16 (btype -> btype atype .)
    VIRGULA         reduce using rule 16 (btype -> btype atype .)
    RCOLCHETE       reduce using rule 16 (btype -> btype atype .)
    WHERE           reduce using rule 16 (btype -> btype atype .)
    THEN            reduce using rule 16 (btype -> btype atype .)
    OF              reduce using rule 16 (btype -> btype atype .)
    PIPE            reduce using rule 16 (btype -> btype atype .)
    PLUS            reduce using rule 16 (btype -> btype atype .)
    MINUS           reduce using rule 16 (btype -> btype atype .)
    MULT            reduce using rule 16 (btype -> btype atype .)
    DIV             reduce using rule 16 (btype -> btype atype .)
    CIRCUNFLEXO     reduce using rule 16 (btype -> btype atype .)
    MAIOR_IGUAL     reduce using rule 16 (btype -> btype atype .)
    MENOR_IGUAL     reduce using rule 16 (btype -> btype atype .)
    MAIOR           reduce using rule 16 (btype -> btype atype .)
    MENOR           reduce using rule 16 (btype -> btype atype .)
    IGUAL           reduce using rule 16 (btype -> btype atype .)
    DIFERENTE       reduce using rule 16 (btype -> btype atype .)
    OR              reduce using rule 16 (btype -> btype atype .)
    NOT             reduce using rule 16 (btype -> btype atype .)
    AND             reduce using rule 16 (btype -> btype atype .)
    VARSYM          reduce using rule 16 (btype -> btype atype .)
    CRASE           reduce using rule 16 (btype -> btype atype .)
    DOIS_PONTOS_DUPLO reduce using rule 16 (btype -> btype atype .)
    DOIS_PONTOS     reduce using rule 16 (btype -> btype atype .)
    EQUAL           reduce using rule 16 (btype -> btype atype .)
    ELSE            reduce using rule 16 (btype -> btype atype .)


state 207

    (23) atype -> LPAREN type . RPAREN
    (26) typetuple -> type . VIRGULA typetuple
    (27) typetuple -> type .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 255
    VIRGULA         shift and go to state 256

  ! RPAREN          [ reduce using rule 27 (typetuple -> type .) ]


state 208

    (24) atype -> LPAREN typetuple . RPAREN

    RPAREN          shift and go to state 257


state 209

    (25) atype -> LCOLCHETE type . RCOLCHETE

    RCOLCHETE       shift and go to state 258


state 210

    (30) funlhs -> LPAREN funlhs RPAREN apatlist .

    EQUAL           reduce using rule 30 (funlhs -> LPAREN funlhs RPAREN apatlist .)
    PIPE            reduce using rule 30 (funlhs -> LPAREN funlhs RPAREN apatlist .)
    RPAREN          reduce using rule 30 (funlhs -> LPAREN funlhs RPAREN apatlist .)


state 211

    (53) pattuple -> pat VIRGULA pat .
    (52) pattuple -> pat . VIRGULA pattuple
    (53) pattuple -> pat . VIRGULA pat

    RPAREN          reduce using rule 53 (pattuple -> pat VIRGULA pat .)
    VIRGULA         shift and go to state 150


state 212

    (52) pattuple -> pat VIRGULA pattuple .

    RPAREN          reduce using rule 52 (pattuple -> pat VIRGULA pattuple .)


state 213

    (35) apat -> qcon LCHAVE fpatlist RCHAVE .

    DOIS_PONTOS     reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    PLUS            reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    MINUS           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    MULT            reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    BARRA           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    CIRCUNFLEXO     reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    MAIOR_IGUAL     reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    MENOR_IGUAL     reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    MAIOR           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    MENOR           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    IGUAL           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    DIFERENTE       reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    OR              reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    NOT             reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    AND             reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    EQUAL           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    VARSYM          reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    CRASE           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    PIPE            reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    INT             reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    FLOAT           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    CHAR            reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    STRING          reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    TRUE            reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    FALSE           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    UNDERLINE       reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    LPAREN          reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    LCOLCHETE       reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    ID              reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    RPAREN          reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    VIRGULA         reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    RCOLCHETE       reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    SETAS           reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)
    RCHAVE          reduce using rule 35 (apat -> qcon LCHAVE fpatlist RCHAVE .)


state 214

    (47) fpatlist -> fpat VIRGULA . fpatlist
    (47) fpatlist -> . fpat VIRGULA fpatlist
    (48) fpatlist -> . fpat
    (49) fpat -> . var EQUAL pat
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    ID              shift and go to state 13
    LPAREN          shift and go to state 143

    fpat                           shift and go to state 157
    fpatlist                       shift and go to state 259
    var                            shift and go to state 158

state 215

    (49) fpat -> var EQUAL . pat
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    var                            shift and go to state 51
    pat                            shift and go to state 260
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    qcon                           shift and go to state 17

state 216

    (50) patlist -> pat VIRGULA patlist .

    RCOLCHETE       reduce using rule 50 (patlist -> pat VIRGULA patlist .)


state 217

    (76) rhs -> EQUAL exp WHERE decls .

    PONTO_VIRGULA   reduce using rule 76 (rhs -> EQUAL exp WHERE decls .)
    $end            reduce using rule 76 (rhs -> EQUAL exp WHERE decls .)
    RCHAVE          reduce using rule 76 (rhs -> EQUAL exp WHERE decls .)


state 218

    (103) exp -> infixexp DOIS_PONTOS_DUPLO type .

    WHERE           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    THEN            reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    OF              reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    RPAREN          reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    VIRGULA         reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    PIPE            reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    RCOLCHETE       reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    PLUS            reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    MINUS           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    MULT            reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    DIV             reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    CIRCUNFLEXO     reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    MAIOR_IGUAL     reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    MENOR_IGUAL     reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    MAIOR           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    MENOR           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    IGUAL           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    DIFERENTE       reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    OR              reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    NOT             reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    AND             reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    VARSYM          reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    CRASE           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    DOIS_PONTOS_DUPLO reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    DOIS_PONTOS     reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    EQUAL           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    SETAS           reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    ELSE            reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    PONTO_VIRGULA   reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)
    RCHAVE          reduce using rule 103 (exp -> infixexp DOIS_PONTOS_DUPLO type .)


state 219

    (108) expop -> infixexp varop infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for CIRCUNFLEXO resolved as shift
  ! shift/reduce conflict for MAIOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for VARSYM resolved as shift
  ! shift/reduce conflict for CRASE resolved as shift
    DOIS_PONTOS_DUPLO reduce using rule 108 (expop -> infixexp varop infixexp .)
    WHERE           reduce using rule 108 (expop -> infixexp varop infixexp .)
    VIRGULA         reduce using rule 108 (expop -> infixexp varop infixexp .)
    EQUAL           reduce using rule 108 (expop -> infixexp varop infixexp .)
    SETAS           reduce using rule 108 (expop -> infixexp varop infixexp .)
    THEN            reduce using rule 108 (expop -> infixexp varop infixexp .)
    OF              reduce using rule 108 (expop -> infixexp varop infixexp .)
    DOIS_PONTOS     reduce using rule 108 (expop -> infixexp varop infixexp .)
    RPAREN          reduce using rule 108 (expop -> infixexp varop infixexp .)
    PIPE            reduce using rule 108 (expop -> infixexp varop infixexp .)
    RCOLCHETE       reduce using rule 108 (expop -> infixexp varop infixexp .)
    ELSE            reduce using rule 108 (expop -> infixexp varop infixexp .)
    PONTO_VIRGULA   reduce using rule 108 (expop -> infixexp varop infixexp .)
    RCHAVE          reduce using rule 108 (expop -> infixexp varop infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! MINUS           [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! MULT            [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! DIV             [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! MENOR_IGUAL     [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! MAIOR           [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! MENOR           [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! IGUAL           [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! DIFERENTE       [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! OR              [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! NOT             [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! AND             [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! VARSYM          [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]
  ! CRASE           [ reduce using rule 108 (expop -> infixexp varop infixexp .) ]

    varop                          shift and go to state 163

state 220

    (109) expop -> infixexp PLUS infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    PLUS            reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    MINUS           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    DIV             reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    MAIOR_IGUAL     reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    MENOR_IGUAL     reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    MAIOR           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    MENOR           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    IGUAL           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    DIFERENTE       reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    OR              reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    NOT             reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    AND             reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    WHERE           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    VIRGULA         reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    EQUAL           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    SETAS           reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    THEN            reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    OF              reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    DOIS_PONTOS     reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    RPAREN          reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    PIPE            reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    RCOLCHETE       reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    ELSE            reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    PONTO_VIRGULA   reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    RCHAVE          reduce using rule 109 (expop -> infixexp PLUS infixexp .)
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! MULT            [ reduce using rule 109 (expop -> infixexp PLUS infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 109 (expop -> infixexp PLUS infixexp .) ]
  ! VARSYM          [ reduce using rule 109 (expop -> infixexp PLUS infixexp .) ]
  ! CRASE           [ reduce using rule 109 (expop -> infixexp PLUS infixexp .) ]
  ! PLUS            [ shift and go to state 164 ]
  ! MINUS           [ shift and go to state 165 ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 221

    (110) expop -> infixexp MINUS infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    PLUS            reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    MINUS           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    DIV             reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    MAIOR_IGUAL     reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    MENOR_IGUAL     reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    MAIOR           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    MENOR           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    IGUAL           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    DIFERENTE       reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    OR              reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    NOT             reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    AND             reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    WHERE           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    VIRGULA         reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    EQUAL           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    SETAS           reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    THEN            reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    OF              reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    DOIS_PONTOS     reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    RPAREN          reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    PIPE            reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    RCOLCHETE       reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    ELSE            reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    PONTO_VIRGULA   reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    RCHAVE          reduce using rule 110 (expop -> infixexp MINUS infixexp .)
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! MULT            [ reduce using rule 110 (expop -> infixexp MINUS infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 110 (expop -> infixexp MINUS infixexp .) ]
  ! VARSYM          [ reduce using rule 110 (expop -> infixexp MINUS infixexp .) ]
  ! CRASE           [ reduce using rule 110 (expop -> infixexp MINUS infixexp .) ]
  ! PLUS            [ shift and go to state 164 ]
  ! MINUS           [ shift and go to state 165 ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 222

    (111) expop -> infixexp MULT infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 111 (expop -> infixexp MULT infixexp .)
    PLUS            reduce using rule 111 (expop -> infixexp MULT infixexp .)
    MINUS           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    MULT            reduce using rule 111 (expop -> infixexp MULT infixexp .)
    DIV             reduce using rule 111 (expop -> infixexp MULT infixexp .)
    MAIOR_IGUAL     reduce using rule 111 (expop -> infixexp MULT infixexp .)
    MENOR_IGUAL     reduce using rule 111 (expop -> infixexp MULT infixexp .)
    MAIOR           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    MENOR           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    IGUAL           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    DIFERENTE       reduce using rule 111 (expop -> infixexp MULT infixexp .)
    OR              reduce using rule 111 (expop -> infixexp MULT infixexp .)
    NOT             reduce using rule 111 (expop -> infixexp MULT infixexp .)
    AND             reduce using rule 111 (expop -> infixexp MULT infixexp .)
    WHERE           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    VIRGULA         reduce using rule 111 (expop -> infixexp MULT infixexp .)
    EQUAL           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    SETAS           reduce using rule 111 (expop -> infixexp MULT infixexp .)
    THEN            reduce using rule 111 (expop -> infixexp MULT infixexp .)
    OF              reduce using rule 111 (expop -> infixexp MULT infixexp .)
    DOIS_PONTOS     reduce using rule 111 (expop -> infixexp MULT infixexp .)
    RPAREN          reduce using rule 111 (expop -> infixexp MULT infixexp .)
    PIPE            reduce using rule 111 (expop -> infixexp MULT infixexp .)
    RCOLCHETE       reduce using rule 111 (expop -> infixexp MULT infixexp .)
    ELSE            reduce using rule 111 (expop -> infixexp MULT infixexp .)
    PONTO_VIRGULA   reduce using rule 111 (expop -> infixexp MULT infixexp .)
    RCHAVE          reduce using rule 111 (expop -> infixexp MULT infixexp .)
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! CIRCUNFLEXO     [ reduce using rule 111 (expop -> infixexp MULT infixexp .) ]
  ! VARSYM          [ reduce using rule 111 (expop -> infixexp MULT infixexp .) ]
  ! CRASE           [ reduce using rule 111 (expop -> infixexp MULT infixexp .) ]
  ! PLUS            [ shift and go to state 164 ]
  ! MINUS           [ shift and go to state 165 ]
  ! MULT            [ shift and go to state 166 ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 223

    (112) expop -> infixexp DIV infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for CIRCUNFLEXO resolved as shift
  ! shift/reduce conflict for MAIOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for VARSYM resolved as shift
  ! shift/reduce conflict for CRASE resolved as shift
    DOIS_PONTOS_DUPLO reduce using rule 112 (expop -> infixexp DIV infixexp .)
    WHERE           reduce using rule 112 (expop -> infixexp DIV infixexp .)
    VIRGULA         reduce using rule 112 (expop -> infixexp DIV infixexp .)
    EQUAL           reduce using rule 112 (expop -> infixexp DIV infixexp .)
    SETAS           reduce using rule 112 (expop -> infixexp DIV infixexp .)
    THEN            reduce using rule 112 (expop -> infixexp DIV infixexp .)
    OF              reduce using rule 112 (expop -> infixexp DIV infixexp .)
    DOIS_PONTOS     reduce using rule 112 (expop -> infixexp DIV infixexp .)
    RPAREN          reduce using rule 112 (expop -> infixexp DIV infixexp .)
    PIPE            reduce using rule 112 (expop -> infixexp DIV infixexp .)
    RCOLCHETE       reduce using rule 112 (expop -> infixexp DIV infixexp .)
    ELSE            reduce using rule 112 (expop -> infixexp DIV infixexp .)
    PONTO_VIRGULA   reduce using rule 112 (expop -> infixexp DIV infixexp .)
    RCHAVE          reduce using rule 112 (expop -> infixexp DIV infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! MINUS           [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! MULT            [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! DIV             [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! MENOR_IGUAL     [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! MAIOR           [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! MENOR           [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! IGUAL           [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! DIFERENTE       [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! OR              [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! NOT             [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! AND             [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! VARSYM          [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]
  ! CRASE           [ reduce using rule 112 (expop -> infixexp DIV infixexp .) ]

    varop                          shift and go to state 163

state 224

    (113) expop -> infixexp CIRCUNFLEXO infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    PLUS            reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    MINUS           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    MULT            reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    DIV             reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    MAIOR_IGUAL     reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    MENOR_IGUAL     reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    MAIOR           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    MENOR           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    IGUAL           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    DIFERENTE       reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    OR              reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    NOT             reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    AND             reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    WHERE           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    VIRGULA         reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    EQUAL           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    SETAS           reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    THEN            reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    OF              reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    DOIS_PONTOS     reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    RPAREN          reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    PIPE            reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    RCOLCHETE       reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    ELSE            reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    PONTO_VIRGULA   reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    RCHAVE          reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .)
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! CIRCUNFLEXO     [ reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .) ]
  ! VARSYM          [ reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .) ]
  ! CRASE           [ reduce using rule 113 (expop -> infixexp CIRCUNFLEXO infixexp .) ]
  ! PLUS            [ shift and go to state 164 ]
  ! MINUS           [ shift and go to state 165 ]
  ! MULT            [ shift and go to state 166 ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 225

    (114) expop -> infixexp MAIOR_IGUAL infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    DIV             reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    MAIOR_IGUAL     reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    MENOR_IGUAL     reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    MAIOR           reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    MENOR           reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    IGUAL           reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    DIFERENTE       reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    OR              reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    NOT             reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    AND             reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    WHERE           reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    VIRGULA         reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    EQUAL           reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    SETAS           reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    THEN            reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    OF              reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    DOIS_PONTOS     reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    RPAREN          reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    PIPE            reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    RCOLCHETE       reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    ELSE            reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    PONTO_VIRGULA   reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    RCHAVE          reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .) ]
  ! MINUS           [ reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .) ]
  ! MULT            [ reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .) ]
  ! VARSYM          [ reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .) ]
  ! CRASE           [ reduce using rule 114 (expop -> infixexp MAIOR_IGUAL infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 226

    (115) expop -> infixexp MENOR_IGUAL infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    DIV             reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    MAIOR_IGUAL     reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    MENOR_IGUAL     reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    MAIOR           reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    MENOR           reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    IGUAL           reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    DIFERENTE       reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    OR              reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    NOT             reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    AND             reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    WHERE           reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    VIRGULA         reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    EQUAL           reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    SETAS           reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    THEN            reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    OF              reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    DOIS_PONTOS     reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    RPAREN          reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    PIPE            reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    RCOLCHETE       reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    ELSE            reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    PONTO_VIRGULA   reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    RCHAVE          reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .) ]
  ! MINUS           [ reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .) ]
  ! MULT            [ reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .) ]
  ! VARSYM          [ reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .) ]
  ! CRASE           [ reduce using rule 115 (expop -> infixexp MENOR_IGUAL infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 227

    (116) expop -> infixexp MAIOR infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    DIV             reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    MAIOR_IGUAL     reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    MENOR_IGUAL     reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    MAIOR           reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    MENOR           reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    IGUAL           reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    DIFERENTE       reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    OR              reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    NOT             reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    AND             reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    WHERE           reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    VIRGULA         reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    EQUAL           reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    SETAS           reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    THEN            reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    OF              reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    DOIS_PONTOS     reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    RPAREN          reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    PIPE            reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    RCOLCHETE       reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    ELSE            reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    PONTO_VIRGULA   reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    RCHAVE          reduce using rule 116 (expop -> infixexp MAIOR infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 116 (expop -> infixexp MAIOR infixexp .) ]
  ! MINUS           [ reduce using rule 116 (expop -> infixexp MAIOR infixexp .) ]
  ! MULT            [ reduce using rule 116 (expop -> infixexp MAIOR infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 116 (expop -> infixexp MAIOR infixexp .) ]
  ! VARSYM          [ reduce using rule 116 (expop -> infixexp MAIOR infixexp .) ]
  ! CRASE           [ reduce using rule 116 (expop -> infixexp MAIOR infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 228

    (117) expop -> infixexp MENOR infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    DIV             reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    MAIOR_IGUAL     reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    MENOR_IGUAL     reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    MAIOR           reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    MENOR           reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    IGUAL           reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    DIFERENTE       reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    OR              reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    NOT             reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    AND             reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    WHERE           reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    VIRGULA         reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    EQUAL           reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    SETAS           reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    THEN            reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    OF              reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    DOIS_PONTOS     reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    RPAREN          reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    PIPE            reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    RCOLCHETE       reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    ELSE            reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    PONTO_VIRGULA   reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    RCHAVE          reduce using rule 117 (expop -> infixexp MENOR infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 117 (expop -> infixexp MENOR infixexp .) ]
  ! MINUS           [ reduce using rule 117 (expop -> infixexp MENOR infixexp .) ]
  ! MULT            [ reduce using rule 117 (expop -> infixexp MENOR infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 117 (expop -> infixexp MENOR infixexp .) ]
  ! VARSYM          [ reduce using rule 117 (expop -> infixexp MENOR infixexp .) ]
  ! CRASE           [ reduce using rule 117 (expop -> infixexp MENOR infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 229

    (118) expop -> infixexp IGUAL infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    DIV             reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    MAIOR_IGUAL     reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    MENOR_IGUAL     reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    MAIOR           reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    MENOR           reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    IGUAL           reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    DIFERENTE       reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    OR              reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    NOT             reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    AND             reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    WHERE           reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    VIRGULA         reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    EQUAL           reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    SETAS           reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    THEN            reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    OF              reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    DOIS_PONTOS     reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    RPAREN          reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    PIPE            reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    RCOLCHETE       reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    ELSE            reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    PONTO_VIRGULA   reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    RCHAVE          reduce using rule 118 (expop -> infixexp IGUAL infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 118 (expop -> infixexp IGUAL infixexp .) ]
  ! MINUS           [ reduce using rule 118 (expop -> infixexp IGUAL infixexp .) ]
  ! MULT            [ reduce using rule 118 (expop -> infixexp IGUAL infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 118 (expop -> infixexp IGUAL infixexp .) ]
  ! VARSYM          [ reduce using rule 118 (expop -> infixexp IGUAL infixexp .) ]
  ! CRASE           [ reduce using rule 118 (expop -> infixexp IGUAL infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 230

    (119) expop -> infixexp DIFERENTE infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    DIV             reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    MAIOR_IGUAL     reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    MENOR_IGUAL     reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    MAIOR           reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    MENOR           reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    IGUAL           reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    DIFERENTE       reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    OR              reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    NOT             reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    AND             reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    WHERE           reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    VIRGULA         reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    EQUAL           reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    SETAS           reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    THEN            reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    OF              reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    DOIS_PONTOS     reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    RPAREN          reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    PIPE            reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    RCOLCHETE       reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    ELSE            reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    PONTO_VIRGULA   reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    RCHAVE          reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .) ]
  ! MINUS           [ reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .) ]
  ! MULT            [ reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .) ]
  ! VARSYM          [ reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .) ]
  ! CRASE           [ reduce using rule 119 (expop -> infixexp DIFERENTE infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! MAIOR_IGUAL     [ shift and go to state 169 ]
  ! MENOR_IGUAL     [ shift and go to state 170 ]
  ! MAIOR           [ shift and go to state 171 ]
  ! MENOR           [ shift and go to state 172 ]
  ! IGUAL           [ shift and go to state 173 ]
  ! DIFERENTE       [ shift and go to state 174 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 231

    (120) expop -> infixexp OR infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 120 (expop -> infixexp OR infixexp .)
    DIV             reduce using rule 120 (expop -> infixexp OR infixexp .)
    OR              reduce using rule 120 (expop -> infixexp OR infixexp .)
    AND             reduce using rule 120 (expop -> infixexp OR infixexp .)
    WHERE           reduce using rule 120 (expop -> infixexp OR infixexp .)
    VIRGULA         reduce using rule 120 (expop -> infixexp OR infixexp .)
    EQUAL           reduce using rule 120 (expop -> infixexp OR infixexp .)
    SETAS           reduce using rule 120 (expop -> infixexp OR infixexp .)
    THEN            reduce using rule 120 (expop -> infixexp OR infixexp .)
    OF              reduce using rule 120 (expop -> infixexp OR infixexp .)
    DOIS_PONTOS     reduce using rule 120 (expop -> infixexp OR infixexp .)
    RPAREN          reduce using rule 120 (expop -> infixexp OR infixexp .)
    PIPE            reduce using rule 120 (expop -> infixexp OR infixexp .)
    RCOLCHETE       reduce using rule 120 (expop -> infixexp OR infixexp .)
    ELSE            reduce using rule 120 (expop -> infixexp OR infixexp .)
    PONTO_VIRGULA   reduce using rule 120 (expop -> infixexp OR infixexp .)
    RCHAVE          reduce using rule 120 (expop -> infixexp OR infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    NOT             shift and go to state 176
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! MINUS           [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! MULT            [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! MENOR_IGUAL     [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! MAIOR           [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! MENOR           [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! IGUAL           [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! DIFERENTE       [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! NOT             [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! VARSYM          [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! CRASE           [ reduce using rule 120 (expop -> infixexp OR infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! OR              [ shift and go to state 175 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 232

    (121) expop -> infixexp NOT infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 121 (expop -> infixexp NOT infixexp .)
    DIV             reduce using rule 121 (expop -> infixexp NOT infixexp .)
    OR              reduce using rule 121 (expop -> infixexp NOT infixexp .)
    NOT             reduce using rule 121 (expop -> infixexp NOT infixexp .)
    AND             reduce using rule 121 (expop -> infixexp NOT infixexp .)
    WHERE           reduce using rule 121 (expop -> infixexp NOT infixexp .)
    VIRGULA         reduce using rule 121 (expop -> infixexp NOT infixexp .)
    EQUAL           reduce using rule 121 (expop -> infixexp NOT infixexp .)
    SETAS           reduce using rule 121 (expop -> infixexp NOT infixexp .)
    THEN            reduce using rule 121 (expop -> infixexp NOT infixexp .)
    OF              reduce using rule 121 (expop -> infixexp NOT infixexp .)
    DOIS_PONTOS     reduce using rule 121 (expop -> infixexp NOT infixexp .)
    RPAREN          reduce using rule 121 (expop -> infixexp NOT infixexp .)
    PIPE            reduce using rule 121 (expop -> infixexp NOT infixexp .)
    RCOLCHETE       reduce using rule 121 (expop -> infixexp NOT infixexp .)
    ELSE            reduce using rule 121 (expop -> infixexp NOT infixexp .)
    PONTO_VIRGULA   reduce using rule 121 (expop -> infixexp NOT infixexp .)
    RCHAVE          reduce using rule 121 (expop -> infixexp NOT infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! MINUS           [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! MULT            [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! MENOR_IGUAL     [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! MAIOR           [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! MENOR           [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! IGUAL           [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! DIFERENTE       [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! VARSYM          [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! CRASE           [ reduce using rule 121 (expop -> infixexp NOT infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! OR              [ shift and go to state 175 ]
  ! NOT             [ shift and go to state 176 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 233

    (122) expop -> infixexp AND infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    DOIS_PONTOS_DUPLO reduce using rule 122 (expop -> infixexp AND infixexp .)
    DIV             reduce using rule 122 (expop -> infixexp AND infixexp .)
    AND             reduce using rule 122 (expop -> infixexp AND infixexp .)
    WHERE           reduce using rule 122 (expop -> infixexp AND infixexp .)
    VIRGULA         reduce using rule 122 (expop -> infixexp AND infixexp .)
    EQUAL           reduce using rule 122 (expop -> infixexp AND infixexp .)
    SETAS           reduce using rule 122 (expop -> infixexp AND infixexp .)
    THEN            reduce using rule 122 (expop -> infixexp AND infixexp .)
    OF              reduce using rule 122 (expop -> infixexp AND infixexp .)
    DOIS_PONTOS     reduce using rule 122 (expop -> infixexp AND infixexp .)
    RPAREN          reduce using rule 122 (expop -> infixexp AND infixexp .)
    PIPE            reduce using rule 122 (expop -> infixexp AND infixexp .)
    RCOLCHETE       reduce using rule 122 (expop -> infixexp AND infixexp .)
    ELSE            reduce using rule 122 (expop -> infixexp AND infixexp .)
    PONTO_VIRGULA   reduce using rule 122 (expop -> infixexp AND infixexp .)
    RCHAVE          reduce using rule 122 (expop -> infixexp AND infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

  ! PLUS            [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! MINUS           [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! MULT            [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! CIRCUNFLEXO     [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! MENOR_IGUAL     [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! MAIOR           [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! MENOR           [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! IGUAL           [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! DIFERENTE       [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! OR              [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! NOT             [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! VARSYM          [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! CRASE           [ reduce using rule 122 (expop -> infixexp AND infixexp .) ]
  ! DIV             [ shift and go to state 167 ]
  ! AND             [ shift and go to state 177 ]

    varop                          shift and go to state 163

state 234

    (123) lexp -> BARRA_INVERTIDA apatlist SETAS . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 261
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 235

    (124) lexp -> LET decls IN . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 262
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 236

    (5) decls -> LCHAVE declslist . RCHAVE

    RCHAVE          shift and go to state 263


state 237

    (6) declslist -> decl . PONTO_VIRGULA declslist
    (7) declslist -> decl .

    PONTO_VIRGULA   shift and go to state 264
    RCHAVE          reduce using rule 7 (declslist -> decl .)


state 238

    (125) lexp -> IF exp THEN . exp ELSE exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 265
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 239

    (126) lexp -> CASE exp OF . LCHAVE alts RCHAVE

    LCHAVE          shift and go to state 266


state 240

    (93) aexp -> LPAREN exptuple RPAREN .

    INT             reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    FLOAT           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    CHAR            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    STRING          reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    TRUE            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    FALSE           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    LPAREN          reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    LCOLCHETE       reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    ID              reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    PLUS            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    MINUS           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    MULT            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    DIV             reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    CIRCUNFLEXO     reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    MAIOR_IGUAL     reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    MENOR_IGUAL     reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    MAIOR           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    MENOR           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    IGUAL           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    DIFERENTE       reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    OR              reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    NOT             reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    AND             reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    VARSYM          reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    CRASE           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    WHERE           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    VIRGULA         reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    EQUAL           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    SETAS           reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    THEN            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    OF              reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    DOIS_PONTOS     reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    RPAREN          reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    PIPE            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    RCOLCHETE       reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    ELSE            reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    PONTO_VIRGULA   reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)
    RCHAVE          reduce using rule 93 (aexp -> LPAREN exptuple RPAREN .)


state 241

    (95) aexp -> LPAREN exp RPAREN .

    INT             reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    FLOAT           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    CHAR            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    STRING          reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    TRUE            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    FALSE           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    LCOLCHETE       reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    MULT            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    CIRCUNFLEXO     reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    MAIOR_IGUAL     reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    MENOR_IGUAL     reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    MAIOR           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    MENOR           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    IGUAL           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    DIFERENTE       reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    NOT             reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    VARSYM          reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    CRASE           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    WHERE           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    VIRGULA         reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    SETAS           reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    OF              reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    DOIS_PONTOS     reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    PIPE            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    RCOLCHETE       reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    PONTO_VIRGULA   reduce using rule 95 (aexp -> LPAREN exp RPAREN .)
    RCHAVE          reduce using rule 95 (aexp -> LPAREN exp RPAREN .)


state 242

    (99) exptuple -> exp VIRGULA . exptuple
    (100) exptuple -> exp VIRGULA . exp
    (99) exptuple -> . exp VIRGULA exptuple
    (100) exptuple -> . exp VIRGULA exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 267
    exptuple                       shift and go to state 268
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 243

    (97) aexp -> LPAREN infixexp qop . RPAREN

    RPAREN          shift and go to state 269


state 244

    (152) varop -> VARSYM .
    (154) qvarop -> VARSYM .

    MINUS           reduce using rule 152 (varop -> VARSYM .)
    BARRA_INVERTIDA reduce using rule 152 (varop -> VARSYM .)
    LET             reduce using rule 152 (varop -> VARSYM .)
    IF              reduce using rule 152 (varop -> VARSYM .)
    CASE            reduce using rule 152 (varop -> VARSYM .)
    INT             reduce using rule 152 (varop -> VARSYM .)
    FLOAT           reduce using rule 152 (varop -> VARSYM .)
    CHAR            reduce using rule 152 (varop -> VARSYM .)
    STRING          reduce using rule 152 (varop -> VARSYM .)
    TRUE            reduce using rule 152 (varop -> VARSYM .)
    FALSE           reduce using rule 152 (varop -> VARSYM .)
    LPAREN          reduce using rule 152 (varop -> VARSYM .)
    LCOLCHETE       reduce using rule 152 (varop -> VARSYM .)
    ID              reduce using rule 152 (varop -> VARSYM .)
    RPAREN          reduce using rule 154 (qvarop -> VARSYM .)


state 245

    (153) varop -> CRASE . ID CRASE
    (155) qvarop -> CRASE . ID CRASE

    ID              shift and go to state 270


state 246

    (98) aexp -> LPAREN qop infixexp . RPAREN
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    RPAREN          shift and go to state 271
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

    varop                          shift and go to state 163

state 247

    (155) qvarop -> CRASE ID . CRASE

    CRASE           shift and go to state 272


state 248

    (94) aexp -> LCOLCHETE explist RCOLCHETE .

    INT             reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    FLOAT           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    CHAR            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    STRING          reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    TRUE            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    FALSE           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    LPAREN          reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    LCOLCHETE       reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    ID              reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    DOIS_PONTOS_DUPLO reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    PLUS            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    MINUS           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    MULT            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    DIV             reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    CIRCUNFLEXO     reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    MAIOR_IGUAL     reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    MENOR_IGUAL     reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    MAIOR           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    MENOR           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    IGUAL           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    DIFERENTE       reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    OR              reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    NOT             reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    AND             reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    VARSYM          reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    CRASE           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    WHERE           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    VIRGULA         reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    EQUAL           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    SETAS           reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    THEN            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    OF              reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    DOIS_PONTOS     reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    RPAREN          reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    PIPE            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    RCOLCHETE       reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    ELSE            reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    PONTO_VIRGULA   reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)
    RCHAVE          reduce using rule 94 (aexp -> LCOLCHETE explist RCOLCHETE .)


state 249

    (96) aexp -> LCOLCHETE exp PIPE . quallist RCOLCHETE
    (130) quallist -> . qual VIRGULA quallist
    (131) quallist -> . qual
    (132) qual -> . pat SETAS exp
    (133) qual -> . LET decls
    (134) qual -> . exp
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN

    LET             shift and go to state 277
    MINUS           shift and go to state 278
    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    CHAR            shift and go to state 109
    STRING          shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 113
    LCOLCHETE       shift and go to state 114
    BARRA_INVERTIDA shift and go to state 83
    IF              shift and go to state 85
    CASE            shift and go to state 86
    ID              shift and go to state 13

    exp                            shift and go to state 273
    quallist                       shift and go to state 274
    qual                           shift and go to state 275
    pat                            shift and go to state 276
    lpat                           shift and go to state 12
    infixexp                       shift and go to state 79
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    var                            shift and go to state 106
    qcon                           shift and go to state 17
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88

state 250

    (101) explist -> exp VIRGULA . explist
    (101) explist -> . exp VIRGULA explist
    (102) explist -> . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 279
    explist                        shift and go to state 280
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 251

    (79) gdrhs -> guards EQUAL exp gdrhs .

    WHERE           reduce using rule 79 (gdrhs -> guards EQUAL exp gdrhs .)


state 252

    (81) guardslist -> guard VIRGULA guardslist .

    EQUAL           reduce using rule 81 (guardslist -> guard VIRGULA guardslist .)
    SETAS           reduce using rule 81 (guardslist -> guard VIRGULA guardslist .)


state 253

    (83) guard -> pat SETAS infixexp .
    (108) expop -> infixexp . varop infixexp
    (109) expop -> infixexp . PLUS infixexp
    (110) expop -> infixexp . MINUS infixexp
    (111) expop -> infixexp . MULT infixexp
    (112) expop -> infixexp . DIV infixexp
    (113) expop -> infixexp . CIRCUNFLEXO infixexp
    (114) expop -> infixexp . MAIOR_IGUAL infixexp
    (115) expop -> infixexp . MENOR_IGUAL infixexp
    (116) expop -> infixexp . MAIOR infixexp
    (117) expop -> infixexp . MENOR infixexp
    (118) expop -> infixexp . IGUAL infixexp
    (119) expop -> infixexp . DIFERENTE infixexp
    (120) expop -> infixexp . OR infixexp
    (121) expop -> infixexp . NOT infixexp
    (122) expop -> infixexp . AND infixexp
    (152) varop -> . VARSYM
    (153) varop -> . CRASE ID CRASE

    VIRGULA         reduce using rule 83 (guard -> pat SETAS infixexp .)
    EQUAL           reduce using rule 83 (guard -> pat SETAS infixexp .)
    SETAS           reduce using rule 83 (guard -> pat SETAS infixexp .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165
    MULT            shift and go to state 166
    DIV             shift and go to state 167
    CIRCUNFLEXO     shift and go to state 168
    MAIOR_IGUAL     shift and go to state 169
    MENOR_IGUAL     shift and go to state 170
    MAIOR           shift and go to state 171
    MENOR           shift and go to state 172
    IGUAL           shift and go to state 173
    DIFERENTE       shift and go to state 174
    OR              shift and go to state 175
    NOT             shift and go to state 176
    AND             shift and go to state 177
    VARSYM          shift and go to state 48
    CRASE           shift and go to state 49

    varop                          shift and go to state 163

state 254

    (15) type -> btype SETAS type .

    PONTO_VIRGULA   reduce using rule 15 (type -> btype SETAS type .)
    $end            reduce using rule 15 (type -> btype SETAS type .)
    RCHAVE          reduce using rule 15 (type -> btype SETAS type .)
    RPAREN          reduce using rule 15 (type -> btype SETAS type .)
    VIRGULA         reduce using rule 15 (type -> btype SETAS type .)
    RCOLCHETE       reduce using rule 15 (type -> btype SETAS type .)
    WHERE           reduce using rule 15 (type -> btype SETAS type .)
    THEN            reduce using rule 15 (type -> btype SETAS type .)
    OF              reduce using rule 15 (type -> btype SETAS type .)
    PIPE            reduce using rule 15 (type -> btype SETAS type .)
    PLUS            reduce using rule 15 (type -> btype SETAS type .)
    MINUS           reduce using rule 15 (type -> btype SETAS type .)
    MULT            reduce using rule 15 (type -> btype SETAS type .)
    DIV             reduce using rule 15 (type -> btype SETAS type .)
    CIRCUNFLEXO     reduce using rule 15 (type -> btype SETAS type .)
    MAIOR_IGUAL     reduce using rule 15 (type -> btype SETAS type .)
    MENOR_IGUAL     reduce using rule 15 (type -> btype SETAS type .)
    MAIOR           reduce using rule 15 (type -> btype SETAS type .)
    MENOR           reduce using rule 15 (type -> btype SETAS type .)
    IGUAL           reduce using rule 15 (type -> btype SETAS type .)
    DIFERENTE       reduce using rule 15 (type -> btype SETAS type .)
    OR              reduce using rule 15 (type -> btype SETAS type .)
    NOT             reduce using rule 15 (type -> btype SETAS type .)
    AND             reduce using rule 15 (type -> btype SETAS type .)
    VARSYM          reduce using rule 15 (type -> btype SETAS type .)
    CRASE           reduce using rule 15 (type -> btype SETAS type .)
    DOIS_PONTOS_DUPLO reduce using rule 15 (type -> btype SETAS type .)
    DOIS_PONTOS     reduce using rule 15 (type -> btype SETAS type .)
    EQUAL           reduce using rule 15 (type -> btype SETAS type .)
    SETAS           reduce using rule 15 (type -> btype SETAS type .)
    ELSE            reduce using rule 15 (type -> btype SETAS type .)


state 255

    (23) atype -> LPAREN type RPAREN .

    SETAS           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    INT             reduce using rule 23 (atype -> LPAREN type RPAREN .)
    FLOAT           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    BOOL            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    CHAR            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    STRING          reduce using rule 23 (atype -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 23 (atype -> LPAREN type RPAREN .)
    LCOLCHETE       reduce using rule 23 (atype -> LPAREN type RPAREN .)
    PONTO_VIRGULA   reduce using rule 23 (atype -> LPAREN type RPAREN .)
    $end            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 23 (atype -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 23 (atype -> LPAREN type RPAREN .)
    VIRGULA         reduce using rule 23 (atype -> LPAREN type RPAREN .)
    RCOLCHETE       reduce using rule 23 (atype -> LPAREN type RPAREN .)
    WHERE           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    THEN            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    OF              reduce using rule 23 (atype -> LPAREN type RPAREN .)
    PIPE            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    PLUS            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    MINUS           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    MULT            reduce using rule 23 (atype -> LPAREN type RPAREN .)
    DIV             reduce using rule 23 (atype -> LPAREN type RPAREN .)
    CIRCUNFLEXO     reduce using rule 23 (atype -> LPAREN type RPAREN .)
    MAIOR_IGUAL     reduce using rule 23 (atype -> LPAREN type RPAREN .)
    MENOR_IGUAL     reduce using rule 23 (atype -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    MENOR           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    IGUAL           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 23 (atype -> LPAREN type RPAREN .)
    OR              reduce using rule 23 (atype -> LPAREN type RPAREN .)
    NOT             reduce using rule 23 (atype -> LPAREN type RPAREN .)
    AND             reduce using rule 23 (atype -> LPAREN type RPAREN .)
    VARSYM          reduce using rule 23 (atype -> LPAREN type RPAREN .)
    CRASE           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 23 (atype -> LPAREN type RPAREN .)
    DOIS_PONTOS     reduce using rule 23 (atype -> LPAREN type RPAREN .)
    EQUAL           reduce using rule 23 (atype -> LPAREN type RPAREN .)
    ELSE            reduce using rule 23 (atype -> LPAREN type RPAREN .)


state 256

    (26) typetuple -> type VIRGULA . typetuple
    (26) typetuple -> . type VIRGULA typetuple
    (27) typetuple -> . type
    (14) type -> . btype
    (15) type -> . btype SETAS type
    (16) btype -> . btype atype
    (17) btype -> . atype
    (18) atype -> . INT
    (19) atype -> . FLOAT
    (20) atype -> . BOOL
    (21) atype -> . CHAR
    (22) atype -> . STRING
    (23) atype -> . LPAREN type RPAREN
    (24) atype -> . LPAREN typetuple RPAREN
    (25) atype -> . LCOLCHETE type RCOLCHETE

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOL            shift and go to state 136
    CHAR            shift and go to state 137
    STRING          shift and go to state 138
    LPAREN          shift and go to state 139
    LCOLCHETE       shift and go to state 140

    type                           shift and go to state 281
    typetuple                      shift and go to state 282
    btype                          shift and go to state 132
    atype                          shift and go to state 133

state 257

    (24) atype -> LPAREN typetuple RPAREN .

    SETAS           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    INT             reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    FLOAT           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    BOOL            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    CHAR            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    STRING          reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    LPAREN          reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    LCOLCHETE       reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    PONTO_VIRGULA   reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    $end            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    RCHAVE          reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    RPAREN          reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    VIRGULA         reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    RCOLCHETE       reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    WHERE           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    THEN            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    OF              reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    PIPE            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    PLUS            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    MINUS           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    MULT            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    DIV             reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    CIRCUNFLEXO     reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    MAIOR_IGUAL     reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    MENOR_IGUAL     reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    MAIOR           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    MENOR           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    IGUAL           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    DIFERENTE       reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    OR              reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    NOT             reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    AND             reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    VARSYM          reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    CRASE           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    DOIS_PONTOS     reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    EQUAL           reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)
    ELSE            reduce using rule 24 (atype -> LPAREN typetuple RPAREN .)


state 258

    (25) atype -> LCOLCHETE type RCOLCHETE .

    SETAS           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    INT             reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    FLOAT           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    BOOL            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    CHAR            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    STRING          reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    LPAREN          reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    LCOLCHETE       reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    PONTO_VIRGULA   reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    $end            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    RCHAVE          reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    RPAREN          reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    VIRGULA         reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    RCOLCHETE       reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    WHERE           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    THEN            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    OF              reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    PIPE            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    PLUS            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    MINUS           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    MULT            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    DIV             reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    CIRCUNFLEXO     reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    MAIOR_IGUAL     reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    MENOR_IGUAL     reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    MAIOR           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    MENOR           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    IGUAL           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    DIFERENTE       reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    OR              reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    NOT             reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    AND             reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    VARSYM          reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    CRASE           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    DOIS_PONTOS_DUPLO reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    DOIS_PONTOS     reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    EQUAL           reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)
    ELSE            reduce using rule 25 (atype -> LCOLCHETE type RCOLCHETE .)


state 259

    (47) fpatlist -> fpat VIRGULA fpatlist .

    RCHAVE          reduce using rule 47 (fpatlist -> fpat VIRGULA fpatlist .)


state 260

    (49) fpat -> var EQUAL pat .

    VIRGULA         reduce using rule 49 (fpat -> var EQUAL pat .)
    RCHAVE          reduce using rule 49 (fpat -> var EQUAL pat .)


state 261

    (123) lexp -> BARRA_INVERTIDA apatlist SETAS exp .

    DOIS_PONTOS_DUPLO reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    PLUS            reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    MINUS           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    MULT            reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    DIV             reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    CIRCUNFLEXO     reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    MAIOR_IGUAL     reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    MENOR_IGUAL     reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    MAIOR           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    MENOR           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    IGUAL           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    DIFERENTE       reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    OR              reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    NOT             reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    AND             reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    VARSYM          reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    CRASE           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    WHERE           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    VIRGULA         reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    EQUAL           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    SETAS           reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    THEN            reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    OF              reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    DOIS_PONTOS     reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    RPAREN          reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    PIPE            reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    RCOLCHETE       reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    ELSE            reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    PONTO_VIRGULA   reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)
    RCHAVE          reduce using rule 123 (lexp -> BARRA_INVERTIDA apatlist SETAS exp .)


state 262

    (124) lexp -> LET decls IN exp .

    DOIS_PONTOS_DUPLO reduce using rule 124 (lexp -> LET decls IN exp .)
    PLUS            reduce using rule 124 (lexp -> LET decls IN exp .)
    MINUS           reduce using rule 124 (lexp -> LET decls IN exp .)
    MULT            reduce using rule 124 (lexp -> LET decls IN exp .)
    DIV             reduce using rule 124 (lexp -> LET decls IN exp .)
    CIRCUNFLEXO     reduce using rule 124 (lexp -> LET decls IN exp .)
    MAIOR_IGUAL     reduce using rule 124 (lexp -> LET decls IN exp .)
    MENOR_IGUAL     reduce using rule 124 (lexp -> LET decls IN exp .)
    MAIOR           reduce using rule 124 (lexp -> LET decls IN exp .)
    MENOR           reduce using rule 124 (lexp -> LET decls IN exp .)
    IGUAL           reduce using rule 124 (lexp -> LET decls IN exp .)
    DIFERENTE       reduce using rule 124 (lexp -> LET decls IN exp .)
    OR              reduce using rule 124 (lexp -> LET decls IN exp .)
    NOT             reduce using rule 124 (lexp -> LET decls IN exp .)
    AND             reduce using rule 124 (lexp -> LET decls IN exp .)
    VARSYM          reduce using rule 124 (lexp -> LET decls IN exp .)
    CRASE           reduce using rule 124 (lexp -> LET decls IN exp .)
    WHERE           reduce using rule 124 (lexp -> LET decls IN exp .)
    VIRGULA         reduce using rule 124 (lexp -> LET decls IN exp .)
    EQUAL           reduce using rule 124 (lexp -> LET decls IN exp .)
    SETAS           reduce using rule 124 (lexp -> LET decls IN exp .)
    THEN            reduce using rule 124 (lexp -> LET decls IN exp .)
    OF              reduce using rule 124 (lexp -> LET decls IN exp .)
    DOIS_PONTOS     reduce using rule 124 (lexp -> LET decls IN exp .)
    RPAREN          reduce using rule 124 (lexp -> LET decls IN exp .)
    PIPE            reduce using rule 124 (lexp -> LET decls IN exp .)
    RCOLCHETE       reduce using rule 124 (lexp -> LET decls IN exp .)
    ELSE            reduce using rule 124 (lexp -> LET decls IN exp .)
    PONTO_VIRGULA   reduce using rule 124 (lexp -> LET decls IN exp .)
    RCHAVE          reduce using rule 124 (lexp -> LET decls IN exp .)


state 263

    (5) decls -> LCHAVE declslist RCHAVE .

    IN              reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    PONTO_VIRGULA   reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    $end            reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    RCHAVE          reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    VIRGULA         reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    EQUAL           reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    SETAS           reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)
    RCOLCHETE       reduce using rule 5 (decls -> LCHAVE declslist RCHAVE .)


state 264

    (6) declslist -> decl PONTO_VIRGULA . declslist
    (6) declslist -> . decl PONTO_VIRGULA declslist
    (7) declslist -> . decl
    (8) decl -> . gendecl
    (9) decl -> . funlhs rhs
    (10) decl -> . pat rhs
    (11) gendecl -> . vars DOIS_PONTOS_DUPLO type
    (28) funlhs -> . var apatlist
    (29) funlhs -> . patop
    (30) funlhs -> . LPAREN funlhs RPAREN apatlist
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (12) vars -> . var
    (13) vars -> . var VIRGULA vars
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (54) patop -> . pat varop pat
    (55) patop -> . pat PLUS pat
    (56) patop -> . pat MINUS pat
    (57) patop -> . pat MULT pat
    (58) patop -> . pat BARRA pat
    (59) patop -> . pat CIRCUNFLEXO pat
    (60) patop -> . pat MAIOR_IGUAL pat
    (61) patop -> . pat MENOR_IGUAL pat
    (62) patop -> . pat MAIOR pat
    (63) patop -> . pat MENOR pat
    (64) patop -> . pat IGUAL pat
    (65) patop -> . pat DIFERENTE pat
    (66) patop -> . pat OR pat
    (67) patop -> . pat NOT pat
    (68) patop -> . pat AND pat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    LPAREN          shift and go to state 11
    ID              shift and go to state 13
    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LCOLCHETE       shift and go to state 25

    decl                           shift and go to state 237
    declslist                      shift and go to state 283
    gendecl                        shift and go to state 5
    funlhs                         shift and go to state 6
    pat                            shift and go to state 7
    vars                           shift and go to state 8
    var                            shift and go to state 9
    patop                          shift and go to state 10
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    qcon                           shift and go to state 17

state 265

    (125) lexp -> IF exp THEN exp . ELSE exp

    ELSE            shift and go to state 284


state 266

    (126) lexp -> CASE exp OF LCHAVE . alts RCHAVE
    (135) alts -> . alt PONTO_VIRGULA alts
    (136) alts -> . alt
    (137) alt -> . pat SETAS exp optionwhere
    (138) alt -> . pat gdpat optionwhere
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    alts                           shift and go to state 285
    alt                            shift and go to state 286
    pat                            shift and go to state 287
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 267

    (100) exptuple -> exp VIRGULA exp .
    (99) exptuple -> exp . VIRGULA exptuple
    (100) exptuple -> exp . VIRGULA exp

    RPAREN          reduce using rule 100 (exptuple -> exp VIRGULA exp .)
    VIRGULA         shift and go to state 242


state 268

    (99) exptuple -> exp VIRGULA exptuple .

    RPAREN          reduce using rule 99 (exptuple -> exp VIRGULA exptuple .)


state 269

    (97) aexp -> LPAREN infixexp qop RPAREN .

    INT             reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    FLOAT           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    CHAR            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    STRING          reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    TRUE            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    FALSE           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    LPAREN          reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    LCOLCHETE       reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    ID              reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    PLUS            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    MINUS           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    MULT            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    DIV             reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    CIRCUNFLEXO     reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    MAIOR_IGUAL     reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    MENOR_IGUAL     reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    MAIOR           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    MENOR           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    IGUAL           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    DIFERENTE       reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    OR              reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    NOT             reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    AND             reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    VARSYM          reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    CRASE           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    WHERE           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    VIRGULA         reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    EQUAL           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    SETAS           reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    THEN            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    OF              reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    DOIS_PONTOS     reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    RPAREN          reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    PIPE            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    RCOLCHETE       reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    ELSE            reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    PONTO_VIRGULA   reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)
    RCHAVE          reduce using rule 97 (aexp -> LPAREN infixexp qop RPAREN .)


state 270

    (153) varop -> CRASE ID . CRASE
    (155) qvarop -> CRASE ID . CRASE

    CRASE           shift and go to state 288


state 271

    (98) aexp -> LPAREN qop infixexp RPAREN .

    INT             reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    FLOAT           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    CHAR            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    STRING          reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    TRUE            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    FALSE           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    LPAREN          reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    LCOLCHETE       reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    ID              reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    DOIS_PONTOS_DUPLO reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    PLUS            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    MINUS           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    MULT            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    DIV             reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    CIRCUNFLEXO     reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    MAIOR_IGUAL     reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    MENOR_IGUAL     reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    MAIOR           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    MENOR           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    IGUAL           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    DIFERENTE       reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    OR              reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    NOT             reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    AND             reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    VARSYM          reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    CRASE           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    WHERE           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    VIRGULA         reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    EQUAL           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    SETAS           reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    THEN            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    OF              reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    DOIS_PONTOS     reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    RPAREN          reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    PIPE            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    RCOLCHETE       reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    ELSE            reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    PONTO_VIRGULA   reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)
    RCHAVE          reduce using rule 98 (aexp -> LPAREN qop infixexp RPAREN .)


state 272

    (155) qvarop -> CRASE ID CRASE .

    MINUS           reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    BARRA_INVERTIDA reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    LET             reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    IF              reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    CASE            reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    INT             reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    FLOAT           reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    CHAR            reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    STRING          reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    TRUE            reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    FALSE           reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    LPAREN          reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    LCOLCHETE       reduce using rule 155 (qvarop -> CRASE ID CRASE .)
    ID              reduce using rule 155 (qvarop -> CRASE ID CRASE .)


state 273

    (134) qual -> exp .

    VIRGULA         reduce using rule 134 (qual -> exp .)
    RCOLCHETE       reduce using rule 134 (qual -> exp .)


state 274

    (96) aexp -> LCOLCHETE exp PIPE quallist . RCOLCHETE

    RCOLCHETE       shift and go to state 289


state 275

    (130) quallist -> qual . VIRGULA quallist
    (131) quallist -> qual .

    VIRGULA         shift and go to state 290
    RCOLCHETE       reduce using rule 131 (quallist -> qual .)


state 276

    (132) qual -> pat . SETAS exp

    SETAS           shift and go to state 291


state 277

    (133) qual -> LET . decls
    (124) lexp -> LET . decls IN exp
    (5) decls -> . LCHAVE declslist RCHAVE

    LCHAVE          shift and go to state 181

    decls                          shift and go to state 292

state 278

    (72) lpat -> MINUS . lpattype
    (106) infixexp -> MINUS . infixexp
    (74) lpattype -> . INT
    (75) lpattype -> . FLOAT
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    INT             shift and go to state 201
    FLOAT           shift and go to state 202
    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    lpattype                       shift and go to state 68
    infixexp                       shift and go to state 178
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 279

    (101) explist -> exp . VIRGULA explist
    (102) explist -> exp .

    VIRGULA         shift and go to state 250
    RCOLCHETE       reduce using rule 102 (explist -> exp .)


state 280

    (101) explist -> exp VIRGULA explist .

    RCOLCHETE       reduce using rule 101 (explist -> exp VIRGULA explist .)


state 281

    (26) typetuple -> type . VIRGULA typetuple
    (27) typetuple -> type .

    VIRGULA         shift and go to state 256
    RPAREN          reduce using rule 27 (typetuple -> type .)


state 282

    (26) typetuple -> type VIRGULA typetuple .

    RPAREN          reduce using rule 26 (typetuple -> type VIRGULA typetuple .)


state 283

    (6) declslist -> decl PONTO_VIRGULA declslist .

    RCHAVE          reduce using rule 6 (declslist -> decl PONTO_VIRGULA declslist .)


state 284

    (125) lexp -> IF exp THEN exp ELSE . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 293
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 285

    (126) lexp -> CASE exp OF LCHAVE alts . RCHAVE

    RCHAVE          shift and go to state 294


state 286

    (135) alts -> alt . PONTO_VIRGULA alts
    (136) alts -> alt .

    PONTO_VIRGULA   shift and go to state 295
    RCHAVE          reduce using rule 136 (alts -> alt .)


state 287

    (137) alt -> pat . SETAS exp optionwhere
    (138) alt -> pat . gdpat optionwhere
    (141) gdpat -> . guards SETAS exp
    (142) gdpat -> . guards SETAS exp gdpat
    (80) guards -> . PIPE guardslist

    SETAS           shift and go to state 296
    PIPE            shift and go to state 31

    gdpat                          shift and go to state 297
    guards                         shift and go to state 298

state 288

    (153) varop -> CRASE ID CRASE .
    (155) qvarop -> CRASE ID CRASE .

    MINUS           reduce using rule 153 (varop -> CRASE ID CRASE .)
    BARRA_INVERTIDA reduce using rule 153 (varop -> CRASE ID CRASE .)
    LET             reduce using rule 153 (varop -> CRASE ID CRASE .)
    IF              reduce using rule 153 (varop -> CRASE ID CRASE .)
    CASE            reduce using rule 153 (varop -> CRASE ID CRASE .)
    INT             reduce using rule 153 (varop -> CRASE ID CRASE .)
    FLOAT           reduce using rule 153 (varop -> CRASE ID CRASE .)
    CHAR            reduce using rule 153 (varop -> CRASE ID CRASE .)
    STRING          reduce using rule 153 (varop -> CRASE ID CRASE .)
    TRUE            reduce using rule 153 (varop -> CRASE ID CRASE .)
    FALSE           reduce using rule 153 (varop -> CRASE ID CRASE .)
    LPAREN          reduce using rule 153 (varop -> CRASE ID CRASE .)
    LCOLCHETE       reduce using rule 153 (varop -> CRASE ID CRASE .)
    ID              reduce using rule 153 (varop -> CRASE ID CRASE .)
    RPAREN          reduce using rule 155 (qvarop -> CRASE ID CRASE .)


state 289

    (96) aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .

    INT             reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    FLOAT           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    CHAR            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    STRING          reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    TRUE            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    FALSE           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    LPAREN          reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    LCOLCHETE       reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    ID              reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    DOIS_PONTOS_DUPLO reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    PLUS            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    MINUS           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    MULT            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    DIV             reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    CIRCUNFLEXO     reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    MAIOR_IGUAL     reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    MENOR_IGUAL     reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    MAIOR           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    MENOR           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    IGUAL           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    DIFERENTE       reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    OR              reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    NOT             reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    AND             reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    VARSYM          reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    CRASE           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    WHERE           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    VIRGULA         reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    EQUAL           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    SETAS           reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    THEN            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    OF              reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    DOIS_PONTOS     reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    RPAREN          reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    PIPE            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    RCOLCHETE       reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    ELSE            reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    PONTO_VIRGULA   reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)
    RCHAVE          reduce using rule 96 (aexp -> LCOLCHETE exp PIPE quallist RCOLCHETE .)


state 290

    (130) quallist -> qual VIRGULA . quallist
    (130) quallist -> . qual VIRGULA quallist
    (131) quallist -> . qual
    (132) qual -> . pat SETAS exp
    (133) qual -> . LET decls
    (134) qual -> . exp
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN

    LET             shift and go to state 277
    MINUS           shift and go to state 278
    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    CHAR            shift and go to state 109
    STRING          shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 113
    LCOLCHETE       shift and go to state 114
    BARRA_INVERTIDA shift and go to state 83
    IF              shift and go to state 85
    CASE            shift and go to state 86
    ID              shift and go to state 13

    qual                           shift and go to state 275
    quallist                       shift and go to state 299
    pat                            shift and go to state 276
    exp                            shift and go to state 273
    lpat                           shift and go to state 12
    infixexp                       shift and go to state 79
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    var                            shift and go to state 106
    qcon                           shift and go to state 17
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88

state 291

    (132) qual -> pat SETAS . exp
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 300
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 292

    (133) qual -> LET decls .
    (124) lexp -> LET decls . IN exp

    VIRGULA         reduce using rule 133 (qual -> LET decls .)
    RCOLCHETE       reduce using rule 133 (qual -> LET decls .)
    IN              shift and go to state 235


state 293

    (125) lexp -> IF exp THEN exp ELSE exp .

    DOIS_PONTOS_DUPLO reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    PLUS            reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    MINUS           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    MULT            reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    DIV             reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    CIRCUNFLEXO     reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    MAIOR_IGUAL     reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    MENOR_IGUAL     reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    MAIOR           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    MENOR           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    IGUAL           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    DIFERENTE       reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    OR              reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    NOT             reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    AND             reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    VARSYM          reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    CRASE           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    WHERE           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    VIRGULA         reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    EQUAL           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    SETAS           reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    THEN            reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    OF              reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    DOIS_PONTOS     reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    RPAREN          reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    PIPE            reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    RCOLCHETE       reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    ELSE            reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    PONTO_VIRGULA   reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)
    RCHAVE          reduce using rule 125 (lexp -> IF exp THEN exp ELSE exp .)


state 294

    (126) lexp -> CASE exp OF LCHAVE alts RCHAVE .

    DOIS_PONTOS_DUPLO reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    PLUS            reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    MINUS           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    MULT            reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    DIV             reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    CIRCUNFLEXO     reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    MAIOR_IGUAL     reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    MENOR_IGUAL     reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    MAIOR           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    MENOR           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    IGUAL           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    DIFERENTE       reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    OR              reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    NOT             reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    AND             reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    VARSYM          reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    CRASE           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    WHERE           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    VIRGULA         reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    EQUAL           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    SETAS           reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    THEN            reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    OF              reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    DOIS_PONTOS     reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    RPAREN          reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    PIPE            reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    RCOLCHETE       reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    ELSE            reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    PONTO_VIRGULA   reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)
    RCHAVE          reduce using rule 126 (lexp -> CASE exp OF LCHAVE alts RCHAVE .)


state 295

    (135) alts -> alt PONTO_VIRGULA . alts
    (135) alts -> . alt PONTO_VIRGULA alts
    (136) alts -> . alt
    (137) alt -> . pat SETAS exp optionwhere
    (138) alt -> . pat gdpat optionwhere
    (69) pat -> . lpat DOIS_PONTOS pat
    (70) pat -> . lpat
    (71) lpat -> . apat
    (72) lpat -> . MINUS lpattype
    (73) lpat -> . gcon apatlist
    (33) apat -> . var
    (34) apat -> . var ARROBA apat
    (35) apat -> . qcon LCHAVE fpatlist RCHAVE
    (36) apat -> . INT
    (37) apat -> . FLOAT
    (38) apat -> . CHAR
    (39) apat -> . STRING
    (40) apat -> . TRUE
    (41) apat -> . FALSE
    (42) apat -> . gcon
    (43) apat -> . UNDERLINE
    (44) apat -> . LPAREN pat RPAREN
    (45) apat -> . LPAREN pattuple RPAREN
    (46) apat -> . LCOLCHETE patlist RCOLCHETE
    (143) gcon -> . LPAREN RPAREN
    (144) gcon -> . LCOLCHETE RCOLCHETE
    (145) gcon -> . LPAREN virgulalist RPAREN
    (146) gcon -> . qcon
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN
    (151) qcon -> . LPAREN DOIS_PONTOS RPAREN

    MINUS           shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    UNDERLINE       shift and go to state 24
    LPAREN          shift and go to state 76
    LCOLCHETE       shift and go to state 25
    ID              shift and go to state 13

    alt                            shift and go to state 286
    alts                           shift and go to state 301
    pat                            shift and go to state 287
    lpat                           shift and go to state 12
    apat                           shift and go to state 15
    gcon                           shift and go to state 16
    var                            shift and go to state 51
    qcon                           shift and go to state 17

state 296

    (137) alt -> pat SETAS . exp optionwhere
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 302
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 297

    (138) alt -> pat gdpat . optionwhere
    (139) optionwhere -> . WHERE decls
    (140) optionwhere -> .

    WHERE           shift and go to state 304
    PONTO_VIRGULA   reduce using rule 140 (optionwhere -> .)
    RCHAVE          reduce using rule 140 (optionwhere -> .)

    optionwhere                    shift and go to state 303

state 298

    (141) gdpat -> guards . SETAS exp
    (142) gdpat -> guards . SETAS exp gdpat

    SETAS           shift and go to state 305


state 299

    (130) quallist -> qual VIRGULA quallist .

    RCOLCHETE       reduce using rule 130 (quallist -> qual VIRGULA quallist .)


state 300

    (132) qual -> pat SETAS exp .

    VIRGULA         reduce using rule 132 (qual -> pat SETAS exp .)
    RCOLCHETE       reduce using rule 132 (qual -> pat SETAS exp .)


state 301

    (135) alts -> alt PONTO_VIRGULA alts .

    RCHAVE          reduce using rule 135 (alts -> alt PONTO_VIRGULA alts .)


state 302

    (137) alt -> pat SETAS exp . optionwhere
    (139) optionwhere -> . WHERE decls
    (140) optionwhere -> .

    WHERE           shift and go to state 304
    PONTO_VIRGULA   reduce using rule 140 (optionwhere -> .)
    RCHAVE          reduce using rule 140 (optionwhere -> .)

    optionwhere                    shift and go to state 306

state 303

    (138) alt -> pat gdpat optionwhere .

    PONTO_VIRGULA   reduce using rule 138 (alt -> pat gdpat optionwhere .)
    RCHAVE          reduce using rule 138 (alt -> pat gdpat optionwhere .)


state 304

    (139) optionwhere -> WHERE . decls
    (5) decls -> . LCHAVE declslist RCHAVE

    LCHAVE          shift and go to state 181

    decls                          shift and go to state 307

state 305

    (141) gdpat -> guards SETAS . exp
    (142) gdpat -> guards SETAS . exp gdpat
    (103) exp -> . infixexp DOIS_PONTOS_DUPLO type
    (104) exp -> . infixexp
    (105) infixexp -> . expop
    (106) infixexp -> . MINUS infixexp
    (107) infixexp -> . lexp
    (108) expop -> . infixexp varop infixexp
    (109) expop -> . infixexp PLUS infixexp
    (110) expop -> . infixexp MINUS infixexp
    (111) expop -> . infixexp MULT infixexp
    (112) expop -> . infixexp DIV infixexp
    (113) expop -> . infixexp CIRCUNFLEXO infixexp
    (114) expop -> . infixexp MAIOR_IGUAL infixexp
    (115) expop -> . infixexp MENOR_IGUAL infixexp
    (116) expop -> . infixexp MAIOR infixexp
    (117) expop -> . infixexp MENOR infixexp
    (118) expop -> . infixexp IGUAL infixexp
    (119) expop -> . infixexp DIFERENTE infixexp
    (120) expop -> . infixexp OR infixexp
    (121) expop -> . infixexp NOT infixexp
    (122) expop -> . infixexp AND infixexp
    (123) lexp -> . BARRA_INVERTIDA apatlist SETAS exp
    (124) lexp -> . LET decls IN exp
    (125) lexp -> . IF exp THEN exp ELSE exp
    (126) lexp -> . CASE exp OF LCHAVE alts RCHAVE
    (127) lexp -> . fexp
    (128) fexp -> . aexp aexp
    (129) fexp -> . aexp fexp
    (86) aexp -> . var
    (87) aexp -> . INT
    (88) aexp -> . FLOAT
    (89) aexp -> . CHAR
    (90) aexp -> . STRING
    (91) aexp -> . TRUE
    (92) aexp -> . FALSE
    (93) aexp -> . LPAREN exptuple RPAREN
    (94) aexp -> . LCOLCHETE explist RCOLCHETE
    (95) aexp -> . LPAREN exp RPAREN
    (96) aexp -> . LCOLCHETE exp PIPE quallist RCOLCHETE
    (97) aexp -> . LPAREN infixexp qop RPAREN
    (98) aexp -> . LPAREN qop infixexp RPAREN
    (149) var -> . ID
    (150) var -> . LPAREN VARSYM RPAREN

    MINUS           shift and go to state 81
    BARRA_INVERTIDA shift and go to state 83
    LET             shift and go to state 84
    IF              shift and go to state 85
    CASE            shift and go to state 86
    INT             shift and go to state 90
    FLOAT           shift and go to state 91
    CHAR            shift and go to state 92
    STRING          shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    LPAREN          shift and go to state 96
    LCOLCHETE       shift and go to state 97
    ID              shift and go to state 13

    exp                            shift and go to state 308
    infixexp                       shift and go to state 79
    expop                          shift and go to state 80
    lexp                           shift and go to state 82
    fexp                           shift and go to state 87
    aexp                           shift and go to state 88
    var                            shift and go to state 89

state 306

    (137) alt -> pat SETAS exp optionwhere .

    PONTO_VIRGULA   reduce using rule 137 (alt -> pat SETAS exp optionwhere .)
    RCHAVE          reduce using rule 137 (alt -> pat SETAS exp optionwhere .)


state 307

    (139) optionwhere -> WHERE decls .

    PONTO_VIRGULA   reduce using rule 139 (optionwhere -> WHERE decls .)
    RCHAVE          reduce using rule 139 (optionwhere -> WHERE decls .)


state 308

    (141) gdpat -> guards SETAS exp .
    (142) gdpat -> guards SETAS exp . gdpat
    (141) gdpat -> . guards SETAS exp
    (142) gdpat -> . guards SETAS exp gdpat
    (80) guards -> . PIPE guardslist

    WHERE           reduce using rule 141 (gdpat -> guards SETAS exp .)
    PONTO_VIRGULA   reduce using rule 141 (gdpat -> guards SETAS exp .)
    RCHAVE          reduce using rule 141 (gdpat -> guards SETAS exp .)
    PIPE            shift and go to state 31

    guards                         shift and go to state 298
    gdpat                          shift and go to state 309

state 309

    (142) gdpat -> guards SETAS exp gdpat .

    WHERE           reduce using rule 142 (gdpat -> guards SETAS exp gdpat .)
    PONTO_VIRGULA   reduce using rule 142 (gdpat -> guards SETAS exp gdpat .)
    RCHAVE          reduce using rule 142 (gdpat -> guards SETAS exp gdpat .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOIS_PONTOS_DUPLO in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MULT in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for CIRCUNFLEXO in state 79 resolved as shift
WARNING: shift/reduce conflict for MAIOR_IGUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 79 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 79 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for NOT in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for VARSYM in state 79 resolved as shift
WARNING: shift/reduce conflict for CRASE in state 79 resolved as shift
WARNING: shift/reduce conflict for SETAS in state 132 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 219 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 219 resolved as shift
WARNING: shift/reduce conflict for MULT in state 219 resolved as shift
WARNING: shift/reduce conflict for DIV in state 219 resolved as shift
WARNING: shift/reduce conflict for CIRCUNFLEXO in state 219 resolved as shift
WARNING: shift/reduce conflict for MAIOR_IGUAL in state 219 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 219 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 219 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 219 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 219 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 219 resolved as shift
WARNING: shift/reduce conflict for OR in state 219 resolved as shift
WARNING: shift/reduce conflict for NOT in state 219 resolved as shift
WARNING: shift/reduce conflict for AND in state 219 resolved as shift
WARNING: shift/reduce conflict for VARSYM in state 219 resolved as shift
WARNING: shift/reduce conflict for CRASE in state 219 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 223 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 223 resolved as shift
WARNING: shift/reduce conflict for MULT in state 223 resolved as shift
WARNING: shift/reduce conflict for DIV in state 223 resolved as shift
WARNING: shift/reduce conflict for CIRCUNFLEXO in state 223 resolved as shift
WARNING: shift/reduce conflict for MAIOR_IGUAL in state 223 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 223 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 223 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 223 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 223 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 223 resolved as shift
WARNING: shift/reduce conflict for OR in state 223 resolved as shift
WARNING: shift/reduce conflict for NOT in state 223 resolved as shift
WARNING: shift/reduce conflict for AND in state 223 resolved as shift
WARNING: shift/reduce conflict for VARSYM in state 223 resolved as shift
WARNING: shift/reduce conflict for CRASE in state 223 resolved as shift
