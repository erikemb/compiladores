cname	→	var

decls	→	{ decl1 ; … ; decln }	    (n ≥ 0)

decl	→	gendecl
|	(funlhs | pat) rhs

cdecls	→	{ cdecl1 ; … ; cdecln }	    (n ≥ 0)

cdecl	→	gendecl

idecls	→	{ idecl1 ; … ; idecln }	    (n ≥ 0)

idecl	→	(funlhs | var) rhs 
|		    (empty)

gendecl	→	vars :: [context =>] type	    (type signature)
|	fixity [integer] ops	    (fixity declaration)
|		    (empty declaration)

ops	→	op1 , … , opn	    (n ≥ 1)

vars	→	var1 , …, varn	    (n ≥ 1)

fixity	→	infixl | infixr | infix
 
type	→	btype [-> type]	    (function type)
 
btype	→	[btype] atype	    (type application)
 
atype	→	gtycon
|	tyvar
|	( type1 , … , typek )	    (tuple type, k ≥ 2)
|	[ type ]	    (list type)
|	( type )	    (parenthesized constructor)

gtycon	→	qtycon
|	()	    (unit type)
|	[]	    (list constructor)
|	(->)	    (function constructor)
|	(,{,})	    (tupling constructors)

fielddecl	→	vars :: (type | ! atype)

inst	→	gtycon
|	( gtycon tyvar1 … tyvark )	    (k ≥ 0, tyvars distinct)
|	( tyvar1 , … , tyvark )	    (k ≥ 2, tyvars distinct)
|	[ tyvar ]
|	( tyvar1 -> tyvar2 )	    tyvar1 and tyvar2 distinct

impent	→	[string]	    (see Section 8.5.1)
expent	→	[string]        (see Section 8.5.1)

ftype	→	frtype
|	fatype  →  ftype

frtype	→	()

funlhs	→	var apat { apat }
|	pat varop pat
|	( funlhs ) apat { apat }
 
rhs	→	= exp [where decls]
|	gdrhs [where decls]
 
gdrhs	→	guards = exp [gdrhs]
 
guards	→	| guard1, …, guardn	    (n ≥ 1)
guard	→	pat <- infixexp	    (pattern guard)
|	let decls	    (local declaration)
|	infixexp	    (boolean guard)

exp	→	infixexp :: [context =>] type	    (expression type signature)
|	infixexp
 
infixexp	→	lexp qop infixexp	    (infix operator application)
|	- infixexp	    (prefix negation)
|	lexp
 
lexp	→	\ apat1 … apatn -> exp	    (lambda abstraction, n ≥ 1)
|	let decls in exp	    (let expression)
|	if exp [;] then exp [;] else exp	    (conditional)
|	case exp of { alts }	    (case expression)
|	do { stmts }	    (do expression)
|	fexp

fexp	→	[fexp] aexp	    (function application)
 
aexp	→	qvar	    (variable)
|	gcon	    (general constructor)
|	literal
|	( exp )	    (parenthesized expression)
|	( exp1 , … , expk )	    (tuple, k ≥ 2)
|	[ exp1 , … , expk ]	    (list, k ≥ 1)
|	[ exp1 [, exp2] .. [exp3] ]	    (arithmetic sequence)
|	[ exp | qual1 , … , qualn ]	    (list comprehension, n ≥ 1)
|	( infixexp qop )	    (left section)
|	( qop⟨-⟩ infixexp )	    (right section)

qual	→	pat <- exp	    (generator)
|	let decls	    (local declaration)
|	exp	    (guard)

alts	→	alt1 ; … ; altn	    (n ≥ 1)

alt	→	pat -> exp [where decls]
|	pat gdpat [where decls]
|		    (empty alternative)
 
gdpat	→	guards -> exp [ gdpat ]

stmts	→	stmt1 … stmtn exp [;]	    (n ≥ 0)

stmt	→	exp ;
|	pat <- exp ;
|	let decls ;
|	;	    (empty statement)

fbind	→	qvar = exp
 
pat	→	lpat qconop pat	    (infix constructor)
|	lpat
 
lpat	→	apat
|	- (integer | float)	    (negative literal)
|	gcon apat1 … apatk	    (arity gcon  =  k, k ≥ 1)

apat	→	var [ @ apat]	    (as pattern)
|	gcon	    (arity gcon  =  0)
|	qcon { fpat1 , … , fpatk }	    (labeled pattern, k ≥ 0)
|	literal
|	_	    (wildcard)
|	( pat )	    (parenthesized pattern)
|	( pat1 , … , patk )	    (tuple pattern, k ≥ 2)
|	[ pat1 , … , patk ]	    (list pattern, k ≥ 1)
|	~ apat	    (irrefutable pattern)
 
fpat	→	qvar = pat

gcon	→	()
|	[]
|	(,{,})

var	→	varid | ( varsym )	    (variable)
qvar	→	qvarid | ( qvarsym )	    (qualified variable)
varop	→	varsym | `  varid `	    (variable operator)
qvarop	→	qvarsym | `  qvarid `	    (qualified variable operator)
op	→	varop | conop	    (operator)
qop	→	qvarop | qconop	    (qualified operator)
gconsym	→	: | qconsym