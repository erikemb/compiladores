
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABREBLOCO AND ARROBA ASPAS_DUPLAS ASPAS_SIMPLES BARRA BARRA_INVERTIDA BOOL CASE CHAR CIRCUNFLEXO COMENTARIO CRASE DEFAULT DIFERENTE DIV DOIS_PONTOS DOIS_PONTOS_DUPLO DOLLAR ECOMERCIAL ELSE EQUALS ESTRELA EXCLAMACAO FECHABLOCO FLOAT HASHTAG ID IF IGUAL IN INT INTERROGACAO LCHAVE LCOLCHETE LET LPAREN MAIOR MAIOR_IGUAL MENOR MENOR_IGUAL MINUS MULT NOT NOVA_LINHA OF OR PERCENT PIPE PLUS PONTO PONTO_VIRGULA RCHAVE RCOLCHETE RPAREN SETAS SETAS_DUPLO SETAS_ESQUERDA STRING TABULACAO THEN TIL VARSYM WHEREexpressao : expressao PLUS termo\n                 | expressao MINUS termoexpressao : termotermo : termo MULT fator\n             | termo DIV fatortermo : fatorfator : INTfator : '(' expressao ')' expressao : expressao AND termo\n                 | expressao OR termotermo : NOT fator"
    
_lr_action_items = {'NOT':([0,6,7,8,9,10,],[4,4,4,4,4,4,]),'INT':([0,4,6,7,8,9,10,11,12,],[5,5,5,5,5,5,5,5,5,]),'(':([0,4,6,7,8,9,10,11,12,],[6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,5,13,15,16,17,18,19,20,21,],[0,-3,-6,-7,-11,-1,-2,-9,-10,-4,-5,-8,]),'PLUS':([1,2,3,5,13,14,15,16,17,18,19,20,21,],[7,-3,-6,-7,-11,7,-1,-2,-9,-10,-4,-5,-8,]),'MINUS':([1,2,3,5,13,14,15,16,17,18,19,20,21,],[8,-3,-6,-7,-11,8,-1,-2,-9,-10,-4,-5,-8,]),'AND':([1,2,3,5,13,14,15,16,17,18,19,20,21,],[9,-3,-6,-7,-11,9,-1,-2,-9,-10,-4,-5,-8,]),'OR':([1,2,3,5,13,14,15,16,17,18,19,20,21,],[10,-3,-6,-7,-11,10,-1,-2,-9,-10,-4,-5,-8,]),')':([2,3,5,13,14,15,16,17,18,19,20,21,],[-3,-6,-7,-11,21,-1,-2,-9,-10,-4,-5,-8,]),'MULT':([2,3,5,13,15,16,17,18,19,20,21,],[11,-6,-7,-11,11,11,11,11,-4,-5,-8,]),'DIV':([2,3,5,13,15,16,17,18,19,20,21,],[12,-6,-7,-11,12,12,12,12,-4,-5,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressao':([0,6,],[1,14,]),'termo':([0,6,7,8,9,10,],[2,2,15,16,17,18,]),'fator':([0,4,6,7,8,9,10,11,12,],[3,13,3,3,3,3,3,19,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressao","S'",1,None,None,None),
  ('expressao -> expressao PLUS termo','expressao',3,'p_expressao_binaria','sintaticHaskell.py',9),
  ('expressao -> expressao MINUS termo','expressao',3,'p_expressao_binaria','sintaticHaskell.py',10),
  ('expressao -> termo','expressao',1,'p_expressao_termo','sintaticHaskell.py',17),
  ('termo -> termo MULT fator','termo',3,'p_termo_binario','sintaticHaskell.py',21),
  ('termo -> termo DIV fator','termo',3,'p_termo_binario','sintaticHaskell.py',22),
  ('termo -> fator','termo',1,'p_termo_fator','sintaticHaskell.py',29),
  ('fator -> INT','fator',1,'p_fator_numero','sintaticHaskell.py',33),
  ('fator -> ( expressao )','fator',3,'p_fator_parenteses','sintaticHaskell.py',45),
  ('expressao -> expressao AND termo','expressao',3,'p_expressao_booleana_binaria','sintaticHaskell.py',51),
  ('expressao -> expressao OR termo','expressao',3,'p_expressao_booleana_binaria','sintaticHaskell.py',52),
  ('termo -> NOT fator','termo',2,'p_termo_booleana_unario','sintaticHaskell.py',62),
]
